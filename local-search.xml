<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaSE基础复习六：泛型</title>
    <link href="/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E5%85%AD%EF%BC%9A%E6%B3%9B%E5%9E%8B/"/>
    <url>/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E5%85%AD%EF%BC%9A%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="JavaSE基础复习六：泛型"><a href="#JavaSE基础复习六：泛型" class="headerlink" title="JavaSE基础复习六：泛型"></a>JavaSE基础复习六：泛型</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型是JDK5中引入的特性，他提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型</p><ul><li><p>本质：参数化类型，也就是说所操作的数据类型被指定为一个参数。顾名思义，将类型由原来的具体的类型参数化，然后在使用、调用是传入具体的类型</p></li><li><p>可以使用的地方：可以用在类、方法和接口中，分别被称为泛型类、泛型方法和泛型接口</p></li><li><p>定义格式：</p><ul><li><p>&lt;类型&gt;：指定一种类型的格式</p></li><li><p>&lt;类型1，类型2..&gt;：指定多种类型的格式</p></li></ul><p>多种类型之间用逗号隔开。这里的类型可以看成是形参，将来具体调用时候给定的类型可以看成是实参，并且只能是<strong>引用数据类型</strong></p></li><li><p>泛型的优点：</p><ul><li>吧运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul></li></ul><h3 id="泛型使用方法"><a href="#泛型使用方法" class="headerlink" title="泛型使用方法"></a>泛型使用方法</h3><ul><li><p>泛型类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">修饰符 class 类名&lt;类型&gt; &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>泛型方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名) &#123;...&#125;<br><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>此时的T可以是任意引用类型，实际开发中一般不会这么使用，一般会用extends和super关键字限定类型</p></li><li><p>泛型接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">修饰符 interface 接口名&lt;类型&gt; &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><ul><li>类型通配符：&lt;?&gt;<ul><li>List&lt;?&gt;：表示元素类型位置的List，他的元素可以匹配任何的类型</li><li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li></ul></li><li>类型通配符的上限：&lt;? extends 类型&gt;<ul><li>List&lt;? extends Number&gt;：它表示的类型是<strong>Number或其子类型</strong></li></ul></li><li>类型通配符的下限：&lt;? super 类型&gt;<ul><li>List&lt;? Super Number&gt;：   它表示的类型是<strong>Number或其父类型</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>List&lt;?&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>List&lt;?&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br>List&lt;?&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br><br>System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br><span class="hljs-comment">//        List&lt;? extends Number&gt; list3 = new ArrayList&lt;Object&gt;(); // 报错，Object不是Number的子类型</span><br>List&lt;?&gt; list4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>List&lt;?&gt; list5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br><br>System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br>List&lt;? <span class="hljs-built_in">super</span> Number&gt; list6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>List&lt;? <span class="hljs-built_in">super</span> Number&gt; list7 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br><span class="hljs-comment">//        List&lt;? super Number&gt; list8 = new ArrayList&lt;Integer&gt;; // 报错，Integer不是Number的父类</span><br></code></pre></div></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</p><ul><li><p>原理：<strong>将传入的多个参数封装为了一个数组</strong></p></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">修饰符 返回值类型 方法名(数据类型... 变量名) &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... a)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : a) &#123;<br>        sum += n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>注意：</p><ul><li><p>如果一个方法有多个参数，<strong>那么可变参数一定要写到最后</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(String a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span>... c)</span> &#123;<br>    System.out.println(a);<br>    System.out.println(b);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : c) &#123;<br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>当有方法重载，优先使用确定参数个数的方法，如果没有再使用可变参数的方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... a)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : a) &#123;<br>        sum += n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;  <span class="hljs-comment">// 当传入三个int参数时，优先使用此方法</span><br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123; <span class="hljs-comment">// 当传入两个int参数时，优先使用此方法</span><br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>常用的方法：</p><ul><li>Arrays工具类中：<code>public static &lt;T&gt; List&lt;T&gt; asList(T... a)</code>，返回由指定数组支持的固定大小的列表</li><li>List接口中：<code>public static &lt;E&gt; List&lt;E&gt; of(E... elements)</code>，返回包含任意数量元素的不可变列表</li><li>Set接口中：<code>public static &lt;E&gt; Set&lt;E&gt; of(E... elements)</code>，返回一个包含任意数量元素的不可变集合</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE基础复习五：集合</title>
    <link href="/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%BA%94%EF%BC%9A%E9%9B%86%E5%90%88/"/>
    <url>/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%BA%94%EF%BC%9A%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="JavaSE基础复习五：集合"><a href="#JavaSE基础复习五：集合" class="headerlink" title="JavaSE基础复习五：集合"></a>JavaSE基础复习五：集合</h1><h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><ul><li><p>栈：FILO</p></li><li><p>队列：FIFO</p></li><li><p>数组：查询快，增删慢</p></li><li><p>链表：增删快，查询慢（对比数组）</p></li><li><p>哈希表：数据唯一，通过元素计算存储位置</p><ul><li><p>JDK8之前，底层采用数组+链表实现，可以当成一个元素为链表的数组</p></li><li><p>JDK8之后，在长度较长的时候，地层实现了优化</p></li></ul><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210722152356.png"></p></li></ul><h2 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h2><p>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210721231450.png"></p><ul><li><p>Collection（接口）：单列集合</p><ul><li><p>List（接口）：元素可重复</p><ul><li><p>ArrayList（实现类）</p></li><li><p>LinkedList（实现类）</p></li></ul></li><li><p>Set（接口）：元素不可重复</p><ul><li><p>HashSet（实现类）</p></li><li><p>TreeSet（实现类）</p></li></ul></li></ul></li><li><p>Map（接口)：双列集合</p><ul><li>HashMap（实现类）</li></ul></li></ul><h3 id="Collection的常用方法"><a href="#Collection的常用方法" class="headerlink" title="Collection的常用方法"></a>Collection的常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素</td></tr><tr><td>boolean remove(Object o)</td><td>从集合中移除指定元素，多个相同元素的时候，删除第一个</td></tr><tr><td>void clear()</td><td>清空集合所有元素</td></tr><tr><td>boolean contains(Object o)</td><td>判断集合中是否存在指定的元素</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table><h3 id="Collection集合遍历"><a href="#Collection集合遍历" class="headerlink" title="Collection集合遍历"></a>Collection集合遍历</h3><p>iterator：迭代器，集合的专用遍历方式</p><ul><li><p>Iterator<E> iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</p></li><li><p>迭代器是通过iterator()方法得到的，所以我们说它是依赖于集合而存在的</p></li></ul><p>Iterator中的常用方法</p><ul><li><p>E next()：返回迭代中的下一个元素</p></li><li><p>boolean hasNext()：如果还有元素可以遍历，则返回true</p></li></ul><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Iterator&lt;String&gt; it = list.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> it.next();<br>    System.out.println(e);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>List集合概述：</p><ul><li><p>有序集合（也称为序列），用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元素</p></li><li><p>与Set集合不同，列表通常允许重复的元素</p></li></ul><p>List集合特点：</p><ul><li><p>有序：存储和去除的元素顺序一致</p></li><li><p>可重复：存储元素可重复</p></li></ul><h4 id="List集合特有方法"><a href="#List集合特有方法" class="headerlink" title="List集合特有方法"></a>List集合特有方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void $add$(int index, E element)</td><td>在指定处插入指定元素</td></tr><tr><td>E $remove$(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E $set$(int index, E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E $get$(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table><p>注意问题：</p><ul><li><p>使用通过<code>iterator()</code>方法获取的迭代器迭代时，<mark><strong>集合对象</strong></mark>使用add方法会修改集合中元素的个数，会造成地带器获取元素中判断预期修改值和实际修改值不一致而抛出并发修改异常，因此，用迭代器是不要去修改数据</p></li><li><p>但是可以用for循环替代，进行值的修改</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Iterator&lt;String&gt; iterator = list.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> iterator.next();<br>    <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;hello&quot;</span>)) &#123;<br>        list.add(<span class="hljs-string">&quot;wuwuwu&quot;</span>); <span class="hljs-comment">// 报错</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h4><ul><li><p>特点：用于允许程序员沿任意方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代的当前位置</p></li><li><p>获取迭代器：通过List集合的listIterator()方法获取，是List集合特有的迭代器</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>E next()</td><td>返回迭代中的下一个元素</td></tr><tr><td>boolean hasNext()</td><td>如果迭代器具有更多元素，则返回true</td></tr><tr><td>E previous()</td><td>返回列表中的上一个元素</td></tr><tr><td>boolean hasPrevious()</td><td>如果此列表迭代器在反方向上具有更多元素，则返回true</td></tr><tr><td>void <mark>add</mark>(E e)</td><td>将指定的元素插入列表，不会产生并发修改异常</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ListIterator&lt;String&gt; iterator = list.listIterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    System.out.println(iterator.next());<br>&#125;<br>  <br>System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>  <br><span class="hljs-keyword">while</span> (iterator.hasPrevious()) &#123;<br>    System.out.println(iterator.previous());<br>&#125;<br>  <br>System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>  <br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    <span class="hljs-keyword">if</span> (iterator.next().equals(<span class="hljs-string">&quot;hello&quot;</span>)) &#123;<br>        iterator.add(<span class="hljs-string">&quot;hahaha&quot;</span>); <span class="hljs-comment">// 不报错，在hello后面添加元素</span><br>    &#125;<br>&#125;<br>System.out.println(list);<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="增强for循环（foreach"><a href="#增强for循环（foreach" class="headerlink" title="增强for循环（foreach)"></a>增强for循环（foreach)</h4><ul><li><p>作用：简化数组和Collection集合的遍历</p><ul><li><p>实现Iterable接口的类允许其对象称为增强型for语句的目标</p></li><li><p>JDK5之后出现，内部原理是一个Iterator迭代器</p></li></ul></li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (元素数据类型 变量名:数组或者Collection集合) &#123;<br>    <span class="hljs-comment">// 在此处使用变量，该变量就是元素</span><br>&#125;<br><br><span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:arr)&#123;<br>System.out.print(i);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="List的常见实现"><a href="#List的常见实现" class="headerlink" title="List的常见实现"></a>List的常见实现</h4><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li>数组实现，查询快，增删慢。具体见JavaSE基础复习一的集合基础ArrayList</li></ul><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li><p>双链表实现，查询慢，增删快</p></li><li><p>特有方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public E getFirst()</td><td>返回列表的第一个元素</td></tr><tr><td>public E gerLast()</td><td>返回列表的最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table></li></ul><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>不包含重复元素，迭代顺序不作任何保证</p><h4 id="Set集合常用函数"><a href="#Set集合常用函数" class="headerlink" title="Set集合常用函数"></a>Set集合常用函数</h4><ul><li><p>remove()</p></li><li><p>add()</p></li><li><p>size()</p></li><li><p>contains()</p></li><li><p>toArray()</p></li><li><p>copyOf(Collection&lt;? extends E&gt; coll)：静态方法，返回一个带给定元素但不可修改的集合</p></li><li><p>copyOf(Set<E> set)：拷贝某个集合，返回不可修改的新集合</p></li></ul><h4 id="Hash值"><a href="#Hash值" class="headerlink" title="Hash值"></a>Hash值</h4><ul><li><p>JDK根据对象的地址或者字符串或者数字计算出来的int类型的数值</p></li><li><p>Object类中有一个方法可以获取对象的哈希值：HashCode()</p></li><li><p>特点</p><ul><li><p>同一个对象计算对此Hash值，一定是相同的</p></li><li><p>默认情况下，不同对象的哈希值是不同的。而重写hashCode()方法，可以实现通过对象内的数据来计算哈希值，让不同对象的哈希值相同。</p></li></ul></li></ul><h4 id="常用实现类"><a href="#常用实现类" class="headerlink" title="常用实现类"></a>常用实现类</h4><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><ul><li><p>底层数据结构由哈希表实现</p></li><li><p>对集合的迭代顺序不做任何保证，也就是说不保证存储和取出元素的顺序一致</p></li><li><p>没有带索引的访问方法，所以不能使用普通for循环遍历，可以用迭代器和foreach进行遍历</p></li><li><p>不包含重复元素：HashSet的add()方法流程如下，<strong>要保证元素的唯一性，需要重写hashCode()和equals()方法</strong></p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210722151620.png" title="" alt="" width="356"></li></ul><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p>继承自HashSet</p><ul><li>具有可预测的迭代顺序：哈希表和链表实现的Set接口</li><li>元素的存储和取出顺序是一致的：有链表保证元素有序</li><li>元素依然唯一：由哈希表保证元素的唯一性</li></ul><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><ul><li><p>元素有序，不是存入和取出的顺序，而是按照一定规则进行排序，取决于使用什么构造函数</p><ul><li><p>TreeSet()：创建一个空的，根据其元素的自然顺序进行排序的集合</p></li><li><p>TreeSet(Comparator comparator)：创建一个空的，根据指定的比较器进行排序的集合</p><p><strong>注意</strong>：</p></li><li><p>如果集合创建时指定了比较器，则优先使用传入的比较器（无论传入的对象类是否实现Comparator接口）</p></li><li><p>如果没有指定比较器，集合的元素的类需要实现Comparator接口：</p><ul><li><p>重写compareTo(E e)方法</p></li><li><p>**返回负数表示降序排列，返回正数表示升序排列，返回0表示元素相等（是同一个元素），则该元素在加入时会失败 **。</p><p>例如：String类实现了Comparator接口，可以直接作为集合元素加入创建的集合，否则add元素会因为没有实现该接口而报错</p></li></ul></li><li><p>如果对象类有多个数据字段，则<strong>需要考虑所有的字段</strong>，避免其实是不同的对象但却无法加入集合的问题</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 存入的对象类实现Comparator接口，重写compare方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TSTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;TSTest&gt; &#123;<br>    <span class="hljs-keyword">private</span> String data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TSTest</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(TSTest o)</span> &#123;<br>        <span class="hljs-keyword">return</span> data.compareTo(o.getData());<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 创建TreeSet集合，传入实现Comparator的匿名内部类</span><br>TreeSet&lt;TSTest&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;TSTest&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(TSTest o1, TSTest o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>不包含重复元素</p></li><li><p>没有带索引的方法，不能使用普通for进行遍历</p></li></ul><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>Map集合概述</p><ul><li>Interface Map&lt;K, V&gt;，K：键的类型；V：值的类型</li><li>将键映射到值的对象，不能包含重复的键，每个键可以映射到最多一个值，put方法添加元素，key相同，后面的值覆盖前面的值</li><li>由于底层是哈希表实现，要保证Key的唯一性，<strong>传入的Key对象需要重写hashCode()和equals()方法，String，基础类型的包装类本身就实现了</strong></li></ul><h4 id="常用实现类-1"><a href="#常用实现类-1" class="headerlink" title="常用实现类"></a>常用实现类</h4><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">V put(K key, V value)</td><td align="left">添加元素</td></tr><tr><td align="left">V remove(Object Key)</td><td align="left">根据键删除键值对</td></tr><tr><td align="left">void clear()</td><td align="left">移除所有键值对</td></tr><tr><td align="left">boolean containsKey(Object Key)</td><td align="left">判断集合是否包含指定的键</td></tr><tr><td align="left">boolean containsValue(Object Value)</td><td align="left">判断集合是否包含指定的值</td></tr><tr><td align="left">Boolean isEmpty()</td><td align="left">判断集合是否为空</td></tr><tr><td align="left">int size()</td><td align="left">集合的长度（键值对个数）</td></tr><tr><td align="left">V object(Object Key)</td><td align="left">根据键获取值</td></tr><tr><td align="left">Set<K> keySet()</td><td align="left">获取所有键的集合</td></tr><tr><td align="left">Collection<V> vlaues()</td><td align="left">获取所有值的集合</td></tr><tr><td align="left">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td align="left">键值对对象集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>);<br>map.put(<span class="hljs-string">&quot;郭靖&quot;</span>, <span class="hljs-string">&quot;黄蓉&quot;</span>);<br>map.put(<span class="hljs-string">&quot;杨过&quot;</span>, <span class="hljs-string">&quot;小龙女&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;---------&quot;</span>);<br>System.out.println(map);<br>map.remove(<span class="hljs-string">&quot;张无忌&quot;</span>);<br>System.out.println(map);<br>System.out.println(<span class="hljs-string">&quot;---------&quot;</span>);<br>System.out.println(map.containsKey(<span class="hljs-string">&quot;杨过&quot;</span>));<br>System.out.println(map.containsKey(<span class="hljs-string">&quot;啦啦啦&quot;</span>));<br>System.out.println(map.containsValue(<span class="hljs-string">&quot;黄蓉&quot;</span>));<br>System.out.println(map.containsValue(<span class="hljs-string">&quot;啦啦啦&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;---------&quot;</span>);<br>System.out.println(map.isEmpty());<br>map.clear();<br>System.out.println(map);<br>System.out.println(map.isEmpty());<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;赵敏&quot;</span>);<br>map.put(<span class="hljs-string">&quot;郭靖&quot;</span>, <span class="hljs-string">&quot;黄蓉&quot;</span>);<br>map.put(<span class="hljs-string">&quot;杨过&quot;</span>, <span class="hljs-string">&quot;小龙女&quot;</span>);<br>System.out.println(map.get(<span class="hljs-string">&quot;杨过&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br>Set&lt;String&gt; keySet = map.keySet();<br><span class="hljs-keyword">for</span> (String s : keySet) &#123;<br>    System.out.println(s);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br>Collection&lt;String&gt; values = map.values();<br><span class="hljs-keyword">for</span> (String value : values) &#123;<br>    System.out.println(value);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h4><ol><li>通过keySet()方法获取keySet，再通过遍历keySet，通过get(Object Key)方法获得对应的值</li><li>通过entrySet()方法获取键值对的集合entrySet（里面存储的没有个对象都是Map.Entry&lt;K,V&gt;对象），然后遍历entrySet集合，然后每一个对象通过getKey()和getValue()方法获取键和值</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1</span><br>Set&lt;String&gt; keySet = map.keySet();<br><span class="hljs-keyword">for</span> (String s : keySet) &#123;<br>    System.out.println(<span class="hljs-string">&quot;&lt;&quot;</span>+s+<span class="hljs-string">&quot;,&quot;</span>+map.get(s)+<span class="hljs-string">&quot;&gt;&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br><br><span class="hljs-comment">// 2</span><br>Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrySet) &#123;<br>    System.out.println(<span class="hljs-string">&quot;&lt;&quot;</span>+entry.getKey()+<span class="hljs-string">&quot;,&quot;</span>+entry.getValue()+<span class="hljs-string">&quot;&gt;&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>Collections类概述：针对集合操作的工具类</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static &lt;T extends Comparator&lt;? super T&gt;&gt; void sort(List<T> list)</td><td>将指定的列表按升序排列</td></tr><tr><td>public static void reverse(List&lt;?&gt; list)</td><td>反转指定列表中元素的顺序</td></tr><tr><td>public static void shuffle(List&lt;?&gt; list)</td><td>使用默认的随机源随机排列指定的列表</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">3</span>);<br>list.add(<span class="hljs-number">4</span>);<br>System.out.println(list.toString());<br><br>Collections.sort(list);<br>System.out.println(list.toString());<br><br>Collections.shuffle(list);<br>System.out.println(list.toString());<br></code></pre></div></td></tr></table></figure><h4 id="小例子：发牌"><a href="#小例子：发牌" class="headerlink" title="小例子：发牌"></a>小例子：发牌</h4><p>存牌，洗牌，发牌，展示牌组</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaBasis.collectionLearn;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Poker</span> &#123;<br>    <span class="hljs-keyword">private</span> HashMap&lt;Integer,String&gt; cards = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(); <span class="hljs-comment">// 牌，以及对应的序号</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Integer&gt; order = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 当前的牌顺序</span><br><br>    <span class="hljs-keyword">private</span> TreeSet&lt;Integer&gt; first = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(); <span class="hljs-comment">// 第一个人的牌</span><br>    <span class="hljs-keyword">private</span> TreeSet&lt;Integer&gt; second = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(); <span class="hljs-comment">// 第二个人的牌</span><br>    <span class="hljs-keyword">private</span> TreeSet&lt;Integer&gt; third = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(); <span class="hljs-comment">// 第三个人的牌</span><br>    <span class="hljs-keyword">private</span> TreeSet&lt;Integer&gt; dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(); <span class="hljs-comment">// 底牌</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Poker</span>().play();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Poker</span><span class="hljs-params">()</span> &#123;<br>        String[] num = &#123;<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;;<br>        String[] type = &#123;<span class="hljs-string">&quot;♥&quot;</span>, <span class="hljs-string">&quot;♠&quot;</span>, <span class="hljs-string">&quot;♦&quot;</span>, <span class="hljs-string">&quot;♣&quot;</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; type.length; j++) &#123;<br>                cards.put(count, type[j]+num[i]);<br>                order.add(count++);<br>            &#125;<br>        &#125;<br>        cards.put(count, <span class="hljs-string">&quot;小王&quot;</span>);<br>        order.add(count++);<br>        cards.put(count, <span class="hljs-string">&quot;大王&quot;</span>);<br>        order.add(count);<br><br>        System.out.print(<span class="hljs-string">&quot;所有的牌：&quot;</span>);<br>        Set&lt;Integer&gt; keySet = cards.keySet();<br>        <span class="hljs-keyword">for</span> (Integer key : keySet) &#123;<br>            System.out.print(cards.get(key)+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.shuffle();<br>        <span class="hljs-built_in">this</span>.licensing();<br>        <span class="hljs-built_in">this</span>.showCards(<span class="hljs-string">&quot;第一个人&quot;</span>, first);<br>        <span class="hljs-built_in">this</span>.showCards(<span class="hljs-string">&quot;第二个人&quot;</span>, second);<br>        <span class="hljs-built_in">this</span>.showCards(<span class="hljs-string">&quot;第三个人&quot;</span>, third);<br>        <span class="hljs-built_in">this</span>.showCards(<span class="hljs-string">&quot;底牌&quot;</span>, dp);<br>    &#125;<br><br>    <span class="hljs-comment">// 洗牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shuffle</span><span class="hljs-params">()</span> &#123;<br>        Collections.shuffle(order);<br>    &#125;<br><br>    <span class="hljs-comment">// 发牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">licensing</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.first.clear();<br>        <span class="hljs-built_in">this</span>.second.clear();<br>        <span class="hljs-built_in">this</span>.third.clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; order.size(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> order.get(i);<br>            <span class="hljs-keyword">if</span> (i &gt;= order.size() - <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-built_in">this</span>.dp.add(key);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span>==<span class="hljs-number">0</span> ) &#123;<br>                <span class="hljs-built_in">this</span>.first.add(key);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">this</span>.second.add(key);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.third.add(key);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showCards</span><span class="hljs-params">(String name, TreeSet&lt;Integer&gt; ts)</span> &#123;<br>        System.out.print(name+<span class="hljs-string">&quot;的牌是：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Integer key : ts) &#123;<br>            Set&lt;Integer&gt; keySet = cards.keySet();<br>            System.out.print(cards.get(key) + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">所有的牌：♥3 ♠3 ♦3 ♣3 ♥4 ♠4 ♦4 ♣4 ♥5 ♠5 ♦5 ♣5 ♥6 ♠6 ♦6 ♣6 ♥7 ♠7 ♦7 ♣7 ♥8 ♠8 ♦8 ♣8 ♥9 ♠9 ♦9 ♣9 ♥10 ♠10 ♦10 ♣10 ♥J ♠J ♦J ♣J ♥Q ♠Q ♦Q ♣Q ♥K ♠K ♦K ♣K ♥A ♠A ♦A ♣A ♥2 ♠2 ♦2 ♣2 小王 大王 <br>第一个人的牌是：♥3 ♦3 ♣3 ♥4 ♠4 ♣4 ♣5 ♥7 ♥9 ♦9 ♥10 ♣10 ♥J ♥K ♣K ♥A 小王 <br>第二个人的牌是：♦4 ♠5 ♦5 ♠6 ♦6 ♠7 ♠8 ♣8 ♦10 ♠J ♦J ♠Q ♣Q ♠A ♦A ♠2 大王 <br>第三个人的牌是：♥5 ♥6 ♣6 ♦7 ♣7 ♥8 ♦8 ♠9 ♣9 ♠10 ♥Q ♦Q ♠K ♦K ♣A ♥2 ♣2 <br>底牌的牌是：♠3 ♣J ♦2<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE基础复习四：异常处理</title>
    <link href="/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E5%9B%9B%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E5%9B%9B%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="JavaSE基础复习四：异常处理"><a href="#JavaSE基础复习四：异常处理" class="headerlink" title="JavaSE基础复习四：异常处理"></a>JavaSE基础复习四：异常处理</h1><p>异常：程序出现了不正常的情况</p><h2 id="异常类的层级关系"><a href="#异常类的层级关系" class="headerlink" title="异常类的层级关系"></a>异常类的层级关系</h2><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210721210752.png"></p><ul><li><p>Error：严重错误，不需要处理</p></li><li><p>Exception：称为异常类，他表示程序本身可以处理的问题</p><ul><li><p>RuntimeException（运行时异常）：在编译器不检查，在运行时才会出现，可以不显式处理，也可以和编译时异常一样处理</p></li><li><p>非RuntimeException（编译时异常）：编译器就可以发现并处理，不处理程序不能通过编译，因此必须处理</p></li></ul></li><li><p>JVM的默认处理方案：</p><ul><li><p>先把异常的名称，异常的原因及异常出现的位置等信息输出在了控制台（e.printStackTrace())</p></li><li><p>程序停止执行</p></li></ul></li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li><p>try…catch…处理</p><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    可能出现的异常代码<br>&#125;<br><span class="hljs-keyword">catch</span>(异常类名 变量名) &#123;<br>    异常处理代码<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>执行流程：程序从try里面的代码开始执行，出现异常，会自动生成一个异常类对象，该异常对象将被提交给Java运行时系统。当Java运行时系统接收到异常对象时，会到catch中去找匹配的异常类，找到后进行异常的处理，执行完毕后，程序还可以继续运行</p></li><li><p>异常类的常用方法：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>异常的原因</td></tr><tr><td>public String toString()</td><td>异常的内容</td></tr><tr><td>public String getStackTrace()</td><td>异常的所有信息</td></tr></tbody></table><ul><li><p>throw处理</p><ul><li><p>当前无法处理异常是，可以将异常抛出去</p></li><li><p>用法：在方法后<code>fuction throws 异常名</code></p></li><li><p>在调用出，依然需要用try…catch…进行处理</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">funtion</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        function();<br>    &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li><p>很多异常我们需要，但API并不提供，我们可以继承Exception类或者RuntimeException，实现自定义异常。你问为什么不继承其它的非RuntiomeException，因为编译时就必须要处理，继承了没有意义</p></li><li><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 异常类名 <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    无参构造()<br>    有参构造(String message)&#123;<br>        <span class="hljs-built_in">super</span>(message); <span class="hljs-comment">// 这个message就是输出的错误信息，Trowable带参构造需要传入</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>使用方法：在方法中，某个条件下<code>thorw new 异常类名(message)</code></p></li></ul><h2 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h2><table><thead><tr><th>throw</th><th>throws</th></tr></thead><tbody><tr><td>用于方法体内，跟的是异常对象</td><td>用于方法声明后，跟的是异常类名</td></tr><tr><td>表示抛出异常，由方法体内catch内的语句处理</td><td>表示抛出异常，由方法调用者处理</td></tr><tr><td>执行throw一定抛出了某种异常</td><td>表示可能出现某种异常，如果出现就抛出，没有就不管</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE基础复习三：常用工具类</title>
    <link href="/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B8%89%EF%BC%9A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B8%89%EF%BC%9A%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="JavaSE基础复习三：常用工具类"><a href="#JavaSE基础复习三：常用工具类" class="headerlink" title="JavaSE基础复习三：常用工具类"></a>JavaSE基础复习三：常用工具类</h1><p><strong>常用工具类设计思想</strong>：</p><ul><li><p>构造方法用private修饰，防止创建对象</p></li><li><p>方法用<code>public static</code>修饰，以供直接访问</p></li></ul><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><ul><li><p>方法都是静态，可以直接调用</p></li><li><p>常用方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static void abs(int a)</td><td>绝对值</td></tr><tr><td>public static double ceil(double a)</td><td>返回大于或等于参数的最小double，等于一个正是</td></tr><tr><td>public static double floor(double a)</td><td>返回小于或等于参数的最大double值，等于一个整数</td></tr><tr><td>public static int round(float a)</td><td>按照四舍五入返回最接近的int值</td></tr><tr><td>public static int max(int a, int b)</td><td>返回两个int值中的较大值</td></tr><tr><td>public static int min(int a, int b)</td><td>返回两个int值中的较小值</td></tr><tr><td>public static double pow(double a, double b)</td><td>返回a的b次幂</td></tr><tr><td>public static double random()</td><td>返回为随机的double的正值[0.0, 1.0)</td></tr></tbody></table></li></ul><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><ul><li><p>在java.lang中，不用导包</p></li><li><p>常用方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>exit(int status)</td><td>退出，输入退出的状态码，非零表示异常</td></tr><tr><td>static Map&lt;String,​String&gt; getenv(String name)</td><td>获取系统环境变量</td></tr><tr><td>static String getenv​(String name)</td><td>获取确切的某个环境变量值</td></tr><tr><td>static String currentTimeMillis()</td><td>获取时间（从1970到现在的毫秒）</td></tr></tbody></table></li><li><p>currentTimeMills()可用来计时</p></li></ul><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><ul><li><p>Object类是所有类的超类</p></li><li><p>常用方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean equals()</td><td>判断对象是否相等，默认比较地址。建议所有子类重写此方法</td></tr><tr><td>String toString()</td><td>返回对象的字符串表示形式。默认返回<code>包名类名@地址</code>的字符串。建议所有子类重写此方法</td></tr></tbody></table></li></ul><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul><li><p>包含操作数组的各种方法</p></li><li><p>常用方法：toString()，sort()</p></li><li><p>冒泡排序：</p><ul><li><p>n个元素进行排列，总共需要比较n-1次</p></li><li><p>每一次比较完毕，下一次的比较就会少一个数据参与运算</p></li></ul></li></ul><h2 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h2><ul><li><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p></li><li><p>常用的操作：基本数据类型和字符串之间的转换</p></li><li><p>对应关系：</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table></li><li><p>Integer类（其它的包装类类似）：</p><ul><li><p>包含的有用字段：MAX_VALUE、MIN_VALUE，分别表示能表示的最大int值和最小int值</p></li><li><p>常用的方法：</p><ul><li><p>public static Integer valueOf(int i)，返回表示指定的int值的Integer实例</p></li><li><p>public static Integer valueOf(String s)，返回一个保存指定值的Integer对象String</p></li><li><p>用构造方法创建对象的方法过时了，不建议使用</p></li></ul></li></ul></li><li><p>int和String相互转换</p><ul><li><p>int -&gt; String：<code>String str = String.valueOf(int a);</code></p></li><li><p>String -&gt; int：<code>Integer i = Integer.valueOf(String str);</code> 获取int值, <code>i.intValue();</code> 因为可以自动拆装箱，直接使用Integer对象就可以了</p></li></ul></li><li><p>自动拆装箱</p><ul><li><p>装箱：把基本类型换成对应的成包装类类型</p></li><li><p>拆箱：把包装类类型装换为对应的基本类型</p></li><li><p>自动装箱：基本类型赋值给包装类型引用，例如：<code>Integer i = 100;</code></p></li><li><p>自动拆箱：<code>i + 200;</code></p></li></ul></li><li><p><strong>用包装类使用前最好判断是否为null</strong>，推荐只要是对象，使用前都要判断是否为null</p></li></ul><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><ul><li><p>构造函数：</p><ul><li><p>Date()，无参构造，初始化以最接近的毫秒为单位</p></li><li><p>Date(long date)，传入毫秒，初始化为从1700年1月1日加上传入的毫秒数的日期</p></li></ul></li><li><p>常用方法：</p><ul><li><p><code>public long getTime()</code>：获取的是日期对象从1970年1月1日00:00:00到现在的毫秒值，和<code>System.currentTimeMills()</code>类似</p></li><li><p><code>public void setTime(long time)</code>：设置时间，给的是毫秒值</p></li></ul></li><li><p>SimpleDateFormat类</p><ul><li><p>该类是一个具体类，用于格式化和解析日期，Date类的日期输出并不直观，SimpleDateFormat类可以方便输出我们便于查看的日期格式</p></li><li><p>该类的作用：Date -&gt; String（格式化），String -&gt; Date（解析）</p></li><li><p>日期和日期格式由字符串模式指定，在日期和时间模式字符串中，从’A’到’Z’以及’a’到’z’，单引号内容被直接复制过去，不会被解释为模式字符</p></li><li><p>常用的模式字母及对应关系如下：</p><table><thead><tr><th>字母</th><th>对应日期</th></tr></thead><tbody><tr><td>y</td><td>年</td></tr><tr><td>M</td><td>月</td></tr><tr><td>d</td><td>日</td></tr><tr><td>H</td><td>时</td></tr><tr><td>m</td><td>分</td></tr><tr><td>s</td><td>秒</td></tr></tbody></table></li><li><p>构造方法：</p><ul><li><p>无参构造，构造一个SimpleDateFormat，使用默认模式和日期格式</p></li><li><p>输入模式串的构造，根据所给模式构造和默认的日期格式构造</p></li></ul></li><li><p>格式化和解析方法：</p><ul><li><p>格式化（Date -&gt; String）：<code>public final String format(Date date)</code></p></li><li><p>解析（String -&gt; Date） ：<code>public Date parse(String source)</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 格式化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>().format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(s);<br><br>        s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;y年M月d日 &#x27;At&#x27; H:m:s&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(s);<br><br>        <span class="hljs-comment">// 解析</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;2021-1-1 18:22:31&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;y-M-d h:m:s&quot;</span>).parse(s1);<br>        System.out.println(date);<br></code></pre></div></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><ul><li><p>为某一时刻和一组日历字段之间的转换提供一些方法，并为操作日历字段提供了一些方法</p></li><li><p>抽象类，可以通过getInstance()方法获取其子类实例</p></li><li><p>包含很多静态方法</p></li><li><p>常用方法：</p><ul><li><p><code>public int get (int field)</code></p><p>常用字段：</p><ul><li><p>Calendar.YEAR</p></li><li><p>Calendar.MONTH：月从0开始算</p></li><li><p>Calendar.DATE</p></li></ul></li></ul></li></ul><p>常用的字段组合：</p><ul><li><p>For the date fields:</p><blockquote><p>YEAR + MONTH + DAY_OF_MONTH<br>YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK<br>YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK<br>YEAR + DAY_OF_YEAR<br>YEAR + DAY_OF_WEEK + WEEK_OF_YEAR</p></blockquote><p>For the time of day fields:</p><blockquote><p>HOUR_OF_DAY<br>AM_PM + HOUR</p></blockquote></li><li><p><code>add(int Field, int amount)</code>：对任意字段进行加减</p></li><li><p><code>set(int Field, int amount)</code>：直接设置某个字段的值</p><p><code>set(int year, int month, int day)</code>：设置年月日</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>c.add(Calendar.YEAR, -<span class="hljs-number">3</span>); <span class="hljs-comment">// 三年前的今天</span><br>c.set(Calendar.MONTH, <span class="hljs-number">1</span>); <span class="hljs-comment">// 二月份，从0算起</span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> c.get(Calendar.YEAR);<br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> c.get(Calendar.MONTH)+<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> c.get(Calendar.DATE);<br>System.out.println(year+<span class="hljs-string">&quot;年&quot;</span>+month+<span class="hljs-string">&quot;月&quot;</span>+date+<span class="hljs-string">&quot;日&quot;</span>);<br>c.set(<span class="hljs-number">2021</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 2021年3月1日</span><br>c.add(Calendar.DATE, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 二月最后一天</span><br>System.out.println(c.get(Calendar.YEAR)+<span class="hljs-string">&quot;年二月份有&quot;</span>+c.get(Calendar.DATE)+<span class="hljs-string">&quot;天&quot;</span>);<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE基础复习二：面向对象</title>
    <link href="/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%BA%8C%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%BA%8C%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="JavaSE基础复习二：面向对象"><a href="#JavaSE基础复习二：面向对象" class="headerlink" title="JavaSE基础复习二：面向对象"></a>JavaSE基础复习二：面向对象</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ul><li><p>类是Java程序的基本组成单位</p></li><li><p>类是对现实生活中异类具有共同属性和行为的事物的抽象，确定对象将会拥有的属性和行为</p></li><li><p>类的组成：属性和行为</p><ul><li><p>属性：成员变量（实例）</p></li><li><p>行为：成员方法（实例）类方法可以共用</p></li></ul></li><li><p>变量的类型：</p><ul><li><p>类变量（静态变量：static）</p></li><li><p>成员变量（实例变量）：堆中，随对象存在，有初始值</p></li><li><p>局部变量（本地变量）：栈，方法调用结束消失，没有初始值</p></li></ul></li><li><p>this关键字：指向调用的对象</p></li><li><p>封装</p><ul><li><p>原则：隐藏某些信息在类内部，不允许外部程序直接访问，对外提供Setter和Getter方法。</p></li><li><p>优点：提高代码安全性，提高代码复用性</p></li></ul></li><li><p>构造方法：</p><ul><li><p>无参构造：如果没有写构造方法，系统默认提供一个无参构造方法</p></li><li><p>有参构造方法：当存在有参构造，系统不再提供无参构造方法，当需要使用无参构造时，需要自己写一个无参构造方法，因此推荐都手动写一个无参构造方法。</p></li></ul></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><p>IDEA：Ctrl+Alt+v，补全返回值声明。例如：<code>nextLine();</code>按快捷键，自动补全为<code>String line = nextLine();</code></p></li><li><p>Java官方提供的API文档：<a href="https://docs.oracle.com/en/java/javase/11/docs/api/index.html">https://docs.oracle.com/en/java/javase/11/docs/api/index.html</a></p></li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li><p>内容不可变，加操作会用StringBuilder操作</p></li><li><p>在<code>java.lang</code>包下，不需要导入</p></li><li><p>所有”被引起来的字符串”最终都被实现为此类的实例</p></li><li><p>创建后值不能被更改，但是可以被共享</p></li><li><p>底层原理是字节数组（byte[]）</p></li><li><p>常见构造方法：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>public String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public String(char[] args)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public String(byte[] bys)</td><td>根据自己数组的内容，来创建字符串对象</td></tr><tr><td>String str &#x3D; “abc”</td><td>直接赋值**（推荐）**</td></tr></tbody></table></li><li><p>特点：</p><ul><li><p>每次new申请一个新空间，地址值不同</p></li><li><p>直接赋值的方式给出的字符串，只要字符序列相同，无论在程序中出现几次，JVM都只会建立一个String对象，并在字符串池中维护，是同一个对象。</p></li></ul></li><li><p>字符串比较</p><ul><li><p>用<code>==</code>进行比较：</p><ul><li><p>基本类型：比较数据值是否相同</p></li><li><p>引用类型：比较地址值是否相同</p></li></ul></li><li><p>字符串是对象，它比较内容是否相同，是通过一个方法来实现：<code>equals()</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>常用方法：</p><ul><li><p>charAt()</p></li><li><p>length()</p></li><li><p>toChartArray()</p></li><li><p>endsWith()</p></li><li><p>split()</p></li></ul></li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ul><li><p>构造方法：无参、传入String</p></li><li><p>方法：</p><ul><li><p>append(元素)，返回对象本身</p></li><li><p>reverse()，返回相反的字符序列</p></li><li><p>toString()</p></li></ul></li></ul><h2 id="集合基础：ArrayList"><a href="#集合基础：ArrayList" class="headerlink" title="集合基础：ArrayList"></a>集合基础：ArrayList</h2><ul><li><p>常见使用方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建空集合</td></tr><tr><td>public boolean add(E e)</td><td>在末尾添加元素，返回添加是否成功</td></tr><tr><td>public void add(int index, E e)</td><td>在索引index处添加元素</td></tr><tr><td>public boolean remove(Object o)</td><td>删除指定的元素，返回删除是否成功</td></tr><tr><td>public E remove(int index)</td><td>删除指定处的元素，返回被修改的元素</td></tr><tr><td>public E get(int index)</td><td>返回指定索引处的元素</td></tr><tr><td>public int size()</td><td>返回集合中的元素个数</td></tr></tbody></table></li><li><p>如果<code>List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;</code>，要用remove方法删除元素1，那么：<code>list.remove((Object)1)</code></p></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>面向对象三大特征：封装、继承、多态</p></li><li><p>子类继承父类属性和方法，再进行属性和方法的扩充</p></li><li><p><code>public class 子类 extends 父类&#123;&#125;</code></p></li><li><p>Java只有单继承<code>extends</code>，接口可以多继承<code>implements</code></p></li><li><p>优缺点</p><ul><li><p>好处：</p><ul><li><p>提高复用性</p></li><li><p>提高维护性</p></li></ul></li><li><p>坏处：</p><ul><li>类之间产生关系，耦合性增强</li></ul></li></ul></li><li><p>变量使用：优先使用局部变量，如果没有去子类中找，没有去父类找，父类中也没有则报错</p></li><li><p>suger关键字：代表父类存储空间的表示（可以理解为父类对象的引用），用于访问父类的属性或方法。调用构造方法<code>super()</code>，子类自己可以用<code>this()</code></p></li><li><p>子类初始化一定先初始化父类（子类可能会使用父类的属性和方法），子类构造函数第一句话一定是：<code>super()</code>，没写编译器自动添加，如果手动调用super的有参构造，则不会自动添加无参构造。</p></li><li><p>方法重写：</p><ul><li><p>子类中出现了和父类一样的方法声明</p></li><li><p>当子类需要父类的功能，但功能主题子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父亲的功能，又定义了子类特有的内容注解</p></li><li><p>@Override，用来表示重写了父类方法</p></li><li><p>重写了，默认访问子类方法，若没有重写，默认调用父类的方法</p></li><li><p>重写时，方法的访问权限不能更低，但可以更高，私有不可重写</p></li></ul></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul><li><p>package：包就是文件夹，用于对类进行分类管理</p><ul><li>手动建包，自己手动建立几个文件夹，将java文件编译后的class文件放入建立的包路径下，然后运行时候，在包外，命令行带包运行，例如：<code>java com.quosimodo.HelloWorld</code>即可。可以用<code>javac -d HelloWorld.java</code>，它会自动把class文件放进包里，然后直接运行即可。</li></ul></li><li><p>权限修饰符：</p><ul><li><p><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p></li><li><p><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p></li><li><p><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</p></li><li><p><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。说明：</p><ul><li><p><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</p></li><li><p><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法（多态，super等访问）。</p></li></ul></li><li><p>我们可以通过以下表来说明访问权限：</p><table><thead><tr><th>修饰符</th><th>当前类</th><th>同一包内</th><th>子孙类(同一包)</th><th>子孙类(不同包)</th><th>其他包</th></tr></thead><tbody><tr><td><code>public</code></td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td><code>protected</code></td><td>Y</td><td>Y</td><td>Y</td><td>见上说明</td><td>N</td></tr><tr><td><code>default</code></td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td><code>private</code></td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td></tr></tbody></table></li><li><p>访问控制和继承</p><p>请注意以下方法继承的规则：</p><ul><li><p>父类中声明为 public 的方法在子类中也必须为 public。</p></li><li><p>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</p></li><li><p>父类中声明为 private 的方法，不能够被继承。</p></li></ul></li></ul></li><li><p>final：可以修饰类和方法和变量</p><ul><li><p>final修饰的类不可被继承</p></li><li><p>final修饰的方法不可被重写</p></li><li><p>final修饰的变量：</p><ul><li><p>修饰基本类型，表示常量，不可改变</p></li><li><p>修饰引用类型，地址不能变，但指向的内存里的值可变（即当调用内部的方法是，内部的值是可以改变的）</p></li></ul></li></ul></li><li><p>static：说明是静态的，可以修饰成员方法、成员变量</p><ul><li><p>修饰变量：表示类变量，被所有对象共享，可以直接调用（如果权限允许)</p></li><li><p>修饰成员方法：表示类方法，被所有对象共享，可以直接调用</p></li><li><p>JVM加载类时，静态的变量方法会被自动分配空间，不需要new对象就能使用</p></li><li><p>静态方法只能访问静态成员和静态方法，普通方法都静态和普通方法都能访问</p></li></ul></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><p>前提：</p><ul><li><p>有继承&#x2F;实现关系</p></li><li><p>有方法重写</p></li><li><p>有父类引用指向子类对象</p></li></ul></li><li><p>访问特点：</p><ul><li><p>成员变量：编译看左边，执行看左边</p><p>成员方法：编译看左边，执行看右边（因为方法可以重写，而变量不能）</p><p>父类引用指向子类实例：</p><ul><li><p>无法访问父类没有的变量和方法。</p></li><li><p>方法被重写了则调用子类的方法，否则调用父类的方法。</p></li><li><p>变量无论子类是否定义了父类相同的，只要是父类引用调用，一定是父类的，没有则报错。</p></li></ul></li></ul></li><li><p>向上转型直接赋值，向下转型，强制类型转换</p></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li><p>用<code>abstract</code>修饰的类称为抽象类，修饰方法则该方法为抽象方法</p></li><li><p>一个没有方法体，只有声明的方法应该定义为抽象方法</p></li><li><p>抽象类不能用<code>protected</code>或<code>private</code>或<code>final</code>修饰</p></li><li><p>抽象方法不能被<code>final</code>修饰</p></li><li><p>抽象类中可以没有抽象方法</p></li><li><p>类中有抽象方法，那么该类一定是抽象类</p></li><li><p>抽象类不能创建实例，但可以建立引用（<strong>抽象类多态</strong>，实例化子类）</p></li><li><p>抽象类用于让子类继承，子类必须重写所有抽象方法，不然该类依然是抽象类</p></li><li><p>抽象类的成员特点：</p><ul><li><p>抽象类中可以有变量和常量，静态的常量也可以</p></li><li><p>可以有构造方法，但是不能实例化，用于实例化子类</p></li><li><p>可以有抽象方法和非抽象方法</p></li></ul></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li><p>interface修饰的类，不能实例化，必须被继承（接口多态）</p></li><li><p>所有方法都必须重写</p></li><li><p>用implements继承，类和接口都可以多继承接口，类可以同时继承一个类和多个接口</p></li><li><p>接口的成员特点：</p><ul><li><p>变量默认被<code>static final</code>修饰，所以<strong>只有静态常量</strong></p></li><li><p>方法默认被<code>public abstract</code>修饰，所以<strong>只有抽象方法</strong></p></li><li><p>没有构造方法</p></li></ul></li></ul><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><table><thead><tr><th></th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>成员</td><td>常量、变量、构造方法、普通方法、抽象方法</td><td>常量、抽象方法</td></tr><tr><td>关系</td><td>单继承</td><td>单继承、多继承</td></tr><tr><td><strong>设计概念</strong></td><td><strong>对类抽象，包括行为和属性</strong></td><td><strong>对行为抽象</strong></td></tr></tbody></table><p><strong>一般共有的的属性和方法用抽象类表示，而有些有，有些没有的行为则用接口实现，可以实现灵活的扩充。</strong></p><h2 id="形参和返回值"><a href="#形参和返回值" class="headerlink" title="形参和返回值"></a>形参和返回值</h2><ul><li><p>基本类型做形参和返回值：略</p></li><li><p>引用类型做形参和返回值</p><ul><li><p>类作为形参：传入该类（或子类）对象</p></li><li><p>类做返回值：返回该类（或子类）对象</p></li></ul></li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li><p>在类的内部在定义类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExternalClass</span> &#123;<br><span class="hljs-comment">// 外部类</span><br>    修饰符 <span class="hljs-keyword">class</span> <span class="hljs-title class_">InternalClass</span> &#123;<br>        <span class="hljs-comment">// 内部类</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>访问特点</p><ul><li><p>内部类可以访问外部类的所有成员，包括私有</p></li><li><p>外部类要访问内部类的成员，必须创建内部类对象</p></li></ul></li><li><p>分为：</p><ul><li><p>成员内部类：在类的成员位置</p><ul><li><p>在类的成员位置定义</p></li><li><p>使用格式：外部类名.内部类名 对象名 &#x3D; 外部类对象.内部类对象</p></li><li><p>规范：Outer.Inner oi &#x3D; new Outer().new Inner();</p></li><li><p>使用一般定义为private，然后在外部类定义函数对内部类新建对象进行访问</p></li></ul></li><li><p>局部内部类：在方法里定义的类</p><ul><li><p>可以使用局部定义的变量或常量和外部类的成员。</p></li><li><p>匿名内部类：<strong>本质是一个对象</strong></p><ul><li><p>前提：存在一个雷或者接口，这里的类可以是具体类也可以是抽象类</p></li><li><p>本质：一个继承了类或实现了接口的匿名对象</p></li><li><p>目的：省略定义一个类的定义过程，直接重写方法生成该类对象，适合于一次性使用的类</p></li><li><p>使用格式</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类名或接口名() &#123;<br>    重写方法;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>&#x2F;&#x2F; 示例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>() &#123;<br>    <span class="hljs-keyword">public</span> viod <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>使用方法</strong>：</p><p>在使用一个方法时：</p><ul><li><p>需要传入一个继承了某个类并重写某个方法的类的对象</p></li><li><p>或者需要传入一个实现了某个接口实现了某个方法的对象，这时不需要去创建一个类，再创建一个实例，直接用匿名内部类就可以简写。</p></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE基础复习一：数据类型、运算符、数组、方法</title>
    <link href="/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B8%80%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E6%96%B9%E6%B3%95/"/>
    <url>/Program/Java/javase%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E4%B8%80%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="JavaSE基础复习一：数据类型、运算符、数组、方法"><a href="#JavaSE基础复习一：数据类型、运算符、数组、方法" class="headerlink" title="JavaSE基础复习一：数据类型、运算符、数组、方法"></a>JavaSE基础复习一：数据类型、运算符、数组、方法</h1><ul><li>Java版本：1.0-&gt;1.1-&gt;1.2-&gt;1.3-&gt;1.4-&gt;<strong>5.0（变化很大）</strong>-&gt;6.0-&gt;7.0-&gt;<strong>8.0（公司引用最多）</strong>-&gt;9.0-&gt;10.0-&gt;<strong>11.0（学习这个）</strong></li></ul><ul><li><p>Java跨平台原理：JVM</p></li><li><p>JRE(Java Runtime Environment)用于让机器运行java：包含JVM和核心类库，JDK（Java Development Kit）用于开发，包含JRE和开发工具。</p></li></ul><h2 id="DOS常用命令"><a href="#DOS常用命令" class="headerlink" title="DOS常用命令"></a>DOS常用命令</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符:</td><td>切换到某个盘</td></tr><tr><td>cd 文件夹</td><td>进入文件夹</td></tr><tr><td>cd ..</td><td>上级目录</td></tr><tr><td>cd \</td><td>退回盘符目录</td></tr><tr><td>cls</td><td>清屏</td></tr></tbody></table><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>&#x2F;&#x2F;单行注释</p></li><li><p>&#x2F;* *&#x2F;多行注释</p></li><li><p>&#x2F;** *&#x2F;文档注释</p></li></ul><h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><p>分基本类型和引用类型</p><ul><li><p>数据类型：</p><ul><li><p>基本类型：</p><ul><li><p>数值型：</p><ul><li><p>整型(byte：1byte、short：2、int：4、long：8)</p></li><li><p>浮点（float：4、double：8）</p></li><li><p>字符（char：2）</p></li></ul></li><li><p>非数值型：布尔类型（boolean：1）</p></li></ul></li><li><p>引用类型：类、接口、数组</p></li></ul></li><li><p>Java写一个整数默认int类型，写一个小数默认double类型（需要防止写的过长造成溢出）</p></li><li><p>Java处理基本类型都是当做int进行操作</p></li></ul><h2 id="变量使用"><a href="#变量使用" class="headerlink" title="变量使用"></a>变量使用</h2><ul><li><p>变量名同一作用于不能重复声明</p></li><li><p>变量未赋值不能使用</p></li><li><p>long类型赋值给数字加上L声明是long类型</p></li><li><p>float赋值时数值加上F声明为float类型，防止类型不兼容，造成数据溢出</p></li></ul><h2 id="标识符命名规定"><a href="#标识符命名规定" class="headerlink" title="标识符命名规定"></a>标识符命名规定</h2><ul><li><p>由数字、字母、下划线_以及$组成</p></li><li><p>不能以数字开始</p></li><li><p>不能是关键字</p></li><li><p>区分大小写</p></li></ul><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li><p>标识符（方法和变量）：小驼峰法(name，fileName)</p></li><li><p>类：大驼峰法（Student，GoodStudent）</p></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>自动类型转换：数据范围赋值给数据范围大的（byte -&gt; short (char)-&gt; int -&gt; long -&gt; float -&gt; double），<strong>short和char不能相互转换</strong></p></li><li><p>强制类型转换：强制数据范围大的赋值给数据范围小的（<strong>可能造成数据丢失</strong>）例如：byte b &#x3D; int(111111)</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>算数运算符：+、-、*、&#x2F;、%</p><ul><li>整数相除是整数，不会是小数</li></ul></li><li><p>字符数值型相加减：’A’-&gt;65、’a’-&gt;97、’0’-&gt;48</p></li><li><p>算数表达式中包含多个基本数据类型时，整个算数表达式类型自动提升，提升规则：</p><ul><li>byte、short和char自动提升到int类型</li><li>表达式的类型自动提升到表达式中最高等级的操作数类型，顺序：byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double</li></ul></li><li><p>字符串和整型（或者字符串）加：</p><ul><li>当加操作出现在两个字符串之间，这个+是字符串连接符，不是算数运算符</li><li>当+操作中出现字符串，就是连接运算符，否则就是算数运算符。当连续进行”+”操作是，从左到右依次执行：如先1+99+”lalala”，那么先计算1+99&#x3D;100，在和”lalala”进行拼接，输出”100lalala”。如果是”lalala”+1+99那么就是”lalala”和1拼接，再和99拼接，输出”lalala199”</li></ul></li><li><p>赋值操作符号：</p><p>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;：扩展的赋值运算符隐含强制类型转换，如：short a &#x3D; 1; a +&#x3D; 20; 20是int类型，但不会报错，隐含强制类型转换</p></li><li><p>自增自减运算符：++，–</p><ul><li><p>++i，i++，–i，i–</p><ul><li><p>单独使用没有区别</p></li><li><p>在表达式中：++i和–i，先让i加减在将值带入计算</p></li><li><p>在表达式中：i++和i–，先让i计算，再对i进行计算</p></li></ul></li></ul></li><li><p>关系运算符：</p><ul><li><p>&#x3D;&#x3D;、!&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;：返回boolean类型</p></li><li><p>如果不小心把&#x3D;&#x3D;写成&#x3D;，就是赋值运算，返回的值就是被赋值的那个变量</p></li></ul></li><li><p>位运算符：</p><ul><li><p>&amp;、|、^、!：逻辑的与、或、异或、非</p></li><li><p>可以用于判断，boolean底层是存储0，1，如下：</p><ul><li><p>&amp;：有false则是false，如：false &amp; false、false &amp; true</p></li><li><p>|：有true 则是true</p></li><li><p>^：相同为false，不同为true</p></li><li><p>!：true为false，false为true</p></li></ul></li></ul></li><li><p>短路逻辑运算符：</p><ul><li><p>短路与：&amp;&amp;</p><ul><li>使用结果和&amp;一致，但只要可以判断这个表达式的真假值，后面的判断就不会再进行了，因此称为短路：即左边为true还要接着判断后面是否有false，所以继续执行，一旦出现一个false，那么真个语句一定是false，那么后面的判断不会再执行</li></ul></li><li><p>短路或：||</p><ul><li>使用结果和|一致，但只要可以判断这个表达式的真假值，后面的判断就不会再进行了，因此称为短路：即左边为false还要接着判断后面是否有true，所以继续执行，一旦出现一个true，那么真个语句一定是true，那么后面的判断不会再执行</li></ul></li></ul></li><li><p>三目运算符：</p><ul><li><p>格式：关系表达式?表达式1:表达式2</p></li><li><p>如果关系表达式为true，则返回表达式1，否则返回表达式2</p></li></ul></li></ul><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><p>使用java.util.Scanner</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span>  <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><ul><li><p>顺序结构（依次执行，一般代码就是这个流程）</p></li><li><p>分支结构（if、switch)</p><ul><li>switch的可取值：byte、short、int、char，JDK5之后可以是枚举，JDK7以后可以是String</li></ul></li><li><p>循环结构（for、while）</p></li><li><p>跳转控制语句：break，continue</p></li></ul><h2 id="随机数：Random"><a href="#随机数：Random" class="headerlink" title="随机数：Random"></a>随机数：Random</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">10</span>); <span class="hljs-comment">// 10是数据范围(0,10]之间</span><br></code></pre></div></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">```java<br><span class="hljs-comment">// 数据类型[] 变量名</span><br><span class="hljs-type">int</span>[] arr;<br></code></pre></div></td></tr></table></figure><p>&#x2F;&#x2F; 数据类型 变量名[]</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">int arr[]<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure></li><li><p>动态初始化：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 数据类型[] 变量名 = new 数据类型[数组长度];</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br></code></pre></div></td></tr></table></figure></li><li><p>静态初始化：指定数组元素的初始值，由系统决定数组长度</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 数据类型[] 变量名 = new 数据类型[ ]&#123;元素1，元素2，元素3…&#125;</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><br><span class="hljs-comment">// 数据类型[] 变量名 = &#123;1, 2, 3, 4&#125;;</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>数组元素访问：索引</p></li><li><p>内存分配：</p><ul><li><p>栈内存：存储局部变量，使用完毕立即消失</p></li><li><p>堆内存：存储new出来的内容（实体，对象），数组在初始化时，会为存储空间添加默认值，基本类型初值是其对应的零值。引用类型对应null：</p><ul><li><p>整数0</p></li><li><p>浮点数：0.0</p></li><li><p>布尔：false</p></li><li><p>字符：空字符</p></li><li><p>引用数据类型：null，表示一个不确定的对象，不能赋值给基本类型（null本身并不是对象类型，也不是实例，未知）</p></li></ul></li><li><p>Java的引用类型赋值时，都是指向同一块存储空间，一旦某个对象没有引用（<strong>指向null，这也是一种垃圾回收的方式</strong>），就可能被GC（垃圾回收）。</p></li></ul></li><li><p>常见错误：访问越界、空指针异常</p></li><li><p>数组常见操作：</p><ul><li><p>遍历：for循环</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>    System.out.println(arr[i]);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a : arr) &#123;<br>    System.out.println(a);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>具有独立功能的代码块组织成一个整体，具有特殊功能的代码集</p></li><li><p>注意事项</p><ul><li><p>方法不能嵌套定义</p></li><li><p>void可以忽略返回值，也可以只写一个return不带值</p></li></ul></li><li><p>方法重载</p><ul><li><p>多个方法在同一个类中</p></li><li><p>多个方法具有相同的方法名</p></li><li><p>多个方法的参数不同，类型不同或者数量不同</p></li><li><p>特点</p><ul><li><p>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</p></li><li><p>重载仅针对<strong>同一个类中方法的名称与参数进行识别</strong>，<strong>与返回值无关</strong>，即不能通过返回值类型来判定两个方法是否构成重载</p></li></ul></li></ul></li><li><p>方法的参数传递</p><ul><li><p>基本类型传递：方法对参数的修改不影响实参的值</p></li><li><p>引用类型传递：因为指向同一个地址空间，因此会影响实参的值</p></li><li><p>Java的传值方式只有一种：传值（传值和传引用，传引用传递的参数是对象的引用，实际上也是一种传值）</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中间人攻击以及防范原理：加密、签名和签证</title>
    <link href="/%E6%9D%82%E9%A1%B9/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%BB%A5%E5%8F%8A%E9%98%B2%E8%8C%83%E5%8E%9F%E7%90%86%EF%BC%9A%E5%8A%A0%E5%AF%86%E3%80%81%E7%AD%BE%E5%90%8D%E5%92%8C%E7%AD%BE%E8%AF%81/"/>
    <url>/%E6%9D%82%E9%A1%B9/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E4%BB%A5%E5%8F%8A%E9%98%B2%E8%8C%83%E5%8E%9F%E7%90%86%EF%BC%9A%E5%8A%A0%E5%AF%86%E3%80%81%E7%AD%BE%E5%90%8D%E5%92%8C%E7%AD%BE%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><h3 id="转载自编程指北"><a href="#转载自编程指北" class="headerlink" title="转载自编程指北"></a>转载自<a href="https://mp.weixin.qq.com/s?__biz=Mzg4NjUxMzg5MA==&mid=2247493978&idx=1&sn=885e57fad88b763535ae29bd422e5c95&chksm=cf9a20d7f8eda9c1e5fe7fd4d96d0c56d1455c6145c624a0f226075da001b4a7e257a7772b9d&mpshare=1&scene=23&srcid=0724YPnajCyovORYzW1aLTQK&sharer_sharetime=1627132559086&sharer_shareid=aa23f6ecbf349681c42d0120cf33ac1e%23rd">编程指北</a></h3></blockquote><p>霸占热搜多日的竹-签大战终于水落石出，北京警方在 7 月 22 晚微博发布的通告中显示，竹-签之间还隐藏着一个神秘玩家：<strong>刘某</strong>，他一直作为一个「中间人」的角色在发起『中间人攻击』。</p><blockquote><p>中间人攻击（英语：Man-in-the-middle attack，缩写：MITM）在密码学和计算机安全领域中是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。</p></blockquote><p>一张图就可以吃完整个瓜：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213206.png"></p><p>简单来说，就是刘某先冒充被害人之一去和竹套取细节，然后冒充竹去和签索要赔偿，但是错就错在他为了不引起签的注意，特意给了竹的银行卡和自己的银行卡。</p><p>但是呢吴妈只打了 50 w 给竹的银行卡，刘某并没收到钱，于是他又假冒签的律师逼竹签订「和解协议」，否则需要退款，竹认为这个协议对自己不利，所以竹在几天内共向刘退了 18 W（支付宝每天有额度限制）。</p><p>至于竹在微博上发布的各种爆料消息，则是他的好友帮忙编辑，主要意图是想炒作提高知名度。</p><p>实际中，我们平时上网过程中，也是随时面临着 DNS 欺骗、会话劫持等中间人攻击的危险。</p><p>因为计算机之间通过网络连接的，那么在两台计算机通信时就可能被第三方劫持：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213224.png"></p><p>有攻必防，要保证安全，一般有两个要求：</p><ol><li>第三方无法窃听</li><li>一旦被中间人篡改，通信双方可以发现</li><li>身份认证</li></ol><p>比如 HTTPS 就能一定程度上解决上网的安全性问题，它通过加密和证书的机制来解决上诉问题：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213254.png"></p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213313.png"></p><p>整个过程涉及到对称加密&#x2F;非对称加密，数字签名、数字证书等内容，那么今天就单独写一篇文章来详细说明一下这些知识，主要是串起来。</p><p>如果你能清晰的回答出下面这些问题，那么这篇文章就不用看啦：</p><ol><li>非对称加密中公私钥都可以加密，那么什么时候用公钥加密，什么时候用私钥“加密” ？</li><li>什么是数字签名，数字签名的作用是什么？</li><li>为什么要对数据的摘要进行签名，而不是直接计算原始数据的数字签名？</li><li>什么是数字证书，数字证书解决了什么问题？</li></ol><p>下面主要围绕<strong>数字签名</strong>和<strong>数字证书</strong>的原理以及它们的作用展开。</p><p>争取做到让不具备任何密码学基础知识的同学都能听懂，所以在这里需要先对齐一些加密相关的概念 。</p><h2 id="1-什么是加密"><a href="#1-什么是加密" class="headerlink" title="1. 什么是加密"></a>1. 什么是加密</h2><p>加密就是<strong>对明文数据按某种特殊算法进行处理，使其成为不可读的一段代码，通常称为“密文“，</strong> 密文通过”密钥“解密后还原出原来的明文，通过这样的途径可以达到保护数据不被非法人窃取、阅读的目的。</p><p>定义简单吧？那来看个题，考虑以下哪些属于加密方法：</p><ul><li>AES</li><li>RSA</li><li>MD5</li><li>BASE64</li><li>SM4</li></ul><p>这几种都是日常开发中常用的数据编码技术，但是只有 AES、RSA、SM4 才能算是加密方法。</p><p>为什么呢？<strong>一个区分的简单方法就是看编码后的数据是否还能还原，能还原的是加密。</strong></p><p>MD5 实际上是对数据进行有损压缩，无论数据有多长，1KB、1Mb 还是 1G，都会生成固定 128 位的散列值，并且 MD5 理论上是不可能对编码后的数据进行还原的，即不可逆。</p><p>MD5 因为其具有不可逆性、单向恒定性（相同的数据多次计算值不变）被广泛应用于文件完整性验证、口令加密以及接下来会讲到的数字签名中。</p><p>至于 BASE64 是否算做加密方法，仁者见仁。在这里不下结论，因为 BASE64 编码不需要密钥，且编码后的字符串任何人都可以解码出原串，所以一般不认为是加密方法。BASE64 常用来做转码，把二进制字节序列转化为 ASCII 字符序列。</p><h2 id="2-加密算法的分类"><a href="#2-加密算法的分类" class="headerlink" title="2. 加密算法的分类"></a>2. 加密算法的分类</h2><p>加密算法按照加解密使用的密钥是否相同，可分为：</p><ul><li><strong>对称加密（Symmetric Cryptography）</strong></li><li><strong>非对称加密（Asymmetric Cryptography）</strong></li></ul><h4 id="1-对称加密"><a href="#1-对称加密" class="headerlink" title="1. 对称加密"></a>1. 对称加密</h4><p>对称加密是指加密和解密时使用同一个密钥。</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213334.png"></p><h3 id="2-非对称加密"><a href="#2-非对称加密" class="headerlink" title="2. 非对称加密"></a>2. 非对称加密</h3><p>非对称加密是指加密和解密使用不同的密钥，这两个密钥分别叫做「公钥」、「私钥」。</p><p>公钥是可以公开给所有人的，而私钥需要自己保密的。</p><p>公钥加密的数据只能用私钥解密：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213410.png"></p><p>同理，私钥“加密”的数据只能用公钥“解密”：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213424.png"></p><p>大家注意到没，我对 <strong>私钥“加密”</strong> 这里打了引号，为什么呢？</p><p>因为私钥不是用来加密的，准确的说法应该是 <strong>「私钥签名，公钥验签」</strong>。</p><p>这个问题很多同学都存在误解，认为公私钥都可以用于加密。</p><p>实际上不是的，至于为什么，后面讲完签名我会解释的。</p><h2 id="3-故事开始"><a href="#3-故事开始" class="headerlink" title="3. 故事开始"></a>3. 故事开始</h2><p>为了讲这个故事，小北请来了密码学中常用的学术情侣，Alice（竹） 和 Bob（签），以及窃听者代表 Eve（刘某）。</p><p>我们从 Alice、Bob 约会的故事展开，来讲讲其中暗藏着哪些危机，又是如何一步步化解的。</p><h3 id="3-1-第一回合"><a href="#3-1-第一回合" class="headerlink" title="3.1 第一回合"></a>3.1 第一回合</h3><p>九月，一个夜黑风高的晚上，Bob 想约 Alice 出来玩，于是给 Alice 发了一封邮件：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213433.png"></p><p>但我们都知道网络是不可信的，并且由于消息在网络中是明文传输的，所以黑客可以轻易的截获、篡改甚至冒充  Bob。</p><p>来，我们看看黑客 Eve 是怎么干的：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213441.png" alt="黑客窃听伪造"></p><p>瞧，Eve 轻易的拿到了邮件内容 <strong>（窃听）</strong>，并且修改了邮件内容 <strong>（篡改）</strong>，甚至说他可以随时冒充 Bob 给 Alice 发送邮件 <strong>（伪装）</strong>。</p><p>如果上图中 Eve 伪造的内容被 Alice 接收到了，那么后果可想而知。</p><p>现实世界中，我们每天都在通过网络进行聊天、转账、浏览不存在网站。</p><p>如果都是这样明文传输数据，显然毫无安全感。</p><h4 id="3-2-第二回合"><a href="#3-2-第二回合" class="headerlink" title="3.2 第二回合"></a>3.2 第二回合</h4><p>既然我们不能明文传输，那么 Bob 和 Alice 提前商量好密钥，使用对称加密对邮件内容加密不就好了~</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213449.png" alt="对称加密"></p><p>现在 Bob 发送的邮件都使用和 Alice 提前商量好的密钥加密后再传输。</p><p>由于没有密钥，Eve 就算截获到数据也无法获取邮件的内容，也没法篡改和冒充 Bob。</p><p>因为篡改后的数据必须使用密钥再次加密 Alice 才能正确解密。</p><p>那么只要 Bob 和 Alice 能够保证 密钥不泄露，整个通信就是安全的。</p><p>如果密钥泄露，被中间人截获，那么就等同于明文通信。</p><p>所以我们不能把安全性寄托在人上面。</p><p>并且这里也存在一个问题，如果两个人不能线下见面， 如何在网上安全的交换密钥呢？</p><p>这似乎是无解的，因为<strong>交换密钥的时候我们必须明文通信，不然对方根本看不懂。但是明文交换即意味着可能泄露。</strong></p><p>但是别忘了我们的密码学工具箱里还有一个好东西— <strong>「非对称加密」</strong>。</p><p>Bob 和 Alice 各自生成一对公私钥，因为公钥本来就是公开的，即可以被任何人获取，所以可以通过网络明文交换公钥。</p><p>然后使用公钥加密邮件内容后发送给对方，接收者使用自己的私钥即可解密。完美~</p><h4 id="3-3-第三回合"><a href="#3-3-第三回合" class="headerlink" title="3.3 第三回合"></a>3.3 第三回合</h4><p>来看看，在非对称加密体系下，Bob 如何给 Alice 发消息的。</p><p>首先 Alice 需要先生成一对公私钥，私钥只能 Alice 自己知道，公钥是可以让任何人都知道的，因此可将公钥直接发送给 Bob，就算被截获也无所谓。</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213456.png" alt="非对称加密"></p><p>Bob 使用 Alice 的公钥加密邮件内容，加密后的内容只能由 Alice 的私钥解密，所以就算 Eve 截获也是徒劳。</p><p>反之，如果 Alice 想给 Bob 回信，就需要用 Bob 的公钥加密后发送。</p><p>这就解决了密钥交换问题，也保证了邮件内容不会泄露。也就是说现在可以<strong>防窃听</strong>。</p><h4 id="3-4-如何证明-Bob-是-Bob"><a href="#3-4-如何证明-Bob-是-Bob" class="headerlink" title="3.4 如何证明 Bob 是 Bob"></a>3.4 如何证明 Bob 是 Bob</h4><p>不知道你注意到没有，这里也存在另外一个问题：</p><p><strong>Eve 也可以使用 Alice 的公钥冒充 Bob 给 Alice 发邮件啊，因为 Alice 的公钥本来就是公开的，任何人都可以获得。</strong></p><p>由于 Eve 也可以获得 Alice 公钥，所以没法防止 Eve <strong>伪造</strong>和<strong>篡改</strong>，并且对于 Alice 而言，她无法分辨出邮件到底是 Eve 发的还是 Bob。</p><p>所以这个问题的本质就是 <strong>「Alice 如何确认邮件来自于 Bob」</strong>。</p><p>那么在生活中，我们如何做这件事呢？</p><p>那就是让 Bob 在纸上<strong>签名</strong>并且<strong>按手印</strong>，因为指纹和字迹是 Bob 独有的，其它人很难伪造。</p><p>所以我们需要在计算机中引入类似的机制：</p><p><strong>即只有 Bob 自己能够产生的独一无二的标志，并且其它人能够验证这个标志确实是属于 Bob的。</strong></p><p>这就是我们今天要讲的主题—<strong>「数字签名」。</strong></p><p>还记得什么是 Bob 独有的吗？</p><p>对，就是 Bob 自己的私钥，Bob 用自己的私钥对邮件内容计算一个「签名」，将「签名」和邮件内容一起发送出去，接受者 Alice 可以使用 Bob 的公钥验证这个签名是否正确，这就叫「验签」。</p><p>如果不是 Bob 的私钥计算的签名，那么 Alice 用 Bob 公钥验签将会出错。</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213504.png"></p><p>可以看到， Eve 试图使用自己的私钥计算签名然后发送给 Alice， 但是 Alice 使用 Bob的公钥进行验签时将会出错！</p><p>那么 Eve 可能篡改内容并冒充 Bob 的签名吗？不可能！因为内容发生改变时，对应的签名也需要重新计算，而签名的生成依赖于私钥，只要 Bob 的私钥不泄露，签名就不会被冒充。</p><p>啊啥？你说万一私钥泄露了怎么办？那就当我没说……</p><p>所以使用数字签名，我们能够鉴别消息的发送者，也就是说黑客无法伪装发送者进行发送数据，也无法篡改。</p><blockquote><p><strong>注意：</strong></p><p>可以看出我们这里数据是明文传输的，存在窃听风险。但是我们为了阐述数字签名机制是如何运转的，故意将保证信息机密性的机制省略了。</p><p>如果想要保证数据的机密性，我们常见的做法是，通信双方通过非对称加密安全交换对称加密的密钥，后续通信过程的数据都使用对称加密保证数据机密性。</p><p>并且「签名」的作用本身也不是用来保证数据的机密性，而是用于验证数据来源的防止数据被篡改的，也就是确认发送者的身份。</p></blockquote><p>一般而言，我们不会直接对数据本身直接计算数字签名，为什么呢？</p><p>因为数字签名属于非对称加密，非对称加密依赖于复杂的数学运算，包括大数乘法、大数模等等，耗时比较久。</p><p>如果数据量大的时候计算数字签名将会比较耗时，所以一般做法是先将原数据进行 Hash 运算，得到的 Hash 值就叫做「摘要」。</p><p>「摘要」就像人的指纹一样，可以代表一个人，只要内容发生了改变，计算出来的摘要也应该变化。</p><p>「摘要」最好是不可逆转的，一般使用开头提到的 MD5 作为 Hash 函数，MD5 输出的结果固定位 128 位。</p><blockquote><p><strong>为什么「摘要」最好是不可逆转的？</strong></p><p>因为既然 Alice 可以用 Bob 公钥解开签名，那么理论上其它人，比如 Eve 也可以使用 Bob 公钥解开签名拿到数据。</p><p>所以我们最好对数据的「摘要」进行签名，这样，Eve 就算解开签名，拿到的也是「摘要」，如果摘要是不可逆转的，也就是无法从摘要反推出原文，也就达到了保密的作用。</p></blockquote><p>发送者使用私钥对「摘要」计算数字签名。那么接收者如何验证呢？</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213511.png"></p><p>接受者 Alice 收到后，取下数字签名，同时用 Bob 的公钥解密，得到「摘要1」，<strong>证明确实是 Bob 发的</strong>。</p><p><em>( 画外音：如果使用 Bob 的公钥验证签名出错，那么签名一定不是 Bob 的私钥生成的）</em></p><p>再对邮件内容使用相同的散列函数计算「摘要2」，与上面得到的「摘要1」进行对比，<strong>两者一致就说明信息未被篡改。</strong></p><p>这样两步分证明发送者身份和保证数据未被篡改。</p><h4 id="3-5-这就够了吗？"><a href="#3-5-这就够了吗？" class="headerlink" title="3.5 这就够了吗？"></a>3.5 这就够了吗？</h4><p>Bob 和 Alice 现在可以依赖于对称加密进行保密通信，也可以依赖于数字签名验证消息是否是对方发送的。</p><p><strong>但是这一切的根基是建立在 Alice 持有的公钥确实是 Bob的，反之亦然。</strong></p><p>什么意思呢？</p><p>试想，**Eve 如果将自己的公钥冒充 Bob 发送给 Alice，然后 Alice 保存了下来，那以后凡是 Bob 发送的消息，反而会验证签名失败，被当做冒充者。**那你可能会问，为什么 Eve 可以将自己的公钥发送给 Alice，而 Alice 毫不知情呢？</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213519.png"></p><p>看！我们又回到了最初的起点，只不过这次被篡改的是公钥，之前是消息本身。</p><p>因为 Bob 的公钥是直接通过网络发送给 Alice的，所以 Eve 才可以在这一步做手脚，进行篡改，将自己的公钥冒充 Bob 发送给 Alice，也就是发送公钥这一步没有做到：</p><ul><li>防篡改</li><li>防冒充</li></ul><p>防篡改怎么和防冒充怎么实现的呢？</p><p>我们前面讲了，就是靠数字签名！但是数字签名需要接受者持有发送者公钥，才能进行验签。</p><p><strong>而我们现在处理的是分发公钥这一步，所以…….死锁了。这像是先有鸡还是先有蛋的问题</strong></p><p>现在的问题就是「Bob 无法证明它自己是 Bob」。</p><p>这个是不是似曾相识，以前去办事的时候经常被要求出具「我妈是我妈」这类证明。但是我们自己说“我妈就是我妈”，人家根本不会信呀，需要一个可信第三方出具证明，比如派出所。</p><p>那么「Alice 如何才能确认 Bob 发送给自己的公钥确实是 Bob 的，而没有被篡改？」</p><p>在只有 Alice 和 Bob 两人的情况下是没法验证的。</p><p>所以，我们这里也需要一个第三方帮 Bob证明 「Bob 的公钥就是 Bob 的公钥」，有点绕口令那感觉了~</p><h4 id="3-6-数字证书"><a href="#3-6-数字证书" class="headerlink" title="3.6 数字证书"></a>3.6 数字证书</h4><p>为了解决这个问题，就引入了「数字证书」，什么叫数字证书呢？</p><p>百度百科：</p><blockquote><p>数字证书是指在互联网通讯中标志通讯各方身份信息的一个数字认证，人们可以在网上用它来识别对方的身份。</p><p>因此数字证书又称为数字标识。数字证书对网络用户在交流中的信息和数据等以加密或解密的形式保证了信息和数据的完整性和安全性。</p></blockquote><p>看了这个描述，是不是感觉还是云里雾里，还是我用大白话来说吧~</p><p><strong>只要你理解了前面的数字签名，就能理解这里的数字证书，因为我把数字证书叫做「公钥的数字签名」。</strong></p><p>为什么呢？我们引入数字证书的目的是为了保证公钥不被篡改，即使被篡改了也能识别出来。</p><p>而防篡改的方法就是数字签名，但是这个签名不能我们自己做，原因说过了，因为我们的公钥还没分发出去，别人无法验证。</p><p>所以只能找可信的第三方来帮我们签名，即证书颁布机构（CA），CA 会将：证书的颁布机构、有效期、公钥、持有者(subject)等信息用 CA 的私钥进行签名。</p><p>并且将签名结果和这些信息放在一起，这就叫做「数字证书」。</p><p>这样，Bob 就可以去 CA 申请一个证书，然后将自己的证书发给 Alice，那么 Alice 如何验证这个证书确实是 Bob的呢？</p><p>当然是使用 CA 的公钥进行验签。</p><blockquote><p><strong>注意：</strong></p><p>CA 的公钥也是需要使用证书来分发的，所以 Alice 的电脑必须安装 CA 的证书，证书里包含了 CA 的公钥。</p></blockquote><p>收到 Bob 发过来的数字证书后，Alice 使用 CA 的公钥进行验证，验证通过即证明这确实是 Bob 证书，也就可以使用证书中包含的 Bob 的公钥，按照之前讨论的流程进行通信。</p><p>那么 Eve 是否可以在中途篡改 Bob 的证书呢？</p><p>答案是不行，因为证书的信息使用 CA 的私钥进行签名，只要 Eve 修改了任何一个 Bit 都会导致最后签名验证不通过。</p><p>那 Eve 可不可以修改证书信息后自己重新计算一次证书的数字签名呢？</p><p>也不行，因为证书的数字签名计算依赖于 CA 的私钥，Eve 是拿不到 CA 的私钥的。</p><p>如果拿到了，说明什么？整个世界都是不可信的。</p><h4 id="3-7-数字证书长啥样"><a href="#3-7-数字证书长啥样" class="headerlink" title="3.7 数字证书长啥样"></a>3.7 数字证书长啥样</h4><p>这是我电脑中的自带的证书：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213530.png" alt="电脑自带证书"></p><p>可以看到，包含了证书持有人的公钥和证书的签名。</p><p>另外，证书颁发机构是有层级关系的，下级 CA 的证书是需要由上级 CA 签名的。</p><p>换句话说一定存在根证书颁发机构，那么他们的证书是由谁签名的呢？</p><p>答案是自签，自己给自己认证。</p><p>这是我电脑中的一个自签的根证书颁发机构：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724213536.png" alt="自签的根证书机构"></p><p>为什么根证书可以自签，谁来保证安全？</p><p>你把钱存在银行，你会担心吗？我们基于对国家的信任，才信任银行，这就是信任链的基础！我们思考问题应该是分层的，如果不认可一个统一的基础，一直套娃下去，那么问题就无解。</p><p>那还有个问题，如何保证根证书的可靠性？这是操作系统和浏览器预装的，由微软、苹果等操作系统厂商来选择根证书。</p><h4 id="3-8-证书不可信？"><a href="#3-8-证书不可信？" class="headerlink" title="3.8 证书不可信？"></a>3.8 证书不可信？</h4><p>那么什么情况下浏览器会提示 “证书不可信” 呢？</p><p>根据我们上面的分析，下面是可能的原因：</p><ol><li>证书不是权威 CA 颁发</li></ol><p>有些企业为了贪图便宜使用盗版的证书，没有经过 CA 认证。也就是无法使用浏览器内置 CA 公钥进行验证。</p><ol><li>证书过期</li></ol><p>上面说了，证书里有一项就是有效期，一般就是一年或者两年的时间。如果证书过期，那么浏览器就会提示“证书不可信”</p><ol><li>证书部署错误</li></ol><p>可能是服务器证书部署出错，比如证书与域名不匹配，因为证书里有一项是持有人信息的。</p><p>好了，饶了一大圈，Bob 终于可以安全的向 Alice 发出前往红树林的邀请了~</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>现在我们来回答文章开头提出的一些问题：</p><ol><li><p>非对称加密中公私钥都可以加密，那么什么时候用公钥加密，什么时候用私钥“加密” ？</p></li><li><ul><li>加密场景，那么肯定希望只有我才能解密，别人只能加密。即<strong>公钥加密，私钥解密。</strong></li><li>签名场景，既然是签名，就希望只能我才能签名，别人只能验证。即<strong>私钥签名，公钥验签</strong></li></ul></li><li><p>什么是数字签名，数字签名的作用是什么？</p></li><li><ul><li>数字签名就是使用私钥对数据摘要进行签名，并附带和数据一起发送。</li><li>可以起到防篡改、防伪装、防否认的作用。</li></ul></li><li><p>为什么要对数据的摘要进行签名，而不是直接计算原始数据的数字签名？</p></li><li><ul><li>数据可能比较大，签名是使用非对称加密算法，比较耗时</li><li>防止第三方使用公钥解开签名后，拿到原始数据</li></ul></li><li><p>什么是数字证书，数字证书存在解决了什么问题？</p></li><li><ul><li>数字证书就是由 CA 机构使用自己私钥，对证书申请者的公钥进行签名认证。</li><li>数字证书解决了如何安全分发公钥的问题，也奠定了信任链的基础。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第十四天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="HBase和Hive的集成"><a href="#HBase和Hive的集成" class="headerlink" title="HBase和Hive的集成"></a>HBase和Hive的集成</h3><ol><li><p>HBase作为一个非关系型数据库，提供了基本的增删改查的能管理，并且HBase能够非常快速且高效的去读写大量的数据，但是HBase对数据的分析功能相对较弱</p></li><li><p>在实际过程中，如果需要对HBase中的数据进行分析，那么此时需要考虑关联Hive，利用Hive中的大量函数来对HBase中的数据进行分析</p></li><li><p>步骤</p><ol><li><p>先进入Hive查看是否由操作HBase的jar包</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/hive-3.1.2/lib<br><span class="hljs-built_in">ls</span> hive-hbase*<br><span class="hljs-comment"># 查看是否出现了hive-hbase-handler-3.1.2.jar</span><br></code></pre></div></td></tr></table></figure></li><li><p>将HBase的依赖jar包拷贝到Hive的lib目录</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /opt/hbase-2.4.2/lib/hbase-common-2.4.2.jar ./<br><span class="hljs-built_in">cp</span> /opt/hbase-2.4.2/lib/hbase-server-2.4.2.jar ./<br><span class="hljs-built_in">cp</span> /opt/hbase-2.4.2/lib/hbase-client-2.4.2.jar ./<br><span class="hljs-built_in">cp</span> /opt/hbase-2.4.2/lib/hbase-protocol-2.4.2.jar ./<br><span class="hljs-built_in">cp</span> /opt/hbase-2.4.2/lib/hbase-it-2.4.2.jar ./<br><span class="hljs-built_in">cp</span> /opt/hbase-2.4.2/lib/hbase-hadoop2-compat-2.4.2.jar ./<br><span class="hljs-built_in">cp</span> /opt/hbase-2.4.2/lib/hbase-hadoop-compat-2.4.2.jar ./<br></code></pre></div></td></tr></table></figure></li><li><p>进入Hive的配置文件目录下</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ../conf<br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim hive-site.xml<br></code></pre></div></td></tr></table></figure><p>添加配置信息</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">&lt;property&gt;</span><br>    <span class="hljs-attr">&lt;name&gt;hive.zookeeper.quorum&lt;/name&gt;</span><br>    <span class="hljs-attr">&lt;value&gt;hadoop</span>:<span class="hljs-string">2181,hadoop02:2181,hadoop03:2181&lt;/value&gt;</span><br><span class="hljs-attr">&lt;/property&gt;</span><br><span class="hljs-attr">&lt;property&gt;</span><br>    <span class="hljs-attr">&lt;name&gt;hive.zookeeper.client.port&lt;/name&gt;</span><br>    <span class="hljs-attr">&lt;value&gt;2181&lt;/value&gt;</span><br><span class="hljs-attr">&lt;/property&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动Hive</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hive --service hiveserve2 &amp;<br>hive --service metastore &amp;<br></code></pre></div></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第十三天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="API操作"><a href="#API操作" class="headerlink" title="API操作"></a>API操作</h3><ol><li><p>获取一行数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getLine</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Get对象</span><br>    <span class="hljs-type">Get</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Get</span>(<span class="hljs-string">&quot;u1&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 查询数据，获取结果集</span><br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> users.get(get);<br>    <span class="hljs-comment">// 获取结果</span><br>    NavigableMap&lt;<span class="hljs-type">byte</span>[], NavigableMap&lt;<span class="hljs-type">byte</span>[], NavigableMap&lt;Long, <span class="hljs-type">byte</span>[]&gt;&gt;&gt; map = result.getMap();<br>    <span class="hljs-comment">// 遍历映射</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;<span class="hljs-type">byte</span>[], NavigableMap&lt;<span class="hljs-type">byte</span>[], NavigableMap&lt;Long, <span class="hljs-type">byte</span>[]&gt;&gt;&gt; entry : map.entrySet()) &#123;<br>        <span class="hljs-comment">// 键是列族名</span><br>        System.out.println(<span class="hljs-string">&quot;Column Family:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(entry.getKey()));<br>        <span class="hljs-comment">// 值是列族中包含的列</span><br>        NavigableMap&lt;<span class="hljs-type">byte</span>[], NavigableMap&lt;Long, <span class="hljs-type">byte</span>[]&gt;&gt; columns = entry.getValue();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;<span class="hljs-type">byte</span>[], NavigableMap&lt;Long, <span class="hljs-type">byte</span>[]&gt;&gt; column : columns.entrySet()) &#123;<br>            <span class="hljs-comment">// 键是列名</span><br>            System.out.println(<span class="hljs-string">&quot;\tColumn:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(column.getKey()));<br>            <span class="hljs-comment">// 值是实际数据</span><br>            NavigableMap&lt;Long, <span class="hljs-type">byte</span>[]&gt; values = column.getValue();<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;Long, <span class="hljs-type">byte</span>[]&gt; value : values.entrySet()) &#123;<br>                <span class="hljs-comment">// 键是时间戳</span><br>                System.out.println(<span class="hljs-string">&quot;\t\tTimestamp:&quot;</span> + value.getKey());<br>                <span class="hljs-comment">// 值是实际数据</span><br>                System.out.println(<span class="hljs-string">&quot;\t\tValue:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value.getValue()));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>获取指定行键指定列族的数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getColumnFamily</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Get对象</span><br>    <span class="hljs-type">Get</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Get</span>(<span class="hljs-string">&quot;u1&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 指定列族</span><br>    <span class="hljs-type">byte</span>[] basic = <span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    get.addFamily(basic);<br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> users.get(get);<br>    <span class="hljs-comment">// 解析结果</span><br>    NavigableMap&lt;<span class="hljs-type">byte</span>[], <span class="hljs-type">byte</span>[]&gt; familyMap = result.getFamilyMap(basic);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;<span class="hljs-type">byte</span>[], <span class="hljs-type">byte</span>[]&gt; entry : familyMap.entrySet()) &#123;<br>        <span class="hljs-comment">// 键是数据的列名，值是实际数据</span><br>        System.out.println(<span class="hljs-string">&quot;Key:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(entry.getKey()) + <span class="hljs-string">&quot;, Value:&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(entry.getValue()));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>获取指定行键指定列的数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Get对象</span><br>    <span class="hljs-type">Get</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Get</span>(<span class="hljs-string">&quot;u1&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 指定列族和列</span><br>    <span class="hljs-type">byte</span>[] basic = <span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-type">byte</span>[] name = <span class="hljs-string">&quot;name&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    get.addColumn(basic, name);<br>    <span class="hljs-comment">// 查询数据，获取结果</span><br>    <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> users.get(get);<br>    <span class="hljs-comment">// 解析结果</span><br>    <span class="hljs-type">byte</span>[] value = result.getValue(basic, name);<br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value));<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>遍历结果集</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanTable</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Scan对象</span><br>    <span class="hljs-type">Scan</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scan</span>();<br>    <span class="hljs-comment">// 添加Scan对象，来获取结果集</span><br>    <span class="hljs-type">ResultScanner</span> <span class="hljs-variable">results</span> <span class="hljs-operator">=</span> users.getScanner(scan);<br>    <span class="hljs-comment">// 指定列族和列</span><br>    <span class="hljs-type">byte</span>[] basic = <span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-type">byte</span>[] password = <span class="hljs-string">&quot;password&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-comment">// 遍历结果集</span><br>    Iterator&lt;Result&gt; iterator = results.iterator();<br>    <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>        <span class="hljs-comment">// 获取结果</span><br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> iterator.next();<br>        <span class="hljs-comment">// 解析结果</span><br>        <span class="hljs-type">byte</span>[] value = result.getValue(basic, password);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>过滤数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Scan对象</span><br>    <span class="hljs-type">Scan</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scan</span>();<br>    <span class="hljs-comment">// 构建过滤器</span><br>    <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueFilter</span>(CompareOperator.EQUAL, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegexStringComparator</span>(<span class="hljs-string">&quot;.*AAA.*&quot;</span>));<br>    <span class="hljs-comment">// 设置过滤器</span><br>    scan.setFilter(filter);<br>    <span class="hljs-comment">// 过滤数据</span><br>    <span class="hljs-type">ResultScanner</span> <span class="hljs-variable">results</span> <span class="hljs-operator">=</span> users.getScanner(scan);<br>    <span class="hljs-comment">// 指定列族</span><br>    <span class="hljs-type">byte</span>[] basic = <span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-type">byte</span>[] password = <span class="hljs-string">&quot;password&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-comment">// 遍历结果</span><br>    <span class="hljs-keyword">for</span> (Result result : results) &#123;<br>        <span class="hljs-comment">// 解析结果</span><br>        <span class="hljs-type">byte</span>[] value = result.getValue(basic, password);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>删除指定行键指定列的数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Delete对象</span><br>    <span class="hljs-type">Delete</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Delete</span>(<span class="hljs-string">&quot;u1&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 指定列族和列</span><br>    delete.addColumn(<span class="hljs-string">&quot;info&quot;</span>.getBytes(StandardCharsets.UTF_8), <br>                     <span class="hljs-string">&quot;address&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 删除数据</span><br>    users.delete(delete);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>删除指定行间指定列族的数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFamily</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Delete对象</span><br>    <span class="hljs-type">Delete</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Delete</span>(<span class="hljs-string">&quot;u1&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 指定列族</span><br>    delete.addFamily(<span class="hljs-string">&quot;info&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 删除数</span><br>    users.delete(delete);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>删除指定行键的数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFamily</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Delete对象</span><br>    <span class="hljs-type">Delete</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Delete</span>(<span class="hljs-string">&quot;u1&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 指定列族</span><br>    delete.addFamily(<span class="hljs-string">&quot;info&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 删除数</span><br>    users.delete(delete);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteTable</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 禁用表</span><br>    admin.disableTable(TableName.valueOf(<span class="hljs-string">&quot;users&quot;</span>));<br>    <span class="hljs-comment">// 删除表</span><br>    admin.deleteTable(TableName.valueOf(<span class="hljs-string">&quot;users&quot;</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>关流</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@After</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 关闭表</span><br>    users.close();<br>    <span class="hljs-comment">// 关闭管理权</span><br>    admin.close();<br>    <span class="hljs-comment">// 关闭连接</span><br>    connection.close();<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><h3 id="HRegion"><a href="#HRegion" class="headerlink" title="HRegion"></a>HRegion</h3><ol><li><p>在HBase中，会从行键方向上来对表进行切分，切分出来的每一部分都称之为是一个HRegion。一个表中会包含1个到多个HRegion</p></li><li><p>切分出来的每一个HRegion都会交给HRegionServer来处理。HRegionServer是HBase的从进程</p></li><li><p>在HBase中，会默认对行键来进行排序，按照字典序来进行排序，因此导致切分出来的HRegion之间的数据是不交叉的</p></li><li><p>因为HRegion之间的数据是不交叉的，因此请求就可以发送到不同的HRegionServer上来进行处理，此时就能保证请求不会集中在一个节点上而是分布在不同的节点上，从而保证请求的均衡以及数据的均衡</p></li><li><p>随着运行时间的延长，HRegion中的数据会越来越多，此时当HRegion达到指定大小(默认是10G)的时候，会进行分裂，均裂为两个等大的HRegion。分裂完成之后，其中的一个HRegion会发生转移，转交给其他的HRegionServer来进行管理。这个过程中，一般不会发生数据的转移，一般指的是管理权的转移</p></li><li><p>一个HRegion中包含1个到多个HStore，其中HStore的数量由列族的数量决定</p></li><li><p>每一个HStore中，会包含1个memStore(写缓存)，以及0到多个HFile&#x2F;StoreFile</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210724215805.png" alt="HRegion结构"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第十二天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><ol><li>HBase作为一个数据库，提供了基本的增删改查的能力，但是HBase基于HDFS来进行数据的存储，在HDFS“允许一次写入，多次读取，不允许修改，但是允许追加”的前提下，HBase是怎么实现改操作的？当在HBase中，对数据进行修改的时候，实际上并不是真正去改变HDFS中的数据而是在HDFS的文件后边来追加一条数据，当用户需要获取数据的时候，会从文件中来返回最新的数据，那么此时从用户角度就是将数据进行了修改 - HBase在每条数据之后都会追加一个时间戳用于标记数据的新旧问题，这个时间戳称之为数据的版本(VERSION)</li><li>在HBase中，需要通过行键+列族+列+时间戳&#x2F;版本可以锁定唯一的一条数据，这种结构称之为是一个Cell(单元)</li><li>在HBase中，当表建好之后，这个表的版本数就不能改变了。默认情况下，如果不指定，每一个表只会保留1个版本的数据，同时需要注意，也只允许对外获取1个版本的数据 - 如果需要获取多个版本的数据，那么此时需要在建表的时候指定保留版本数，以及对外获取的时候需要指定获取的版本数量</li><li>在HBase中，删除表之前需要先禁用这个表</li><li>在HBase中，没有database的概念，取而代之的是namespace(名称空间)，可以将表放到不同的名称空间下</li><li>在HBase启动的时候，会自带了两个namespace：default和hbase。在建表的时候如果不指定，那么表默认是放在default空间下的；hbase空间下放的是HBase本身的元数据</li></ol><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>disable ‘person’</td><td>禁用表</td></tr><tr><td>drop ‘person’</td><td>删除表</td></tr><tr><td>create ‘person’, {NAME &#x3D;&gt; ‘basic’, VERSIONS &#x3D;&gt; 4}, {NAME &#x3D;&gt; ‘info’, VERSIONS &#x3D;&gt; 5}</td><td>建立person表，包含2个列族，这2个列族各自保留对应版本数的数据</td></tr><tr><td>get ‘person’, ‘p1’, {COLUMN &#x3D;&gt; ‘basic:age’, VERSIONS &#x3D;&gt; 4}</td><td>获取指定列的多个版本的数据</td></tr><tr><td>scan ‘person’, {COLUMNS &#x3D;&gt; ‘basic’, VERSIONS &#x3D;&gt; 4}</td><td>获取指定列族的多版本数据</td></tr><tr><td>create_namespace ‘demo’</td><td>创建名称空间</td></tr><tr><td>list_namespace</td><td>查看所有的名称空间</td></tr><tr><td>list_namespace_tables ‘default’</td><td>查看指定空间下的表</td></tr><tr><td>create ‘demo:person’, {NAME &#x3D;&gt; ‘basic’, VERSIONS &#x3D;&gt; 5}, {NAME &#x3D;&gt; ‘other’, VERSIONS &#x3D;&gt; 3}</td><td>在指定空间下建表</td></tr><tr><td>put ‘demo:person’, ‘p1’, ‘basic:name’, ‘tom’</td><td>向指定空间指定表中来添加数据</td></tr><tr><td>disable ‘demo:person’</td><td>禁用指定空间下的指定表</td></tr><tr><td>drop ‘demo:person’</td><td>删除指定空间下的指定表</td></tr><tr><td>drop_namespace ‘demo’</td><td>删除指定空间，要求这个空间为空</td></tr><tr><td>count ‘person’</td><td>统计这个表中的行键个数</td></tr><tr><td>get_splits ‘person’</td><td>获取指定表中的HRegion的个数</td></tr><tr><td>truncate ‘person’</td><td>摧毁重建表</td></tr><tr><td>alter ‘person’, {NAME &#x3D;&gt; ‘basic’, VERSIONS &#x3D;&gt; 5}</td><td>修改指定表的属性</td></tr><tr><td>describe ‘person’<br/>或者<br/>desc ‘person’</td><td>描述表信息</td></tr><tr><td>exists ‘person’</td><td>判断表是否存在</td></tr><tr><td>is_disabled ‘person’</td><td>判断表是否被禁用</td></tr><tr><td>is_enabled ‘person’</td><td>判断表是否被启用</td></tr><tr><td>list_regions ‘person’</td><td>列出指定表中的HRegion的信息</td></tr><tr><td>show_filters</td><td>列出所有的过滤器</td></tr><tr><td>list</td><td>获取所有空间下的所有的表</td></tr><tr><td>disable_all ‘demo:.*’</td><td>禁用指定空间下的所有的表，在使用的时候需要给定正则表达式</td></tr><tr><td>drop_all ‘demo:.*’</td><td>删除指定空间下的所有的表</td></tr></tbody></table><h3 id="API操作"><a href="#API操作" class="headerlink" title="API操作"></a>API操作</h3><ol><li><p>Namespache操作</p><ol><li><p>发起连接</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <br>    <span class="hljs-comment">// 获取HBase的配置信息</span><br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> HBaseConfiguration.create();<br>    <span class="hljs-comment">// 指定Zookeeper的连接地址</span><br>    conf.set(<span class="hljs-string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="hljs-string">&quot;hadoop:2181,hadoop02:2181,hadoop03:2181&quot;</span>);<br>    <span class="hljs-comment">// 获取连接</span><br>    connection = ConnectionFactory.createConnection(conf);<br>    <span class="hljs-comment">// 获取管理权</span><br>    admin = connection.getAdmin();<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>创建名称空间</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNamespace</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 构建一个NamespaceDescriptor - 空间描述器</span><br>    <span class="hljs-type">NamespaceDescriptor</span> <span class="hljs-variable">descriptor</span> <span class="hljs-operator">=</span> NamespaceDescriptor.create(<span class="hljs-string">&quot;demo&quot;</span>).build();<br>    <span class="hljs-comment">// 创建名称空间</span><br>    admin.createNamespace(descriptor);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>查看所有的名称空间</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listNamespaces</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取所有的名称空间</span><br>    String[] namespaces = admin.listNamespaces();<br>    <span class="hljs-comment">// 遍历数组</span><br>    <span class="hljs-keyword">for</span> (String namespace : namespaces) &#123;<br>        System.out.println(namespace);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>删除名称空间</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dropNamespace</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    admin.deleteNamespace(<span class="hljs-string">&quot;demo&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>关闭连接</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@After</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 关闭管理权</span><br>    admin.close();<br>    <span class="hljs-comment">// 关闭连接</span><br>    connection.close();<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>Table操作</p><ol><li><p>发起连接</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取HBase的配置</span><br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> HBaseConfiguration.create();<br>    <span class="hljs-comment">// 设置Zookeeper的连接地址</span><br>    conf.set(<span class="hljs-string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="hljs-string">&quot;hadoop:2181,hadoop02:2181,hadoop03:2181&quot;</span>);<br>    <span class="hljs-comment">// 获取连接</span><br>    connection = ConnectionFactory.createConnection(conf);<br>    <span class="hljs-comment">// 获取管理权</span><br>    admin = connection.getAdmin();<br>    <span class="hljs-comment">// 指定表</span><br>    users = connection.getTable(TableName.valueOf(<span class="hljs-string">&quot;users&quot;</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>建表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createTable</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 构建列族描述器</span><br>    <span class="hljs-type">ColumnFamilyDescriptor</span> <span class="hljs-variable">cf1</span> <span class="hljs-operator">=</span> ColumnFamilyDescriptorBuilder<br>        .newBuilder(<span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8)).build();<br>    <span class="hljs-type">ColumnFamilyDescriptor</span> <span class="hljs-variable">cf2</span> <span class="hljs-operator">=</span> ColumnFamilyDescriptorBuilder<br>        .newBuilder(<span class="hljs-string">&quot;info&quot;</span>.getBytes(StandardCharsets.UTF_8)).build();<br>    <span class="hljs-comment">// 构建TableDescriptor - 表描述器</span><br>    <span class="hljs-type">TableDescriptor</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> TableDescriptorBuilder<br>        .newBuilder(TableName.valueOf(<span class="hljs-string">&quot;users&quot;</span>))<br>        .setColumnFamily(cf1).setColumnFamily(cf2).build();<br>    <span class="hljs-comment">// 建表</span><br>    admin.createTable(table);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>添加&#x2F;追加数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 构建Append对象</span><br>    <span class="hljs-type">Append</span> <span class="hljs-variable">append</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Append</span>(<span class="hljs-string">&quot;u1&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 添加数据</span><br>    <span class="hljs-type">byte</span>[] basic = <span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-type">byte</span>[] info = <span class="hljs-string">&quot;info&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    append.addColumn(basic, <span class="hljs-string">&quot;name&quot;</span>.getBytes(StandardCharsets.UTF_8), <span class="hljs-string">&quot;David&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    append.addColumn(basic, <span class="hljs-string">&quot;age&quot;</span>.getBytes(StandardCharsets.UTF_8), <span class="hljs-string">&quot;19&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    append.addColumn(basic, <span class="hljs-string">&quot;gender&quot;</span>.getBytes(StandardCharsets.UTF_8), <span class="hljs-string">&quot;male&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    append.addColumn(info, <span class="hljs-string">&quot;height&quot;</span>.getBytes(StandardCharsets.UTF_8), <span class="hljs-string">&quot;185.5&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    append.addColumn(info, <span class="hljs-string">&quot;weight&quot;</span>.getBytes(StandardCharsets.UTF_8), <span class="hljs-string">&quot;70.5&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    append.addColumn(info,<span class="hljs-string">&quot;address&quot;</span>.getBytes(StandardCharsets.UTF_8), <span class="hljs-string">&quot;chongqing&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 追加</span><br>    users.append(append);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>添加&#x2F;修改数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 封装Put对象</span><br>    <span class="hljs-type">Put</span> <span class="hljs-variable">put</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Put</span>(<span class="hljs-string">&quot;u2&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 指定数据</span><br>    put.addColumn(<span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8),<br>                  <span class="hljs-string">&quot;name&quot;</span>.getBytes(StandardCharsets.UTF_8),<br>                  <span class="hljs-string">&quot;Evan&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 修改/添加数据</span><br>    users.put(put);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>测试：添加百万条数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putMillionData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 记录起始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-comment">// 构建集合，实现批量添加</span><br>    List&lt;Put&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 指定列族和列</span><br>    <span class="hljs-type">byte</span>[] basic = <span class="hljs-string">&quot;basic&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-type">byte</span>[] password = <span class="hljs-string">&quot;password&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<br>        <span class="hljs-comment">// 构建Put对象</span><br>        <span class="hljs-type">Put</span> <span class="hljs-variable">put</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Put</span>((<span class="hljs-string">&quot;u&quot;</span> + i).getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-comment">// 添加数据</span><br>        put.addColumn(basic, password, getPassword());<br>        <span class="hljs-comment">// 将数据放入集合</span><br>        list.add(put);<br>        <span class="hljs-comment">// 每1000条数据写出一次</span><br>        <span class="hljs-keyword">if</span> (list.size() &gt;= <span class="hljs-number">1000</span>) &#123;<br>            users.put(list);<br>            <span class="hljs-comment">// 清空集合</span><br>            list.clear();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 记录结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(end - begin);<br>&#125;<br><span class="hljs-comment">// 产生初始密码</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] getPassword() &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (Math.random() * <span class="hljs-number">26</span> + <span class="hljs-number">65</span>);<br>        sb.append(c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString().getBytes(StandardCharsets.UTF_8);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第十一天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="电信日志分析"><a href="#电信日志分析" class="headerlink" title="电信日志分析"></a>电信日志分析</h1><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>开启Hadooop</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">start-all.sh<br></code></pre></div></td></tr></table></figure></li><li><p>进入MySQL，在MySQL中建表</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 建库<br>create database telecom;<br># 使用这个库<br>use telecom;<br># 需要在库下建立事实表<br>create table F_HTTP_APP_HOST( reporttime datetime, appType bigint, appSubtype bigint, userIP varchar(20), userPort bigint, appServerIP varchar(20), appServerPort bigint, host varchar(255), cellid varchar(20), attempts bigint, accepts bigint, trafficDL bigint, trafficUL bigint, retranUL bigint, retranDL bigint, failCount bigint, transDelay bigint);<br># 需要在库下建立受欢迎的APP的数据表<br>create table D_H_HTTP_APPTYPE(hourid datetime, appType int, appSubtype int, attempts bigint, accepts bigint, succRatio double, trafficUL bigint, trafficDL bigint, totalTraffic bigint, retranUL bigint,retranDL bigint, retranTraffic bigint, failCount bigint, transDelay bigint);<br></code></pre></div></td></tr></table></figure></li><li><p>利用Sqoop将数据导出</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 导出事实表的数据</span><br>sqoop <span class="hljs-built_in">export</span> --connect jdbc:mysql://hadoop:3306/telecom --username root --password root --table F_HTTP_APP_HOST --export-dir <span class="hljs-string">&#x27;/user/hive/warehouse/telecom.db/f_http_app_host/000000_0&#x27;</span> -m 1 --fields-terminated-by <span class="hljs-string">&#x27;|&#x27;</span><br><span class="hljs-comment"># 导出受欢迎的APP的数据</span><br>sqoop <span class="hljs-built_in">export</span> --connect jdbc:mysql://hadoop:3306/telecom --username root --password root --table D_H_HTTP_APPTYPE --export-dir <span class="hljs-string">&#x27;/user/hive/warehouse/telecom.db/d_h_http_apptype/000000_1&#x27;</span> -m 1 --fields-terminated-by <span class="hljs-string">&#x27;|&#x27;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>在实际开发过程中，在将数据处理完导出到MySQL之后，需要对数据进行直观展现，这个过程称之为可视化</li><li>目前市面上的可视化工具分为两类：BI工具和开源可视化工具。BI工具大部分都是收费的，所以在实际开发中，中小型公司一般会采用BI工具来降低开发成本，但是大型公司一般会使用开源的可视化框架或者会自定义可视化框架</li></ol><h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ol><li>HBase由Yahoo!开发后来贡献给了Apache的一个基于Hadoop的、分布式的、可扩展的、能够存储到大量数据的非关系型数据库</li><li>当需要对大量的数据进行随机且实时的读写的时候，那么此时可以考虑使用HBase</li><li>HBase能够管理非常大的表 - billions of rows X millions of columns(十亿行*百万列)</li><li>HBase模仿了Google的BigTable来实现的，因此HBase和BigTable的实现原理一模一样，只是二者在底层的实现语言不一样。BigTable使用的是C语言，HBase使用的Java实现</li><li>HBase依赖于HDFS来完成数据的存储过程</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h3><ol><li><p>进入&#x2F;opt目录下，上传Zookeeper的安装包</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt<br>rz<br><span class="hljs-comment"># 选择上传Zookeeper的安装包</span><br></code></pre></div></td></tr></table></figure></li><li><p>解压</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">tar -xvf apache-zookeeper-3.5.7-bin.tar.gz<br></code></pre></div></td></tr></table></figure></li><li><p>重命名</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> apache-zookeeper-3.5.7-bin zookeeper-3.5.7<br></code></pre></div></td></tr></table></figure></li><li><p>进入Zookeeper的配置目录</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> zookeeper-3.5.7/conf/<br></code></pre></div></td></tr></table></figure></li><li><p>编辑属性文件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 复制文件</span><br><span class="hljs-built_in">cp</span> zoo_sample.cfg zoo.cfg<br><span class="hljs-comment"># 编辑文件</span><br>vim zoo.cfg<br><span class="hljs-comment"># 修改属性</span><br>dataDir=/opt/zookeeper-3.5.7/tmp<br><span class="hljs-comment"># 在文件末尾添加</span><br>server.1=192.168.233.133:2888:3888<br>server.2=192.168.233.134:2888:3888<br>server.3=192.168.233.135:2888:3888<br></code></pre></div></td></tr></table></figure></li><li><p>回到Zookeeper安装目录下，创建tmp目录</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 回到Zookeeper安装目录下</span><br><span class="hljs-built_in">cd</span> ..<br><span class="hljs-comment"># 新建tmp目录</span><br><span class="hljs-built_in">mkdir</span> tmp<br><span class="hljs-comment"># 进到tmp中</span><br><span class="hljs-built_in">cd</span> tmp<br></code></pre></div></td></tr></table></figure></li><li><p>指定当前节点的编号</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑文件</span><br>vim myid<br><span class="hljs-comment"># 在文件中添加在zoo.cfg文件中指定的编号</span><br></code></pre></div></td></tr></table></figure></li><li><p>回到&#x2F;opt目录下，远程拷贝给其他两个节点</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt<br>scp -r zookeeper-3.5.7 root@hadoop02:<span class="hljs-variable">$PWD</span><br>scp -r zookeeper-3.5.7 root@hadoop03:<span class="hljs-variable">$PWD</span><br></code></pre></div></td></tr></table></figure></li><li><p>修改第二个和第三个节点上的myid</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/zookeeper-3.5.7/tmp/<br>vim myid<br><span class="hljs-comment"># 修改对应的编号</span><br></code></pre></div></td></tr></table></figure></li><li><p>修改环境变量</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim /etc/profile.d/zookeeperhome.sh<br><span class="hljs-comment"># 在文件中添加</span><br><span class="hljs-built_in">export</span> ZOOKEEPER_HOME=/opt/zookeeper-3.5.7<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$ZOOKEEPER_HOME</span>/bin<br><span class="hljs-comment"># 保存退出，重新生效</span><br><span class="hljs-built_in">source</span> /etc/profile.d/zookeeperhome.sh<br></code></pre></div></td></tr></table></figure></li><li><p>启动Zookeeper</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">zkServer.sh start<br></code></pre></div></td></tr></table></figure></li><li><p>查看Zookeeper的状态</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">zkServer.sh status<br><span class="hljs-comment"># 出现1个leader+2个follower就表示Zookeeper配置成功</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="HBase安装"><a href="#HBase安装" class="headerlink" title="HBase安装"></a>HBase安装</h3><ol><li><p>进入&#x2F;opt目录下，上传HBase的安装包</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /optrz# 选择HBase安装包上传<br></code></pre></div></td></tr></table></figure></li><li><p>解压</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">tar -xvf hbase-2.4.2-bin.tar.gz<br></code></pre></div></td></tr></table></figure></li><li><p>进入HBase的配置目录</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> hbase-2.4.2/conf/<br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim hbase-env.sh# 在文件中添加<span class="hljs-built_in">export</span> JAVA_HOME=/opt/jdk1.8export HBASE_MANAGES_ZK=<span class="hljs-literal">false</span># 保存退出，重新生效<span class="hljs-built_in">source</span> hbase-env.sh<br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim hbase-site.xml<br></code></pre></div></td></tr></table></figure><p>在这个文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定HBase在HDFS上的存储位置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop:9000/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--开启HBase的分布式--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--配置Zookeeper的连接地址--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:2181,hadoop02:2181,hadoop03:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--关闭容量流机制--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--指定WAL的存放地址--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.wal.provider<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>filesystem<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim regionservers <span class="hljs-comment"># 在这个文件中添加三台主机的主机名</span><br></code></pre></div></td></tr></table></figure></li><li><p>回到opt目录下，远程拷贝给其他两个节点</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /optscp -r hbase-2.4.2 root@hadoop02:<span class="hljs-variable">$PWDscp</span> -r hbase-2.4.2 root@hadoop03:<span class="hljs-variable">$PWD</span><br></code></pre></div></td></tr></table></figure></li><li><p>配置变量(三台虚拟机)</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim /etc/profile.d/hbasehome.sh# 在文件中添加<span class="hljs-built_in">export</span> HBASE_HOME=/opt/hbase-2.4.2export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HBASE_HOME</span>/bin# 保存退出，重新生效<span class="hljs-built_in">source</span> /etc/profile.d/hbasehome.sh<br></code></pre></div></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hbase version<br></code></pre></div></td></tr></table></figure></li><li><p>启动HBase</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">start-hbase.sh<br></code></pre></div></td></tr></table></figure></li><li><p>通过jps查看，如果三台虚拟机上出现了1个HMaster+3个HRegionServer那么表示启动成功</p></li><li><p>通过浏览器输入IP:16010来访问HBase的主页面</p></li></ol><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>Rowkey：行键<ol><li>在HBase中，不同于传统的关系型数据库，没有主键的概念，取而代之的是行键</li><li>HBase在定义表的时候，不需要定义行键列，而是在添加数据的时候手动指定行键</li></ol></li><li>Column Family：列族&#x2F;列簇<ol><li>在HBase中，强调列族不强调列，即在定义表的时候需要同时定义好列族，但是可以不定义列，列在使用过程中动态增删</li><li>一个表中，至少包含1个列族，理论上可以包含多个列族，列族的数量并不限制；但是到了实际开发中，一般而言，一个表中的列族数量不会超过3个</li><li>一个列族中可以包含0到多个列，列可以实现动态增删</li></ol></li></ol><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><ol><li>HBase本身作为一个非关系型数据库，本身不支持SQL，提供了一套单独的命令</li><li>HBase可以存储稀疏的数据，因此适合于存储结构化、半结构化数据</li><li>append在添加数据的时候，如果是同一列，那么会在原来的值上进行拼接</li><li>put表示修改数据，但是在修改过程中，如果列名写错，那么put命令会认为是新添了一列而不是去检查列名</li></ol><h3 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>hbase shell</td><td>进入HBase的客户端</td></tr><tr><td>processlist</td><td>查看所有在运行的任务</td></tr><tr><td>status</td><td>查看HBase的运行状态</td></tr><tr><td>version</td><td>查看HBase的版本</td></tr><tr><td>whoami</td><td>当前当前的用户</td></tr><tr><td>create ‘person’, {NAME &#x3D;&gt; ‘basic’}, {NAME &#x3D;&gt; ‘info’}, {NAME &#x3D;&gt; ‘other’}<br/>或者<br/>create ‘person’, ‘basic’, ‘info’, ‘other’</td><td>建立person表，包含3个列族：basic、info和other</td></tr><tr><td>append ‘person’, ‘p1’, ‘basic:name’, ‘Bruce’</td><td>在person表中添加行键为p1的数据</td></tr><tr><td>get ‘person’, ‘p1’</td><td>获取p1行键整个一行的数据</td></tr><tr><td>get ‘person’, ‘p1’, {COLUMN &#x3D;&gt; ‘basic’}<br/>或者<br/>get ‘person’, ‘p1’, ‘basic’</td><td>查看指定行键指定列族的数据</td></tr><tr><td>get ‘person’, ‘p1’, {COLUMN &#x3D;&gt; [‘basic’, ‘info’]}<br/>或者<br/>get ‘person’, ‘p1’, ‘basic’, ‘info’</td><td>查看指定行键多个列族的数据</td></tr><tr><td>get ‘person’, ‘p1’, {COLUMN &#x3D;&gt; ‘basic:name’}<br/>或者<br/>get ‘person’, ‘p1’, ‘basic:name’</td><td>查看指定行间指定列的数据</td></tr><tr><td>scan ‘person’</td><td>扫描整表</td></tr><tr><td>scan ‘person’, {COLUMNS &#x3D;&gt; ‘basic’}</td><td>扫描指定列族</td></tr><tr><td>scan ‘person’, {COLUMNS &#x3D;&gt; ‘basic:name’}</td><td>扫描指定列</td></tr><tr><td>put ‘person’, ‘p3’, ‘basic:name’, ‘Darl’</td><td>修改数据</td></tr><tr><td>delete ‘person’, ‘p3’, ‘basic:naem’</td><td>删除指定列</td></tr><tr><td>deleteall ‘person’, ‘p2’</td><td>删除一行数据</td></tr><tr><td>deleteall ‘person’, ‘p3’, ‘basic:name’</td><td>删除指定列</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Flume</tag>
      
      <tag>Hive</tag>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第十天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%8D%81%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="电信日志分析"><a href="#电信日志分析" class="headerlink" title="电信日志分析"></a>电信日志分析</h1><h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>在实际过程中，流量日志并不是集中在一台服务器上而是放在了多台服务器上，此时需要考虑将数据先从多台服务器上收集过来其中到HDFS上</li><li>在收集日志的时候，可以考虑使用日志收集框架Flume、Scribe等</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>将三台虚拟机启动，将后两台虚拟机作为日志产生的服务器，第一台虚拟机作为日志进行汇聚的服务器</p></li><li><p>在第二台和第三台虚拟机上，上传日志文件</p></li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt<br><span class="hljs-built_in">mkdir</span> telecomlog<br><span class="hljs-built_in">cd</span> telecomlog/<br>rz<br><span class="hljs-comment"># 上传日志文件</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>第二台和第三台虚拟机上做日志收集</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/flume-1.9.0/data<br>vim telecomlog.conf<br></code></pre></div></td></tr></table></figure><p>  在文件中添加</p>  <figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Source</span><br><span class="hljs-comment"># 如果监听的目录下产生了新的文件</span><br><span class="hljs-comment"># 那么需要将新的文件的内容来自动收集</span><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">spooldir</span><br><span class="hljs-comment"># 指定要监听的目录</span><br><span class="hljs-attr">a1.sources.s1.spoolDir</span> = <span class="hljs-string">/opt/telecomlog</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Channel</span><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-attr">a1.channels.c1.capacity</span> = <span class="hljs-string">1000</span><br><span class="hljs-attr">a1.channels.c1.transactionCapacity</span> = <span class="hljs-string">1000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Sink</span><br><span class="hljs-comment"># 需要将收集到的数据汇聚到第一个节点上</span><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sinks.k1.hostname</span> = <span class="hljs-string">hadoop</span><br><span class="hljs-attr">a1.sinks.k1.port</span> = <span class="hljs-string">8090</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 绑定</span><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>在第一台虚拟机上来汇聚数据到HDFS上</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/flume-1.9.0/data/<br>vim telecomlog.conf<br></code></pre></div></td></tr></table></figure><p>  在文件中添加</p>  <figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Source</span><br><span class="hljs-comment"># 接收其他节点发送来的数据</span><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-comment"># 指定要监听的主机</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 指定要监听的端口</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><span class="hljs-comment"># 添加一个拦截器用于标记时间戳</span><br><span class="hljs-attr">a1.sources.s1.interceptors</span> = <span class="hljs-string">i1</span><br><span class="hljs-attr">a1.sources.s1.interceptors.i1.type</span> = <span class="hljs-string">timestamp</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Channel</span><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-attr">a1.channels.c1.capacity</span> = <span class="hljs-string">10000</span><br><span class="hljs-attr">a1.channels.c1.transactionCapacity</span> = <span class="hljs-string">1000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Sink</span><br><span class="hljs-comment"># 将数据写到HDFS上</span><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">hdfs</span><br><span class="hljs-comment"># 指定在HDFS上的存储位置</span><br><span class="hljs-attr">a1.sinks.k1.hdfs.path</span> = <span class="hljs-string">hdfs://hadoop:9000/telecomlog/reporttime=%Y-%m-%d</span><br><span class="hljs-comment"># 指定文件在HDFS上的存储类型</span><br><span class="hljs-attr">a1.sinks.k1.hdfs.fileType</span> = <span class="hljs-string">DataStream</span><br><span class="hljs-comment"># 指定文件的滚动间隔时间</span><br><span class="hljs-attr">a1.sinks.k1.hdfs.rollInterval</span> = <span class="hljs-string">3600</span><br><span class="hljs-attr">a1.sinks.k1.hdfs.rollSize</span> = <span class="hljs-string">0</span><br><span class="hljs-attr">a1.sinks.k1.hdfs.rollCount</span> = <span class="hljs-string">0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 绑定</span><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>在第一个虚拟机上启动HDFS</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">start-dfs.sh<br></code></pre></div></td></tr></table></figure><ol start="6"><li>先启动第一个虚拟机上的Flume</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f telecomlog.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure><ol start="7"><li>再启动第二个虚拟机上的Flume</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f telecomlog.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ol><li>将数据收集到HDFS上之后，需要对数据进行处理，但是数据的字段相对比较多，并不是所有的字段都需要处理，那么此时就需要对原始数据进行分析，这个过程称之为数据清洗</li><li>数据清洗的时候，如果过程相对简单，那么可以考虑使用SQL工具(例如Hive，Kettle等)来清洗，如果数据处理过程相对比较复杂，那么可以考虑使用计算框架(例如MapReduce，Spark，Flink等)来清洗处理</li></ol><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>需要先开启YARN</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">start-yarn.sh<br></code></pre></div></td></tr></table></figure><ol start="2"><li>启动Hive后台进程</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hive --service hiveserver2 &amp;<br>hive --service metastore &amp;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>启动Hive</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hive<br></code></pre></div></td></tr></table></figure><ol start="4"><li>在Hive建库建表</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 建库<br><span class="hljs-keyword">create</span> database telecom;<br># 使用这个库<br>use telecom;<br># 建表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">EXTERNAL</span> <span class="hljs-keyword">table</span> telecom (a1 string, a2 string, a3 string, a4 string, a5 string, a6 string, a7 string, a8 string, a9 string, a10 string, a11 string, a12 string, a13 string, a14 string, a15 string, a16 string, a17 string, a18 string, a19 string, a20 string, a21 string, a22 string, a23 string, a24 string, a25 string, a26 string, a27 string, a28 string, a29 string, a30 string, a31 string, a32 string, a33 string, a34 string, a35 string, a36 string, a37 string, a38 string, a39 string, a40 string, a41 string, a42 string, a43 string, a44 string, a45 string, a46 string, a47 string, a48 string, a49 string, a50 string, a51 string, a52 string, a53 string, a54 string, a55 string, a56 string, a57 string, a58 string, a59 string, a60 string, a61 string, a62 string, a63 string, a64 string, a65 string, a66 string, a67 string, a68 string, a69 string, a70 string, a71 string, a72 string, a73 string, a74 string, a75 string, a76 string, a77 string) <br>partitioned <span class="hljs-keyword">by</span> (reporttime string) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;|&#x27;</span> stored <span class="hljs-keyword">as</span> textfile location <span class="hljs-string">&#x27;/telecomlog&#x27;</span>;<br># 修复分区<br>msck repair <span class="hljs-keyword">table</span> telecom;<br># 抽样数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> telecom <span class="hljs-keyword">tablesample</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>);<br></code></pre></div></td></tr></table></figure><ol start="5"><li>原表中有78个字段，但是对需求分析真正有用的只有23个字段，此时需要从这78个字段中将这23个字段抽取出来 - 清洗表</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 建立表<br><span class="hljs-keyword">create table</span> dataclear(reporttime string, appType <span class="hljs-type">bigint</span>, appSubtype <span class="hljs-type">bigint</span>, userIp string, userPort <span class="hljs-type">bigint</span>, appServerIP string, appServerPort <span class="hljs-type">bigint</span>, host string, cellid string, appTypeCode <span class="hljs-type">bigint</span>, interruptType String, transStatus <span class="hljs-type">bigint</span>, trafficUL <span class="hljs-type">bigint</span>, trafficDL <span class="hljs-type">bigint</span>, retranUL <span class="hljs-type">bigint</span>, retranDL <span class="hljs-type">bigint</span>, procdureStartTime <span class="hljs-type">bigint</span>, procdureEndTime <span class="hljs-type">bigint</span>)<span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;|&#x27;</span>;<br># 需要从原始表中来抽取字段<br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> dataclear <span class="hljs-keyword">select</span> concat(reporttime, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;00:00:00&#x27;</span>), a23, a24, a27, a29, a31, a33, a59, a17, a19, a68, a55, a34, a35, a40, a41, a20, a21 <span class="hljs-keyword">from</span> telecom;<br># 抽样数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dataclear <span class="hljs-keyword">tablesample</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>);<br></code></pre></div></td></tr></table></figure><ol start="6"><li>抽取完字段之后，需要对数据进行整理，例如需要对数据进行合并、去重、转换、补齐、舍弃等 - 对数据整理，建立一个事实表</li></ol><table><thead><tr><th>序号</th><th>字段</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>reportTime</td><td>datetime</td><td>小时 时间片 default ‘YYYY-MM-DD HH24:MI:SS’</td></tr><tr><td>1</td><td>appType</td><td>int</td><td>应用大类</td></tr><tr><td>2</td><td>appSubtype</td><td>int</td><td>应用小类</td></tr><tr><td>3</td><td>userIP</td><td>varchar(20)</td><td>用户IP</td></tr><tr><td>4</td><td>userPort</td><td>int</td><td>用户端口</td></tr><tr><td>5</td><td>appServerIP</td><td>varchar(20)</td><td>服务器IP</td></tr><tr><td>6</td><td>appServerPort</td><td>int</td><td>服务器端口</td></tr><tr><td>7</td><td>host</td><td>varchar(50)</td><td>域名</td></tr><tr><td>8</td><td>cellid</td><td>varchar(20)</td><td>小区ID</td></tr><tr><td>9</td><td>attempts</td><td>int(20)</td><td>尝试次数</td></tr><tr><td>10</td><td>accepts</td><td>int(20)</td><td>接受次数</td></tr><tr><td>11</td><td>trafficUL</td><td>int(20)</td><td>上行流量</td></tr><tr><td>12</td><td>trafficDL</td><td>int(20)</td><td>下行流量</td></tr><tr><td>13</td><td>retranUL</td><td>int(20)</td><td>重传上行报文数</td></tr><tr><td>14</td><td>retranDL</td><td>int(20)</td><td>重传下行报文数</td></tr><tr><td>15</td><td>failCount</td><td>int(20)</td><td>延时失败次数</td></tr><tr><td>16</td><td>transDelay</td><td>int(20)</td><td>传输时延*</td></tr></tbody></table>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 构建一个事实表<br><span class="hljs-keyword">create table</span> f_http_app_host(reporttime string, appType <span class="hljs-type">bigint</span>, appSubtype <span class="hljs-type">bigint</span>, userIP string, userPort <span class="hljs-type">int</span>, appServerIP string, appServerPort <span class="hljs-type">int</span>, host string, cellid string, attempts <span class="hljs-type">bigint</span>, accepts <span class="hljs-type">bigint</span>, trafficUL <span class="hljs-type">bigint</span>, trafficDL <span class="hljs-type">bigint</span>, retranUL <span class="hljs-type">bigint</span>, retranDL <span class="hljs-type">bigint</span>, failCount <span class="hljs-type">bigint</span>, transDelay <span class="hljs-type">bigint</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;|&#x27;</span> stored <span class="hljs-keyword">as</span> textfile;<br># 抽取字段<br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> f_http_app_host <span class="hljs-keyword">select</span> reporttime, appType, appSubtype, userIp, userPort, appServerIP, appServerPort, host,  if(cellid <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span>, &quot;000000000&quot;, cellid), if(appTypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), if(appTypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span> <span class="hljs-keyword">and</span> find_in_set(transStatus, &quot;10,11,12,13,14,15,32,33,34,35,36,37,38,48,49,50,51,52,53,54,55,199,200,201,202,203,204,205,206,302,304,306&quot;)<span class="hljs-operator">!=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> interruptType <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), if(apptypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span>, trafficUL, <span class="hljs-number">0</span>),  if(apptypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span>, trafficDL, <span class="hljs-number">0</span>),  if(apptypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span>, retranUL, <span class="hljs-number">0</span>),  if(apptypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span>, retranDL, <span class="hljs-number">0</span>),  if(appTypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span> <span class="hljs-keyword">and</span> transStatus <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> interruptType <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), if(appTypeCode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">103</span>,  procdureEndTime <span class="hljs-operator">-</span> procdureStartTime, <span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dataclear;<br># 数据抽样<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> f_http_app_host <span class="hljs-keyword">tablesample</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>);<br></code></pre></div></td></tr></table></figure><ol start="7"><li>根据不同需求将数据来抽取出来，例如分析各个APP的受欢迎程度</li></ol><table><thead><tr><th>序号</th><th>字段</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>hourid</td><td>datetime</td><td>小时时间片</td></tr><tr><td>1</td><td>appType</td><td>int</td><td>应用大类</td></tr><tr><td>2</td><td>appSubtype</td><td>int</td><td>应用小类</td></tr><tr><td>3</td><td>attempts</td><td>int(20)</td><td>尝试次数</td></tr><tr><td>4</td><td>accepts</td><td>int(20)</td><td>接受次数</td></tr><tr><td>5</td><td>succRatio</td><td>double</td><td>尝试成功率</td></tr><tr><td>6</td><td>trafficUL</td><td>int(20)</td><td>上行流量</td></tr><tr><td>7</td><td>trafficDL</td><td>int(20)</td><td>下行流量</td></tr><tr><td>8</td><td>totalTraffic</td><td>int(20)</td><td>总流量</td></tr><tr><td>9</td><td>retranUL</td><td>int(20)</td><td>重传上行报文数</td></tr><tr><td>10</td><td>retranDL</td><td>int(20)</td><td>重传下行报文数</td></tr><tr><td>11</td><td>retranTraffic</td><td>int(20)</td><td>重传报文数据</td></tr><tr><td>12</td><td>failCount</td><td>int(20)</td><td>延时失败次数</td></tr><tr><td>13</td><td>transDelay</td><td>int(20)</td><td>传输时延</td></tr></tbody></table>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 建立受欢迎的APP的表<br><span class="hljs-keyword">create table</span> D_H_HTTP_APPTYPE(hourid string, appType <span class="hljs-type">bigint</span>, appSubtype <span class="hljs-type">bigint</span>, attempts <span class="hljs-type">bigint</span>, accepts <span class="hljs-type">bigint</span>, succRatio <span class="hljs-keyword">double</span>, trafficUL <span class="hljs-type">bigint</span>, trafficDL <span class="hljs-type">bigint</span>, totalTraffic <span class="hljs-type">bigint</span>, retranUL <span class="hljs-type">bigint</span>, retranDL <span class="hljs-type">bigint</span>, retranTraffic <span class="hljs-type">bigint</span>, failCount <span class="hljs-type">bigint</span>, transDelay <span class="hljs-type">bigint</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;|&#x27;</span> stored <span class="hljs-keyword">as</span> textfile;<br># 从事实表中来抽取字段到要分析的表中<br><span class="hljs-keyword">insert</span> overwrite <span class="hljs-keyword">table</span> D_H_HTTP_APPTYPE <span class="hljs-keyword">select</span> reporttime, apptype, appsubtype, <span class="hljs-built_in">sum</span>(attempts), <span class="hljs-built_in">sum</span>(accepts), round(<span class="hljs-built_in">sum</span>(accepts)<span class="hljs-operator">/</span><span class="hljs-built_in">sum</span>(attempts), <span class="hljs-number">2</span>), <span class="hljs-built_in">sum</span>(trafficUL), <span class="hljs-built_in">sum</span>(trafficDL), <span class="hljs-built_in">sum</span>(trafficUL)<span class="hljs-operator">+</span><span class="hljs-built_in">sum</span>(trafficDL), <span class="hljs-built_in">sum</span>(retranUL), <span class="hljs-built_in">sum</span>(retranDL), <span class="hljs-built_in">sum</span>(retranUL)<span class="hljs-operator">+</span><span class="hljs-built_in">sum</span>(retranDL), <span class="hljs-built_in">sum</span>(failCount), <span class="hljs-built_in">sum</span>(transDelay)<span class="hljs-keyword">from</span> f_http_app_host <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> reporttime, apptype, appsubtype;<br># 数据抽样<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> D_H_HTTP_APPTYPE <span class="hljs-keyword">tablesample</span>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>);<br># 获取最受欢迎的APP <span class="hljs-operator">-</span> 统计每一个APP的流量<br><span class="hljs-keyword">select</span> appSubtype, <span class="hljs-built_in">sum</span>(totalTraffic) <span class="hljs-keyword">as</span> total <span class="hljs-keyword">from</span> D_H_HTTP_APPTYPE <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> appSubtype sort <span class="hljs-keyword">by</span> total <span class="hljs-keyword">desc</span> limit <span class="hljs-number">5</span>;<br></code></pre></div></td></tr></table></figure><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ol><li>在实际过程中，在对数据处理完成之后，一般需要对数据进行可视化操作</li><li>如果在进行可视化操作的时候使用的是一些基于Hadoop的BI工具，那么可以直接从HDFS上来读取数据；如果使用开源的可视化工具，那么此时需要需要将数据导出到数据库中</li></ol><h3 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h3><ol><li><p>Sqoop是Apache提供的一套用于进行数据导入导出的工具，可以在HDFS和数据库之间实现数据的导入和导出效果</p></li><li><p>安装步骤</p></li><li><p>进入&#x2F;opt目录下，上传sqoop的安装包</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt<br>rz<br><span class="hljs-comment"># 选择Sqoop的安装包上传</span><br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>解压</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">tar -xvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>重命名</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> sqoop-1.4.7.bin__hadoop-2.6.0 sqoop-1.4.7<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>进入Sqoop的配置目录</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> sqoop-1.4.7/conf/<br></code></pre></div></td></tr></table></figure></code></pre><ol start="5"><li>编辑文件</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 复制文件</span><br><span class="hljs-built_in">cp</span> sqoop-env-template.sh sqoop-env.sh<br><span class="hljs-comment"># 编辑文件</span><br>vim sqoop-env.sh<br><span class="hljs-comment"># 在文件中添加</span><br><span class="hljs-built_in">export</span> HADOOP_COMMON_HOME=/opt/hadoop-3.1.3<br><span class="hljs-built_in">export</span> HADOOP_MAPRED_HOME=/opt/hadoop-3.1.3<br><span class="hljs-built_in">export</span> HIVE_HOME=/opt/hive-3.1.2<br><span class="hljs-comment"># 保存退出，重新生效</span><br><span class="hljs-built_in">source</span> sqoop-env.sh<br></code></pre></div></td></tr></table></figure></code></pre><ol start="6"><li>进入Sqoop的lib目录，将MySQL的连接驱动包放到这个目录下</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ../lib<br><span class="hljs-comment"># 复制</span><br><span class="hljs-built_in">cp</span> /opt/hive-3.1.2/lib/mysql-connector-java-5.1.27.jar ./<br></code></pre></div></td></tr></table></figure><ol start="7"><li>编辑环境变量</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim /etc/profile.d/sqoophome.sh<br><span class="hljs-comment"># 在文件中添加</span><br><span class="hljs-built_in">export</span> SQOOP_HOME=/opt/sqoop-1.4.7<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$SQOOP_HOME</span>/bin<br><span class="hljs-comment"># 保存退出，重新生效</span><br><span class="hljs-built_in">source</span> /etc/profile.d/sqoophome.sh<br><span class="hljs-comment"># 查看Sqoop的版本</span><br>sqoop version<br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>Sqoop基本命令</p></li><li><p>查看MySQL中已经存在的库</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sqoop list-databases --connect jdbc:mysql://hadoop:3306 --username root --password root<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>查看MySQL指定库中的指定的表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sqoop list-tables --connect jdbc:mysql://hadoop:3306/hive --username root --password root<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>将HDFS上的数据导出到MySQL中</li></ol><div class="hljs code-wrapper"><pre><code>1. 在MySQL中建表    <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table orders(id int primary key, orderdate varchar(10), productid int, num int);<br></code></pre></div></td></tr></table></figure>  2. 将HDFS上的数据导出到MySQL中    <figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sqoop <span class="hljs-built_in">export</span> --connect jdbc:mysql://hadoop:3306/test --username root --password root --export-dir <span class="hljs-string">&#x27;/txt/order.txt&#x27;</span> --table orders -m 1 --fields-terminated-by <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure>  </code></pre><ol start="4"><li>将MySQL中的数据导入到HDFS上</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">sqoop import --connect jdbc:mysql://hadoop:3306/test --username root --password root --table orders --target-dir <span class="hljs-string">&#x27;/sqoop/orders&#x27;</span> --fields-terminated-by <span class="hljs-string">&#x27;\t&#x27;</span> -m 1;<br></code></pre></div></td></tr></table></figure></code></pre>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Flume</tag>
      
      <tag>Hive</tag>
      
      <tag>Sqoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第九天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B9%9D%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B9%9D%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li><p>窗口函数的作用是用于限制要处理的数据量的大小</p></li><li><p>语法</p></li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">分析函数 <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> 字段 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段 <span class="hljs-keyword">rows</span> <span class="hljs-keyword">between</span> 起始范围 <span class="hljs-keyword">and</span> 结束范围)<br></code></pre></div></td></tr></table></figure><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><ol><li>原始数据</li></ol>  <figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">jack,2017-01-01,10<br>tony,2017-01-02,15<br>jack,2017-02-03,23<br>tony,2017-01-04,29<br>jack,2017-01-05,46<br>jack,2017-04-06,42<br>tony,2017-01-07,50<br>jack,2017-01-08,55<br>mart,2017-04-08,62<br>mart,2017-04-09,68<br>neil,2017-05-10,12<br>mart,2017-04-11,75<br>neil,2017-06-12,80<br>mart,2017-04-13,94<br></code></pre></div></td></tr></table></figure><ol start="2"><li>建表</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> orders (name string, orderdate string, cost <span class="hljs-keyword">double</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span>;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>加载数据</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/orders.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> orders;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>需求一：查询2017年4月份消费的顾客名单以及2017年4月份产生的总的消费人次</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">over</span>() <span class="hljs-keyword">from</span> orders <span class="hljs-keyword">where</span> <span class="hljs-keyword">year</span>(orderdate) <span class="hljs-operator">=</span> <span class="hljs-number">2017</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">month</span>(orderdate) <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>需求二：获取每一个顾客的消费明细以及每一位顾客的月度消费总额</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">sum</span>(cost) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> name, <span class="hljs-keyword">month</span>(orderdate)) <span class="hljs-keyword">from</span> orders;<br></code></pre></div></td></tr></table></figure><ol start="6"><li>需求三：获取每一个顾客的消费明细以及到当前日期为止的累计消费</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">sum</span>(cost) <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> orderdate <span class="hljs-keyword">rows</span> <span class="hljs-keyword">between</span> unbounded preceding <span class="hljs-keyword">and</span> <span class="hljs-keyword">current</span> <span class="hljs-type">row</span>) <span class="hljs-keyword">from</span> orders;<br></code></pre></div></td></tr></table></figure><ol start="7"><li>需求四：查询顾客的消费明细以及每一次消费之后上一次的消费时间</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">lag</span>(orderdate, <span class="hljs-number">1</span>) <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> orderdate) <span class="hljs-keyword">from</span> orders;<br></code></pre></div></td></tr></table></figure><ol start="8"><li>需求五：获取最早的20%的顾客的消费名单 - 首先要先对数据进行排序，然后将数据分成5个桶，获取第一个桶的数据</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">ntile</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">over</span>(<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> orderdate) <span class="hljs-keyword">as</span> o <span class="hljs-keyword">from</span> orders)tmp <span class="hljs-keyword">where</span> o <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><ol><li>原始数据</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">Charles    Chinese    <span class="hljs-number">87</span><br>Charles    Math    <span class="hljs-number">95</span><br>Charles    English    <span class="hljs-number">68</span><br>Lily    Chinese    <span class="hljs-number">94</span><br>Lily    Math    <span class="hljs-number">56</span><br>Lily    English    <span class="hljs-number">84</span><br>William    Chinese    <span class="hljs-number">64</span><br>William    Math    <span class="hljs-number">86</span><br>William    English    <span class="hljs-number">84</span><br>Vincent    Chinese    <span class="hljs-number">65</span><br>Vincent    Math    <span class="hljs-number">85</span><br>Vincent    English    <span class="hljs-number">78</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>建表语句</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> scores(name string, subject string, score <span class="hljs-type">int</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>加载数据</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/scores&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> scores;<br></code></pre></div></td></tr></table></figure><ol start="4"><li><p>需求一：按学科，对每一个学生的成绩进行降序排序</p></li><li><p>顺次排序</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">row_number</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> subject <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">from</span> scores;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>空位排序</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">rank</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> subject <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">from</span> scores;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>非空位排序</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">dense_rank</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> subject <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">from</span> scores;<br></code></pre></div></td></tr></table></figure></code></pre><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><ol><li><p>在Hive中，类似于MySQL，提供了left join&#x2F;right join&#x2F;inner join&#x2F;full outer join方式。在使用的时候，如果不指定，那么默认使用的是inner join</p></li><li><p>案例</p></li><li><p>建立orders表</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> orders (orderid <span class="hljs-type">int</span>, orderdate string, productid <span class="hljs-type">int</span>, num <span class="hljs-type">int</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span> location <span class="hljs-string">&#x27;/orders&#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建立products表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> products (productid <span class="hljs-type">int</span>, name string, price <span class="hljs-keyword">double</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span> location <span class="hljs-string">&#x27;/products&#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>连接查询</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 左连<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> orders o <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> products p <span class="hljs-keyword">on</span> o.productid <span class="hljs-operator">=</span> p.productid;<br># 右连<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> orders o <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> products p <span class="hljs-keyword">on</span> o.productid <span class="hljs-operator">=</span> p.productid;<br># 内连<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> orders o <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> products p <span class="hljs-keyword">on</span> o.productid <span class="hljs-operator">=</span> p.productid;<br># 全外连接<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> orders o <span class="hljs-keyword">full</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> products p <span class="hljs-keyword">on</span> o.productid <span class="hljs-operator">=</span> p.productid;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>需求：每一天卖了多少钱</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> o.orderdate, <span class="hljs-built_in">sum</span>(o.num <span class="hljs-operator">*</span> p.price) <span class="hljs-keyword">from</span> orders o <span class="hljs-keyword">join</span> products p <span class="hljs-keyword">on</span> o.productid <span class="hljs-operator">=</span> p.productid <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> o.orderdate;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><ol><li><p>如果需要对指定字段来进行查询，那么此时考虑使用where；如果需要对聚合结果进行查询，此时需要使用having</p></li><li><p>案例</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 Apollo 4900<br>1 Billy 5100<br>1 Cary 4800<br>1 Dylan 5000<br>1 Ford 4700<br>2 Apollo 5300<br>2 Billy 4600<br>2 Cary 4700<br>2 Dylan 5100<br>2 Ford 4500<br>3 Apollo 5200<br>3 Billy 4300<br>3 Cary 4600<br>3 Dylan 5200<br>3 Ford 4800<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> salaries (id <span class="hljs-type">int</span>, name string, salary <span class="hljs-keyword">double</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/salaries&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> salaries;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>需求：获取平均工资达到5000的员工</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 方式一：子查询<br><span class="hljs-keyword">select</span> name, avgsalary <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> name, <span class="hljs-built_in">avg</span>(salary) <span class="hljs-keyword">as</span> avgsalary <span class="hljs-keyword">from</span> salaries <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> name)tmp <span class="hljs-keyword">where</span> avgsalary <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5000</span>;<br># 方式二：<span class="hljs-keyword">having</span><br><span class="hljs-keyword">select</span> name, <span class="hljs-built_in">avg</span>(salary) <span class="hljs-keyword">as</span> avgsalary <span class="hljs-keyword">from</span> salaries <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> name <span class="hljs-keyword">having</span> avgsalary <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5000</span>;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="beeline"><a href="#beeline" class="headerlink" title="beeline"></a>beeline</h3><ol><li><p>beeline是Hive提供的一种用于进行远程连接的方式，底层利用了JDBC的方式来进行</p></li><li><p>步骤</p></li><li><p>退出Hive，关闭Hadoop</p></li><li><p>编辑文件</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim /opt/hadoop-3.1.3/etc/hadoop/core-site.xml<br></code></pre></div></td></tr></table></figure>在文件中添加<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>重启Hadoop</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">start-all.sh<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>启动Hive的后台进程</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hive --service hiveserver2 &amp;<br>hive --service metastore &amp;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="5"><li>进行远程连接</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sh"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">beeline -u jdbc:hive2://192.168.233.133:10000/hivedemo -n root<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="SerDe"><a href="#SerDe" class="headerlink" title="SerDe"></a>SerDe</h3><ol><li><p>SerDe(Serializar - Deserializar)是Hive中提供的一套序列化反序列化机制，实际过程中经常使用这个机制来处理一些不规则的数据</p></li><li><p>SerDe在 使用的时候需要指定正则表达式，在正则表达式中需要给定捕获组，通过捕获组来一一对应表中的字段</p></li><li><p>案例</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">192.168.120.23 -- [30/Apr/2018:20:25:32 +0800] &quot;GET /asf.avi HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:32 +0800] &quot;GET /bupper.png HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:32 +0800] &quot;GET /bupper.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /bg-button HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /bbutton.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /asf.jpg HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /tomcat.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /tomcat.png HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /tbutton.png HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /tinput.png HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:33 +0800] &quot;GET /tbg.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:34 +0800] &quot;GET /tomcat.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:34 +0800] &quot;GET /bg.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:34 +0800] &quot;GET /bg-button.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:34 +0800] &quot;GET /bg-input.css HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:34 +0800] &quot;GET /bd-input.png HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:34 +0800] &quot;GET /bg-input.png HTTP/1.1&quot; 304 -<br>192.168.120.23 -- [30/Apr/2018:20:25:34 +0800] &quot;GET /music.mp3 HTTP/1.1&quot; 304 -<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>方式一：不使用SerDe</li></ol><div class="hljs code-wrapper"><pre><code>1. 需要先创建临时表用于存储数据<figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> logs_tmp(log string);<br></code></pre></div></td></tr></table></figure>2. 将数据加载到临时表中<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/tomcat.log&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> logs_tmp;<br></code></pre></div></td></tr></table></figure>3. 创建表用于存储解析之后的结果<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> logs(ip string, logdate string, timezone string, request_Way string, resource string, protocol string, stateid <span class="hljs-type">int</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure>4. 解析数据<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> <span class="hljs-keyword">table</span> logs <span class="hljs-keyword">select</span> arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>], arr[<span class="hljs-number">2</span>],arr[<span class="hljs-number">3</span>], arr[<span class="hljs-number">4</span>], arr[<span class="hljs-number">5</span>], <span class="hljs-built_in">cast</span>(arr[<span class="hljs-number">6</span>] <span class="hljs-keyword">as</span> <span class="hljs-type">int</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> split(regexp_replace(log, <span class="hljs-string">&#x27;(.*) \-\- \\[(.*) (.*)\\] \&quot;(.*) (.*) (.*)\&quot; (.*) \-&#x27;</span>, <span class="hljs-string">&#x27;$1 $2 $3 $4 $5 $6 $7&#x27;</span>), <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">as</span> arr <span class="hljs-keyword">from</span> logs_tmp)tmp;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>方式二：使用SerDe</li></ol><div class="hljs code-wrapper"><pre><code>1. 建表用于管理数据<figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> logs(ip string, logdate string, timezone string, request_way string, resource string, protocol string, stateid <span class="hljs-type">int</span>) <span class="hljs-type">row</span> format serde <span class="hljs-string">&#x27;org.apache.hadoop.hive.serde2.RegexSerDe&#x27;</span> <span class="hljs-keyword">with</span> serdeproperties (&quot;input.regex&quot; <span class="hljs-operator">=</span> &quot;(.*) \-\- \\[(.*) (.*)\\] \&quot;(.<span class="hljs-operator">*</span>) (.<span class="hljs-operator">*</span>) (.<span class="hljs-operator">*</span>)\&quot; (.*) \-&quot;) stored <span class="hljs-keyword">as</span> textfile;<br></code></pre></div></td></tr></table></figure>2. 加载数据<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/tomcat.log&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> logs;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><ol><li><p>视图只能读(select)不能写(insert)，需要从原来的表中来抽取字段构成视图 - 组建视图的目的是为了提高查询效率</p></li><li><p>视图分为物化视图和虚拟视图：如果将抽取出来的视图存储到磁盘上，此时这种视图称之为物化视图；如果将抽取出来的视图维系在内存中，此时这种视图称之为虚拟视图</p></li><li><p>Hive只支持虚拟视图，不支持物化视图</p></li><li><p>建立视图</p></li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> logs_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> ip, logdate, resource <span class="hljs-keyword">from</span> logs;<br></code></pre></div></td></tr></table></figure><ol start="5"><li><p>在建立视图的时候，并没有指定封装的select语句，当第一次使用视图的时候，才会触发这个封装的select语句</p></li><li><p>删除视图</p></li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> logs_view;<br></code></pre></div></td></tr></table></figure><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><ol><li>Hive将数据最终以文件的形式存储到HDFS上，在存储的时候可以采取不同的文件格式</li><li>如果不指定，那么Hive默认会将数据以textfile(文本)来存储，在text格式下，不支持update和delete操作</li><li>Hive还支持orc和parquet格式，不同于textfile格式，orc和parquet格式采用的是物理列逻辑行的格式来存储数据 - 即意味着orc和parquet在存储数据的时候是以列为单位来进行存储。orc和parquet格式可以采取更好的压缩方式，同时orc和parquet支持update和delete，但是update和delete的效率非常低</li></ol><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol><li><p>不同于MySQL，Hive中提供了两种不同的排序方式：order by和sort by</p></li><li><p>案例</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">3 Max 89<br>1 Eric 89<br>3 Paul 82<br>1 Hank 95<br>2 Larry 74<br>1 Henry 84<br>2 Justin 82<br>3 Tim 85<br>2 ken 84<br>1 Ivan 85<br>3 Nick 84<br>2 Leo 82<br>2 Mars 86<br>1 Jim 74<br>3 Reed 81<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表管理数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> scores(class <span class="hljs-type">int</span>, name string, score <span class="hljs-type">int</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/scores&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> scores;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>Hive会将SQL转化为MapReduce程序来执行 - 在MapReduce中，默认只有1个ReduceTask - 在只有1个ReduceTask的前提下，order by和sort by没有区别</li></ol><div class="hljs code-wrapper"><pre><code>1. order by排序<figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite directory <span class="hljs-string">&#x27;/result/orderby1&#x27;</span> <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> scores <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>;<br></code></pre></div></td></tr></table></figure>2. sort by排序<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite directory <span class="hljs-string">&#x27;/result/sortby1&#x27;</span> <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> scores sort <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="5"><li>设置多个ReduceTask，通过命令<code>set mapred.reduce.tasks = 3;</code>来设置 - order by忽略ReduceTask的数量直接对数据进行整体的排序，sort by则是将数据分配到3个ReduceTask中，然后再在每一个ReduceTask内部进行排序</li></ol><div class="hljs code-wrapper"><pre><code>1. order by排序<figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite directory <span class="hljs-string">&#x27;/result/orderby2&#x27;</span> <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> scores <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>;<br></code></pre></div></td></tr></table></figure>2. sort by排序<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> overwrite directory <span class="hljs-string">&#x27;/result/sortby2&#x27;</span> <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> scores sort <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="6"><li>需求：分班级，在每一个班级内将学生按照分数进行降序排序</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 方式一：可以使用窗口函数<br><span class="hljs-keyword">insert</span> overwrite directory <span class="hljs-string">&#x27;/result/over&#x27;</span> <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">rank</span>() <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> class <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">from</span> scores;<br># 方式二：使用distribute <span class="hljs-keyword">by</span><br><span class="hljs-keyword">insert</span> overwrite directory <span class="hljs-string">&#x27;/result/distributeby&#x27;</span> <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> scores distribute <span class="hljs-keyword">by</span> class sort <span class="hljs-keyword">by</span> score <span class="hljs-keyword">desc</span>;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="Hive和数据库的区别"><a href="#Hive和数据库的区别" class="headerlink" title="Hive和数据库的区别"></a>Hive和数据库的区别</h3><ol><li>存储介质：Hive将数据以文本形式落地到HDFS的磁盘上，因为HDFS的副本特性，所以Hive天然支持数据的可靠性；MySQL会将数据自动的落地到本地磁盘上，也就意味着如果本地磁盘损坏，数据就可能会产生丢失</li><li>应用场景：Hive适应于OLAP场景，强调对数据进行分析和管理；数据库是用于OLTP场景，强调对数据进行存储以及操作的事务问题 - Hive默认不支持事务</li><li>数据量：Hive依靠于HDFS来存储数据，因此一个Hive集群能够存储和处理的数据量大小实际上是由HDFS集群的大小来决定，HDFS集群可以轻松的扩展到上千台数据，可以存储几十真至于上百PB的数据；数据库主要依靠本地磁盘来存储数据，并且数据库的扩展性相对而言是比较差的(Oracle能够大概最多扩展到100台服务器上)，因此导致数据库存储的数据量相对比较低</li><li>索引机制：Hive3.x不支持索引，在Hive1.x和Hive2.x中支持索引机制，但是不会自动建立索引而是需要用户在使用的时候手动建立索引表并且需要手动更新索引；在数据库中，会自动的针对主键建立索引，并且会自动更新主键索引</li><li>效率：Hive在执行的时候，需要将写的SQL转化为MapReduce程序，之后再交给YARN来执行，因此Hive的效率相对比较低，更适合于<strong>离线分析&#x2F;离线批处理</strong>场景；MySQL在执行的时候，会将写的SQL转化为执行计划树，然后执行过程，此时MySQL的执行效率相对而言是比较高的</li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第八天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%85%AB%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%85%AB%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h3><ol><li><p>拼接</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">baike baidu com<br>mail 163 com<br>music qq com<br>news baidu com<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>在Hive中建表来管理这些数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table webs (app string, company string, kind string) row format delimited fields terminated by &#x27; &#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/webs&#x27; into table webs;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>拼接数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 方式一<br>select concat(app, &#x27;.&#x27;, company, &#x27;.&#x27;, kind) from webs;<br># 方式二<br>select concat_ws(&#x27;.&#x27;, app, company, kind) from webs;<br># 方式三<br>select concat_ws(&#x27;.&#x27;, *) from webs;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li><p>提取年份 ：’2021-07-19’，需要将日期中的年份提取出来</p></li><li><p>方式一：剪切</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select cast(split(&#x27;2021-07-19&#x27;, &#x27;-&#x27;)[0] as int);<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>方式二：提取</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select year(&#x27;2021-07-19&#x27;);<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li><p>提取年份：’2021&#x2F;07&#x2F;19’，需要将日期中的年份提取出来</p></li><li><p>方式一：剪切</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select cast(split(&#x27;2021/07/19&#x27;, &#x27;/&#x27;)[0] as int);<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>方式二：替换</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select year(regexp_replace(&#x27;2021/07/19&#x27;, &#x27;/&#x27;, &#x27;-&#x27;));<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li><p>提取邮箱后缀：‘<a href="mailto:&#x74;&#111;&#x6d;&#64;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;">tom@163.com</a>‘需要邮箱的后缀提取出来</p></li><li><p>方式一：切分</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select split(&#x27;tom@163.com&#x27;, &#x27;@&#x27;)[1];<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>方式二：提取</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select regexp_extract(&#x27;tom@163.com&#x27;, &#x27;(.*)@(.*)&#x27;, 2);<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="NVL"><a href="#NVL" class="headerlink" title="NVL"></a>NVL</h3><ol><li><p>nvl(s1, s2)：如果s1的值不为null，则返回s1；如果s1的值为null，那么会返回s2的值</p></li><li><p>案例：计算平均奖金</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 Alex 3000<br>2 Bill 2600<br>3 Cathy 1500<br>4 Danny<br>5 Evan 2000<br>6 Feddy 2400<br>7 Grace 1000<br>8 Hack 1500<br>9 Iran<br>10 John 2800<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>在Hive中建表来管理原始数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table rewards(id int, name string, reward double) row format delimited fields terminated by &#x27; &#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/rewards&#x27; into table rewards;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>获取这个月平均每一个人发了多少奖金</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select avg(reward) from rewards; # avg在求平均值的时候，会自动的跳过null值<br>select avg(nvl(reward, 0)) from rewards;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="case-when"><a href="#case-when" class="headerlink" title="case when"></a>case when</h3><ol><li><p>case when类似于Java中的switch-case结构，对数据进行分支选择</p></li><li><p>案例：统计每一个部门的男女生人数</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 技术 Nancy 女<br>2 技术 Mark 男<br>3 财务 Mike 男<br>4 技术 Nack 男<br>5 财务 Lucy 女<br>6 财务 Lily 女<br>7 技术 Lisa 女<br>8 技术 Kite 男<br>9 财务 Sam 男<br>10 财务 Simon 男<br>11 技术 Tony 男<br>12 财务 Thomas 男<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表语句</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> employers(id <span class="hljs-type">int</span>, department string, name string, gender string) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/employers&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> employers;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>分别统计每一个部门内男女生的人数</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> department, <span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> gender <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> totalmale, <span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> gender <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">as</span> totalfemale <span class="hljs-keyword">from</span> employers <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> department;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="explode"><a href="#explode" class="headerlink" title="explode"></a>explode</h3><ol><li><p>explode函数在使用的时候，需要传入一个数组或者映射。如果传入的是一个数组，那么会将数组中的每一个元素提取出来成为单独的一行；如果传入的是一个映射，那么会将映射的键值对拆分成两列</p></li><li><p>案例：单词统计</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">hadoop flume hadoop hdfs<br>flume source hadoop source map reduce<br>sink flume hadoop map hdfs channel<br>hadoop hdfs map reduce<br>shuffle hadoop flume source map<br>hdfs sink channel reduce hadoop flume<br>hadoop test flume sink<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表语句</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> words(warr <span class="hljs-keyword">array</span><span class="hljs-operator">&lt;</span>string<span class="hljs-operator">&gt;</span>) <span class="hljs-type">row</span> format delimited collection items terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/words&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> words;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>统计每一个单词出现的次数</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> w, <span class="hljs-built_in">count</span>(w) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> explode(warr) <span class="hljs-keyword">as</span> w <span class="hljs-keyword">from</span> words)ws <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> w;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h3><ol><li><p>所谓列转行，指的是将某一列的数据拆分成多行的数据</p></li><li><p>案例一</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">济公之降龙降世    动画/奇幻/冒险<br>黑寡妇    动作/科幻/冒险<br>明日之战    动作/科幻<br>疾速猪杀    剧情/惊悚<br>钛    剧情/惊悚<br>人类清除计划5    惊悚/科幻/犯罪<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> movies (name string, kinds <span class="hljs-keyword">array</span><span class="hljs-operator">&lt;</span>string<span class="hljs-operator">&gt;</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> collection items terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;/&#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/movies&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> movies;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>列转行 - 炸裂</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name, k <span class="hljs-keyword">from</span> movies <span class="hljs-keyword">lateral</span> <span class="hljs-keyword">view</span> explode(kinds) k_tmp <span class="hljs-keyword">as</span> k;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="5"><li>查询惊悚片</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name, k <span class="hljs-keyword">from</span> movies <span class="hljs-keyword">lateral</span> <span class="hljs-keyword">view</span> explode(kinds) k_tmp <span class="hljs-keyword">as</span> k <span class="hljs-keyword">where</span> k <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;惊悚&#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li><p>案例二</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">Darl 活泼/大方 打篮球/打游戏<br>Danny 活泼/幽默 打篮球/听音乐<br>Fred 大方/开朗 打游戏/看电影<br>Frank 幽默/开朗 打游戏/听音乐<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> person(name string, characters <span class="hljs-keyword">array</span><span class="hljs-operator">&lt;</span>string<span class="hljs-operator">&gt;</span>, hobbies <span class="hljs-keyword">array</span><span class="hljs-operator">&lt;</span>string<span class="hljs-operator">&gt;</span>) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span> collection items terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;/&#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/person&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> person;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>炸裂多列</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name, c, h <span class="hljs-keyword">from</span> person <span class="hljs-keyword">lateral</span> <span class="hljs-keyword">view</span> explode(characters) c_tmp <span class="hljs-keyword">as</span> c <span class="hljs-keyword">lateral</span> <span class="hljs-keyword">view</span> explode(hobbies) h_tmp <span class="hljs-keyword">as</span> h;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h3><ol><li><p>所谓行转列，将多行的数据合并到一列上</p></li><li><p>案例一</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">智齿 悬疑<br>智齿 犯罪<br>狼行者 动画<br>狼行者 奇幻<br>狼行者 冒险<br>杀手妻子的保镖 犯罪<br>杀手妻子的保镖 动作<br>杀手妻子的保镖 喜剧<br>我要我们在一起 剧情<br>我要我们在一起 爱情<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> movies (name string, kind string) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/movies&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> movies;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>行转列</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name, concat_ws(<span class="hljs-string">&#x27;/&#x27;</span>, collect_set(kind)) <span class="hljs-keyword">from</span> movies <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> name;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li><p>案例二</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 1 burt<br>1 2 james<br>1 3 fred<br>1 4 bruce<br>1 1 carol<br>1 2 taylor<br>1 3 evan<br>1 4 grace<br>1 1 richard<br>1 2 adam<br>1 3 ben<br>1 4 ross<br>1 1 charles<br>1 2 cody<br>1 3 wendy<br>1 4 david<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> students(grade <span class="hljs-type">int</span>, class <span class="hljs-type">int</span>, name string) <span class="hljs-type">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">load data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">&#x27;/opt/hivedemo/students&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> students;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>合并 - 行转列</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight sql"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> grade, class, concat_ws(<span class="hljs-string">&#x27;,&#x27;</span>, collect_list(name)) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> grade, class;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li>在Hive中，将窗口函数以外的函数分为了3类</li><li>UDF(User Defined Function)：用户定义函数。这类函数的特点是一进一出，即输入一行数据获取到一行结果。例如year，length，sin，floor等</li><li>UDAF(User Defined Aggregation Function)：用户定义聚合函数。这类函数的特点是多进一出，即输入多行数据会获取到一行结果。例如count，sum，min，max，avg，collect_set，collect_list等</li><li>UDTF(User Defined Table-generated Function)：用户定义表生成函数。这类函数的特点一进多出，即输入一行数据会获取到多行结果，例如explode</li><li>在Hive中，大约90%的函数都是UDF函数，UDF函数也是最常用的函数</li></ol><h3 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h3><ol><li><p>构建Maven工程，导入对应的POM依赖</p></li><li><p>在Hive1.x和Hive2.x中，需要定义一个类继承UDF类；在Hive3.x中，UDF类已经过时，所以此时需要定义一个类继承GenericUDF类</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 在Hive3.x中需要继承GenericUDF</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthUDF</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericUDF</span> &#123;<br><br>  <span class="hljs-comment">// 初始化方法</span><br>  <span class="hljs-comment">// 这个方法的返回值类型决定了evaluate方法的返回值类型</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> ObjectInspector <span class="hljs-title function_">initialize</span><span class="hljs-params">(ObjectInspector[] arguments)</span> <span class="hljs-keyword">throws</span> UDFArgumentException &#123;<br>      <span class="hljs-comment">// 判断参数个数</span><br>      <span class="hljs-keyword">if</span> (arguments.length &lt; <span class="hljs-number">2</span>)<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UDFArgumentException</span>(<span class="hljs-string">&quot;参数个数缺少，至少需要2个参数！！！&quot;</span>);<br>      <span class="hljs-comment">// 返回值类型决定了evaluate方法的返回值类型</span><br>      <span class="hljs-keyword">return</span> PrimitiveObjectInspectorFactory.javaIntObjectInspector;<br>  &#125;<br><br>  <span class="hljs-comment">// Hive在执行的时候，实际上的执行逻辑需要覆盖在这个方法中</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">evaluate</span><span class="hljs-params">(DeferredObject[] arguments)</span> &#123;<br>      <span class="hljs-comment">// 获取到字符串</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> arguments[<span class="hljs-number">0</span>].toString();<br>      <span class="hljs-comment">// 获取子串</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> arguments[<span class="hljs-number">1</span>].toString();<br>      <span class="hljs-comment">// 获取子串在字符串中第一次出现的下标</span><br>      <span class="hljs-keyword">return</span> str.indexOf(sub);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDisplayString</span><span class="hljs-params">(String[] children)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>定义完类之后，需要将这个类打成jar包，然后将这个jar上传到Linux系统中</p></li><li><p>需要在Hive中添加jar包</p></li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">add</span> jar <span class="hljs-operator">/</span>opt<span class="hljs-operator">/</span>hivedemo<span class="hljs-operator">/</span>cqhive<span class="hljs-number">-1.0</span><span class="hljs-operator">-</span>SNAPSHOT.jar;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>需要在Hive中构建临时函数来使用</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> temporary <span class="hljs-keyword">function</span> indexof <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;cn.tedu.udf.AuthUDF&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="UDTF"><a href="#UDTF" class="headerlink" title="UDTF"></a>UDTF</h3><ol><li>定义一个类继承GenericUDTF，覆盖其中的方法</li></ol>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthUDTF</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericUDTF</span> &#123;<br><br>  <span class="hljs-comment">// 初始化方法</span><br>  <span class="hljs-comment">// 返回值决定了process方法的返回值类型</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> StructObjectInspector <span class="hljs-title function_">initialize</span><span class="hljs-params">(StructObjectInspector argOIs)</span> &#123;<br>      <span class="hljs-comment">// 指定拆分出来的列名</span><br>      List&lt;String&gt; fieldsName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      fieldsName.add(<span class="hljs-string">&quot;word&quot;</span>);<br>      <span class="hljs-comment">// 指定拆分出来的数据类型</span><br>      List&lt;ObjectInspector&gt; fieldsType = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      fieldsType.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);<br>      <span class="hljs-keyword">return</span> ObjectInspectorFactory.getStandardStructObjectInspector(fieldsName, fieldsType);<br>  &#125;<br><br>  <span class="hljs-comment">// 处理数据的方法</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(Object[] args)</span> <span class="hljs-keyword">throws</span> HiveException &#123;<br>      <span class="hljs-comment">// 判断参数个数</span><br>      <span class="hljs-keyword">if</span> (args.length &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiveException</span>();<br>      <span class="hljs-comment">// 获取第一个参数</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>].toString();<br>      <span class="hljs-comment">// 获取一个切分符号</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">symbol</span> <span class="hljs-operator">=</span> args.length &gt;= <span class="hljs-number">2</span> ? args[<span class="hljs-number">1</span>].toString() : <span class="hljs-string">&quot;-&quot;</span>;<br>      <span class="hljs-comment">// 切分字符串</span><br>      String[] arr = str.split(symbol);<br>      List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-comment">// 遍历数组依次写出</span><br>      <span class="hljs-keyword">for</span> (String s : arr) &#123;<br>          <span class="hljs-comment">// 将数据放到集合中</span><br>          list.add(s);<br>          <span class="hljs-comment">// 将数据写出</span><br>          forward(list);<br>          <span class="hljs-comment">// 写完之后需要清空集合</span><br>          list.clear();<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>指定jar包</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">add</span> jar <span class="hljs-operator">/</span>opt<span class="hljs-operator">/</span>hivedemo<span class="hljs-operator">/</span>cqhive<span class="hljs-number">-1.0</span><span class="hljs-operator">-</span>SNAPSHOT.jar;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>构建临时函数</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> temporary <span class="hljs-keyword">function</span> splitarr <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;cn.tedu.udtf.AuthUDTF&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li><p>窗口函数又称之为开窗函数，用于决定要处理的数据量的多少</p></li><li><p>基本语法</p></li></ol>  <figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">分析函数 <span class="hljs-keyword">over</span>(<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> 字段 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段 起始范围 <span class="hljs-keyword">and</span> 结束范围)<br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>partition by ：对数据进行分类</p></li><li><p>order by：对数据进行排序</p></li><li><p>处理范围</p></li><li><p>关键词</p></li></ol><div class="hljs code-wrapper"><pre><code>| 关键词 | 解释  || --- | --- || preceding | 往前  || following | 往后  || current row | 当前行 || unbounded | 无边界 |</code></pre></div><ol start="2"><li>案例</li></ol><div class="hljs code-wrapper"><pre><code>1. unbounded preceding：从第一行开始2. unbounded following：到最后一行结束3. 2 preceding and current row：最近三行数据4. current row and 3 following：从当前行往后再数三行</code></pre></div><ol start="6"><li><p>分析函数</p></li><li><p>count(col)：统计指定列的总的个数</p></li><li><p>sum(col)：针对指定列进行求和</p></li><li><p>avg(col)：针对指定列进行求平均</p></li><li><p>max(col)：获取指定列的最大值</p></li><li><p>min(col)：获取指定列的最小值</p></li><li><p>lag(col, n)：表示获取往前数第n行的数据。假设当前行是第6行，那么lag(col, 3)表示要处理第3行的数据</p></li><li><p>lead(col, n)：表示获取往后第n行的数据。</p></li><li><p>ntile(n)：要求数据必须先排序，排序之后将数据平均分到n个桶中，桶的编号从1开始依次递增。如果数据不能平分到每一个桶中，那么此时每一个桶之间的元素个数最多相差1个</p></li><li><p>row_number()：不考虑数据是否重复，会顺次进行递增编号</p></li><li><p>rank()：在数据排序之后会对数据进行自增的编号，如果值相同，那么编号会重复且产生空位</p></li><li><p>dense_rank()：在数据排序之后会对数据进行自增的编号，如果值相同，那么编号会重复且不产生空位</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符编码Unicode和UTF8的关系</title>
    <link href="/Program/Java/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81unicode%E5%92%8Cutf8%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/Program/Java/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81unicode%E5%92%8Cutf8%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><h3 id="转载自-阮一峰的博客-字符编码笔记：ASCII，Unicode-和-UTF-8-阮一峰的网络日志"><a href="#转载自-阮一峰的博客-字符编码笔记：ASCII，Unicode-和-UTF-8-阮一峰的网络日志" class="headerlink" title="转载自[阮一峰的博客](字符编码笔记：ASCII，Unicode 和 UTF-8 - 阮一峰的网络日志)"></a>转载自[阮一峰的博客](<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">字符编码笔记：ASCII，Unicode 和 UTF-8 - 阮一峰的网络日志</a>)</h3><p>除了这个还可以看看这两篇：</p><p><a href="https://www.cnblogs.com/throwable/p/9188439.html">https://www.cnblogs.com/throwable/p/9188439.html</a></p><p><a href="https://www.cnblogs.com/baiqiantao/p/5862430.html">https://www.cnblogs.com/baiqiantao/p/5862430.html</a></p></blockquote><h2 id="先总结一下："><a href="#先总结一下：" class="headerlink" title="先总结一下："></a>先总结一下：</h2><p> ASCII码被Unicode兼容，在127之前是一样的。为了使用中文字体，我国开发的GB2312等编码，而别国也出现了其他的编码，为了统一出现了Unicode（包含常用汉字，但兼容性并不好，毕竟中文的字太多了）。</p><p> 我们平时使用的Unicode编码通常是两字节，为了节省空间出现了UTF8等Unicode的不同实现方式，UTF8是变长的，节省空间，应用广泛。</p><p> 除此还有一种叫做<code>ISO-8859-1</code>也称<code>Latin</code>，是单字节编码，他是最全的ASCII实现，所以用的还是很广泛的，只用英文和一些欧洲字符，没有汉字，但是很节省空间，如果要用它表示中文，需要将中文的编码进行拆分。</p><p> Java中直接使用的Unicode是UTF16，这是一种定长的Unicode实现为2字节，和Unicode本身类似。</p><p> Unicode的存储存在大端和小端方式，需要用BOM(Byte Order Mark)进行说明，就是文件开头加上<code>EF FF</code>（大端方式）、<code>FF EF</code>（小端方式）。大端是高位字节放在低地址，小段是低位字节放在低地址。而UTF8只有一种顺序，就是大端方式，因此它的BOM可写可不写，因为它没什么意义，但如果带BOM时想要用<code>Latin1</code>等进行储存就会出现问题，因此UTF8最好不加BOM。</p><p> 为了网络传输（不可见字符会被忽略，因此需要用可见字符进行转义再进行传输），出现了Base64编码，BASE64只包含26个字母的大小写和0-9十个数字以及符号”+”、”&#x2F;“、”&#x3D;”，”&#x3D;”用于填充空字段，每次传输按规则进行编码，接收后进行解码。</p><h2 id="一、ASCII-码"><a href="#一、ASCII-码" class="headerlink" title="一、ASCII 码"></a><strong>一、ASCII 码</strong></h2><p> 我们知道，计算机内部，所有信息最终都是一个二进制值。每一个二进制位（bit）有<code>0</code>和<code>1</code>两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从<code>00000000</code>到<code>11111111</code>。</p><p> 上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 ASCII 码，一直沿用至今。</p><p> ASCII 码一共规定了128个字符的编码，比如空格<code>SPACE</code>是32（二进制<code>00100000</code>），大写的字母<code>A</code>是65（二进制<code>01000001</code>）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为<code>0</code>。</p><h2 id="二、非-ASCII-编码"><a href="#二、非-ASCII-编码" class="headerlink" title="二、非 ASCII 编码"></a><strong>二、非 ASCII 编码</strong></h2><p> 英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 ASCII 码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的<code>é</code>的编码为130（二进制<code>10000010</code>）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。</p><p> 但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了<code>é</code>，在希伯来语编码中却代表了字母<code>Gimel</code> (<code>ג</code>)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0–127表示的符号是一样的，不一样的只是128–255的这一段。</p><p> 至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是 GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示 256 x 256 &#x3D; 65536 个符号。</p><p> 中文编码的问题需要专文讨论，这篇笔记不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的 Unicode 和 UTF-8 是毫无关系的。</p><h2 id="三-Unicode"><a href="#三-Unicode" class="headerlink" title="三. Unicode"></a><strong>三. Unicode</strong></h2><p> 正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p><p> 可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是 Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p><p> Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，<code>U+0639</code>表示阿拉伯字母<code>Ain</code>，<code>U+0041</code>表示英语的大写字母<code>A</code>，<code>U+4E25</code>表示汉字<code>严</code>。具体的符号对应表，可以查询<a href="https://www.unicode.org/">unicode.org</a>，或者专门的<a href="http://www.chi2ko.com/tool/CJK.htm">汉字对应表</a>。</p><h2 id="四、Unicode-的问题"><a href="#四、Unicode-的问题" class="headerlink" title="四、Unicode 的问题"></a><strong>四、Unicode 的问题</strong></h2><p> 需要注意的是，Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p><p> 比如，汉字<code>严</code>的 Unicode 是十六进制数<code>4E25</code>，转换成二进制数足足有15位（<code>100111000100101</code>），也就是说，这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p><p> 这里就有两个严重的问题，第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是<code>0</code>，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p><p> 它们造成的结果是：</p><ol><li><p>出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。</p></li><li><p>Unicode 在很长一段时间内无法推广，直到互联网的出现。</p></li></ol><h2 id="五、UTF-8"><a href="#五、UTF-8" class="headerlink" title="五、UTF-8"></a><strong>五、UTF-8</strong></h2><p> 互联网的普及，强烈要求出现一种统一的编码方式。UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。其他实现方式还包括 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示），不过在互联网上基本不用。<strong>重复一遍，这里的关系是，UTF-8 是 Unicode 的实现方式之一。</strong></p><p> UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8 的编码规则很简单，只有二条：</p><ol><li><p>对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p></li><li><p>对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p></li></ol><p> 下表总结了编码规则，字母<code>x</code>表示可用编码的位。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs unicode">Unicode符号范围 | UTF-8编码方式<br>(十六进制) | （二进制）<br>----------------------+---------------------------------------------<br>0000 0000-0000 007F | 0xxxxxxx<br>0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<br></code></pre></div></td></tr></table></figure><p> 跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节。</p><p>下面，还是以汉字<code>严</code>为例，演示如何实现 UTF-8 编码。</p><p> <code>严</code>的 Unicode 是<code>4E25</code>（<code>100111000100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最后一个二进制位开始，依次从后向前填入格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4B8A5</code>。</p><h2 id="六、Unicode-与-UTF-8-之间的转换"><a href="#六、Unicode-与-UTF-8-之间的转换" class="headerlink" title="六、Unicode 与 UTF-8 之间的转换"></a><strong>六、Unicode 与 UTF-8 之间的转换</strong></h2><p> 通过上一节的例子，可以看到<code>严</code>的 Unicode码 是<code>4E25</code>，UTF-8 编码是<code>E4B8A5</code>，两者是不一样的。它们之间的转换可以通过程序实现。</p><p> Windows平台，有一个最简单的转化方法，就是使用内置的记事本小程序<code>notepad.exe</code>。打开文件后，点击<code>文件</code>菜单中的<code>另存为</code>命令，会跳出一个对话框，在最底部有一个<code>编码</code>的下拉条。</p><p> 里面有四个选项：<code>ANSI</code>，<code>Unicode</code>，<code>Unicode big endian</code>和<code>UTF-8</code>。</p><ol><li><p><code>ANSI</code>是默认的编码方式。对于英文文件是<code>ASCII</code>编码，对于简体中文文件是<code>GB2312</code>编码（只针对 Windows 简体中文版，如果是繁体中文版会采用 Big5 码）。</p></li><li><p><code>Unicode</code>编码这里指的是<code>notepad.exe</code>使用的 UCS-2 编码方式，即直接用两个字节存入字符的 Unicode 码，这个选项用的 little endian 格式。</p></li><li><p><code>Unicode big endian</code>编码与上一个选项相对应。我在下一节会解释 little endian 和 big endian 的涵义。</p></li><li><p><code>UTF-8</code>编码，也就是上一节谈到的编码方法。</p></li></ol><p> 选择完”编码方式”后，点击”保存”按钮，文件的编码方式就立刻转换好了。</p><h2 id="七、Little-endian-和-Big-endian"><a href="#七、Little-endian-和-Big-endian" class="headerlink" title="七、Little endian 和 Big endian"></a><strong>七、Little endian 和 Big endian</strong></h2><p> 上一节已经提到，UCS-2 格式可以存储 Unicode 码（码点不超过<code>0xFFFF</code>）。以汉字<code>严</code>为例，Unicode 码是<code>4E25</code>，需要用两个字节存储，一个字节是<code>4E</code>，另一个字节是<code>25</code>。存储的时候，<code>4E</code>在前，<code>25</code>在后，这就是 Big endian 方式；<code>25</code>在前，<code>4E</code>在后，这是 Little endian 方式。</p><p> 这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-endian)敲开还是从小头(Little-endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。</p><p> 第一个字节在前，就是”大头方式”（Big endian），第二个字节在前就是”小头方式”（Little endian）。</p><p> 那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？</p><p> Unicode 规范定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（zero width no-break space），用<code>FEFF</code>表示。这正好是两个字节，而且<code>FF</code>比<code>FE</code>大<code>1</code>。</p><p> 如果一个文本文件的头两个字节是<code>FE FF</code>，就表示该文件采用大头方式；如果头两个字节是<code>FF FE</code>，就表示该文件采用小头方式。</p><h2 id="八、实例"><a href="#八、实例" class="headerlink" title="八、实例"></a><strong>八、实例</strong></h2><p> 下面，举一个实例。</p><p> 打开”记事本”程序<code>notepad.exe</code>，新建一个文本文件，内容就是一个<code>严</code>字，依次采用<code>ANSI</code>，<code>Unicode</code>，<code>Unicode big endian</code>和<code>UTF-8</code>编码方式保存。</p><p> 然后，用文本编辑软件<a href="https://www.google.cn/search?aq=t&oq=UltraEdit&complete=1&hl=zh-CN&newwindow=1&rlz=1B3GGGL_zh-CNCN216CN216&q=ultraedit+%E4%B8%8B%E8%BD%BD&btnG=Google+%E6%90%9C%E7%B4%A2&meta=">UltraEdit 中</a>的”十六进制功能”，观察该文件的内部编码方式。</p><ol><li><p>ANSI：文件的编码就是两个字节<code>D1 CF</code>，这正是<code>严</code>的 GB2312 编码，这也暗示 GB2312 是采用大头方式存储的。</p></li><li><p>Unicode：编码是四个字节<code>FF FE 25 4E</code>，其中<code>FF FE</code>表明是小头方式存储，真正的编码是<code>4E25</code>。</p></li><li><p>Unicode big endian：编码是四个字节<code>FE FF 4E 25</code>，其中<code>FE FF</code>表明是大头方式存储。</p></li><li><p>UTF-8：编码是六个字节<code>EF BB BF E4 B8 A5</code>，前三个字节<code>EF BB BF</code>表示这是UTF-8编码，后三个<code>E4B8A5</code>就是<code>严</code>的具体编码，它的存储顺序与编码顺序是一致的。</p></li></ol><h2 id="九、延伸阅读"><a href="#九、延伸阅读" class="headerlink" title="九、延伸阅读"></a><strong>九、延伸阅读</strong></h2><ul><li><a href="http://www.joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a>（关于字符集的最基本知识）</li><li><a href="https://www.pconline.com.cn/pcedu/empolder/gj/other/0505/616631.html">谈谈Unicode编码</a></li><li><a href="https://www.ietf.org/rfc/rfc3629.txt">RFC3629：UTF-8, a transformation format of ISO 10646</a>（如果实现UTF-8的规定）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第七天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B8%83%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B8%83%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><ol><li>在Hive中，每一个database在HDFS上都会对应一个目录</li><li>在Hive中，没有主键的概念，也就意味着在定义表的时候不需要定义主键</li><li>Hive在建表的时候就需要指定字段之间的间隔符号，建好表之后就无法修改</li><li>在插入数据的时候，insert into表示追加数据；insert overwrite表示将原来的数据清空之后再加入数据</li></ol><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><table><thead><tr><th>SQL</th><th>解释</th></tr></thead><tbody><tr><td>show databases;</td><td>查看所有的库</td></tr><tr><td>create database hivedemo;</td><td>创建库</td></tr><tr><td>drop database demo;</td><td>删除库</td></tr><tr><td>use hivedemo;</td><td>使用库</td></tr><tr><td>create table person (id int, name string, age int, gender string);</td><td>建立person表</td></tr><tr><td>insert into person values(1, ‘Sam’, 19, ‘male’);</td><td>插入数据</td></tr><tr><td>select * from person;</td><td>查询数据</td></tr><tr><td>load data local inpath ‘&#x2F;opt&#x2F;hivedemo&#x2F;person’ into table person;</td><td>加载数据</td></tr><tr><td>drop table person;</td><td>删除表</td></tr><tr><td>create table person (id int, name string, age int, gender string) row format delimited fields terminated by ‘ ‘;</td><td>在建表的时候指定字段之间的间隔符号</td></tr><tr><td>desc person;</td><td>描述表结构</td></tr><tr><td>create table p2 like person;</td><td>创建一个和person表的表结构一致的表p2</td></tr><tr><td>insert into table p2 select * from person where age &gt;&#x3D; 18;</td><td>将person表中age&gt;&#x3D;18的数据查询出来放到p2表中</td></tr><tr><td>from person insert overwrite table p2 select * where gender &#x3D; ‘male’ insert into table p3 select * where age &lt; 18;</td><td>将person表中性别为男生的数据放到p2表中，同时将age&lt;18的数据查询出来放到p3表中</td></tr><tr><td>insert overwrite local directory ‘&#x2F;opt&#x2F;hivedata’ row format delimited fields terminated by ‘\t’ select * from person where age &gt;&#x3D; 18;</td><td>将person表中age&gt;&#x3D;18的数据查询出来放到本地目录下</td></tr><tr><td>insert overwrite directory ‘&#x2F;person’ row format delimited fields terminated by ‘,’ select * from person where gender &#x3D;’female’;</td><td>将person表中性别为女的数据查询出来放到HDFS的person目录下</td></tr><tr><td>alter table person rename to p1;</td><td>修改表名</td></tr><tr><td>alter table p1 add columns(height double);</td><td>动态添加列</td></tr></tbody></table><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li><p>在Hive中，提供了相对丰富的数据类型，大概可以分为两类：基本类型和复杂类型</p></li><li><p>基本类型</p></li></ol><table><thead><tr><th>Hive类型</th><th>Java类型</th></tr></thead><tbody><tr><td>tinyint</td><td>byte</td></tr><tr><td>smallint</td><td>short</td></tr><tr><td><font color='red'>int</font></td><td>int</td></tr><tr><td>bigint</td><td>long</td></tr><tr><td>float</td><td>float</td></tr><tr><td><font color='red'>double</font></td><td>double</td></tr><tr><td>boolean</td><td>boolean</td></tr><tr><td><font color='red'>string </font></td><td>String</td></tr><tr><td>timestamp</td><td>Timestamp</td></tr><tr><td>binary</td><td>byte[]</td></tr></tbody></table><ol start="3"><li>复杂类型：array，map，struct</li></ol><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><ol><li><p><font color='red'>array：数组类型</font>，对应了Java中的数组或者集合</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 lucy,lily  david,evan<br>2 adair,bruce,lee simon,tony,tom,rose<br>3 bob,alex,cindy frank,fred<br>4 henry,william kite,job,thomas<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table battles (id int, groupa array&lt;string&gt;, groupb array&lt;string&gt;) row format delimited fields terminated by &#x27; &#x27; collection items terminated by &#x27;,&#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/battles&#x27; into table battles;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>判断非空</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select groupa[2] from battles where groupa[2] is not null;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li><p>map：映射类型，对应了Java中的Map类型</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 tom,15 sam,17<br>2 lily,16 lucy,16<br>3 david,14 danny,15<br>4 frank,19 fred,19<br>5 henry,17 hack,18<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表语句</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table groups (groupid int, membera map&lt;string,int&gt;, memberb map&lt;string,int&gt;) row format delimited fields terminated by &#x27; &#x27; map keys terminated by &#x27;,&#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/groups&#x27; into table groups;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>查询数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select membera[&#x27;frank&#x27;] from groups  where membera[&#x27;frank&#x27;] is not null;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li><p>struct：结构体类型，对应了Java中的对象</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 tom,19,male,182.5,68.7<br>2 tony,18,male,181.3,70.2<br>3 thomas,18,male,183.6,79.1<br>4 vincent,17,female,165.9,50.1<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>建表语句</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table infos (id int, info struct&lt;name:string, age:int, gender:string, height:double, weight:double&gt;) row format delimited fields terminated by &#x27; &#x27; collection items terminated by &#x27;,&#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/infos&#x27; into table infos;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>查询数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select info.age from infos where info.name = &#x27;vincent&#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><h3 id="内部表和外部表"><a href="#内部表和外部表" class="headerlink" title="内部表和外部表"></a>内部表和外部表</h3><ol><li><p>在Hive中手动建表手动添加数据(包括insert和load)，这种表称之为内部表</p></li><li><p>在Hive中手动建表来管理HDFS上已经存在的数据，这种表称之为外部表</p></li><li><p>外部表建表语句</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create external table orders (orderid int, orderdate string, productid int, num int) row format delimited fields terminated by &#x27; &#x27;location &#x27;/orders&#x27;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>可以通过命令来确定一个表是内部表还是外部表</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">desc extended p1;<br># 或者<br>desc formatted p1;<br></code></pre></div></td></tr></table></figure><p>  如果Table Type的属性值为MANAGED_TABLE，就表示这是一个内部表；如果Table Type的属性值为EXTERNAL_TABLE，那么就表示这是一个外部表</p><ol start="5"><li><p>内部表在被删除的时候，在HDFS上对应的目录会一起删除；外部表在被删除的时候，在HDFS上对应的目录不会被删除</p></li><li><p>在实际生产过程中，数据前期的采集和管理使用的是外部表；后期对数据进行处理和分析的时候，大部分时候采用的是内部表</p></li></ol><h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><ol><li><p>分区表的作用是对数据进行分类</p></li><li><p>分区表建表语句</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table cities (id int, name string) partitioned by (province string) row format delimited fields terminated by &#x27; &#x27;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>加载数据</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/hebei&#x27; into table cities partition(province = &#x27;hebei&#x27;);<br>load data local inpath &#x27;/opt/hivedemo/henan&#x27; into table cities partition(province = &#x27;henan&#x27;);<br></code></pre></div></td></tr></table></figure><ol start="4"><li><p>在Hive中，每一个分区在HDFS上都会形成一个单独的目录</p></li><li><p>当对分区表进行查询的时候，如果指定了分区条件，那么分区表的查询速度要高于未分区表；如果在查询的时候进行可跨分区查询，那么此时未分区表的查询速度要高于分区表</p></li><li><p>手动添加分区</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table cities add partition(province = &#x27;guangdong&#x27;) location &#x27;/user/hive/warehouse/hivedemo.db/cities/province=guangdong&#x27;;<br></code></pre></div></td></tr></table></figure><ol start="7"><li>修复表</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">msck repair table cities; # 这个命令有执行失败的可能<br></code></pre></div></td></tr></table></figure><ol start="8"><li>修改分区表</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table cities partition(province = &#x27;shanxi&#x27;) rename to partition(province = &#x27;test&#x27;);<br></code></pre></div></td></tr></table></figure><ol start="9"><li>删除分区</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table cities drop partition(province = &#x27;test&#x27;);<br></code></pre></div></td></tr></table></figure><ol start="10"><li><p>在Hive中，要求分区表中被分区的字段在原始数据中不存在</p></li><li><p>动态分区</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 hebei 邢台<br>2 hebei 承德<br>3 shanxi 太原<br>4 shanxi 大同<br>5 liaoning 沈阳<br>6 liaoning 大连<br>7 jilin 长春<br>8 liaoning 鞍山<br>9 shanxi 阳泉<br>10 liaoning 抚顺<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>在Hive中建立临时表用于管理原始数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table cities_tmp (tid int, tprovince string, tname string) row format delimited fields terminated by &#x27; &#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>将数据加载到临时表中</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/cities&#x27; into table cities_tmp;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>关闭严格模式</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">set hive.exec.dynamic.partition.mode=nonstrict;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="5"><li>从未分区表中查询出来放到已分区表中</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into table cities partition(province) select tid, tname, tprovince from cities_tmp distribute by tprovince;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="12"><li><p>Hive本身支持多字段分区，多个字段之间，前一个字段形成的目录会包含后一个字段形成的目录，此时会形成多级目录，实际过程中，会利用多字段分区来实现多级分类的效果。例如年级班级、省市县等</p></li><li><p>原始数据</p></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight text"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1 1 1 tom<br>1 1 2 sam<br>1 1 3 bob<br>1 1 4 alex<br>1 2 1 bruce<br>1 2 2 cindy<br>1 2 3 jack<br>1 2 4 john<br>2 1 1 tex<br>2 1 2 helen<br>2 1 3 charles<br>2 1 4 frank<br>2 2 1 david<br>2 2 2 simon<br>2 2 3 lucy<br>2 2 4 lily<br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>在Hive中建表来管理数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table students_tmp (tgrade int, tclass int, tid int, tname string) row format delimited fields terminated by &#x27; &#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="3"><li>加载数据</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">load data local inpath &#x27;/opt/hivedemo/students&#x27; into table students_tmp;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="4"><li>抽样数据，以确定数据正确加载</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from students_tmp tablesample(5 rows);<br></code></pre></div></td></tr></table></figure></code></pre><ol start="5"><li>建立分区表</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table students (id int, name string) partitioned by (grade int, class int) row format delimited fields terminated by &#x27;\t&#x27;;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="6"><li>关闭严格模式</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">set hive.exec.dynamic.partition.mode=nonstrict;<br></code></pre></div></td></tr></table></figure></code></pre><ol start="7"><li>动态分区 - 这次是多字段分区</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into table students partition(grade, class) select tid, tname, tgrade, tclass from students_tmp distribute by tgrade, tclass;<br></code></pre></div></td></tr></table></figure></code></pre><h3 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h3><ol><li><p>分桶表的作用是对数据进行抽样</p></li><li><p>数据分的桶的数量越多，执行的时候花费的内存越多</p></li><li><p>在Hive中，分桶机制默认不开启，需要开启分桶机制</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">set hive.enforce.bucketing = true;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>建立分桶表</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table cities_bucket (id int, name string) clustered by (name) into 3 buckets row format delimited fields terminated by &#x27;\t&#x27;;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>向分桶表中添加信息，但是注意的是，分桶表只能通过insert方式来添加数据不能通过load方式来添加数据</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert overwrite table cities_bucket select id, name from cities;<br></code></pre></div></td></tr></table></figure><ol start="6"><li>对桶中的数据进行抽样</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from cities_bucket tablesample(bucket 1 out of 2 on name);<br></code></pre></div></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ol><li>Hive的目的是对数据进行分析，因此在Hive中，提供了非常丰富的函数，可以通过</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show functions;<br></code></pre></div></td></tr></table></figure><p>  来查看Hive中所有的函数</p><ol start="2"><li>在Hive中，可以通过</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">desc function xxx;<br></code></pre></div></td></tr></table></figure><p>  来描述这个函数的用法</p><ol start="3"><li>在Hive中，所有的函数不能单独使用</li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac和Win对应的几个按键</title>
    <link href="/Hackintosh/mac%E5%92%8Cwin%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%A0%E4%B8%AA%E6%8C%89%E9%94%AE/"/>
    <url>/Hackintosh/mac%E5%92%8Cwin%E5%AF%B9%E5%BA%94%E7%9A%84%E5%87%A0%E4%B8%AA%E6%8C%89%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<hr><p>Mac和Windows键盘对应关系：<br> • ⌘ &#x3D;&#x3D; Command    —–    win<br> • ⇧ &#x3D;&#x3D; Shift    —–    shift<br> • ⌥ &#x3D;&#x3D; Option    —–    Alt<br> • ⌃ &#x3D;&#x3D; Control    —–    Ctrl</p>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac设置不挂在某个分区</title>
    <link href="/Hackintosh/mac%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%8C%82%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%88%86%E5%8C%BA/"/>
    <url>/Hackintosh/mac%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%8C%82%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<hr><p>双系统，windows分区就不用挂载了，以免出现问题，解决方法如下：</p><ol><li><p>打开终端，取得权限，输入  sudo -s   &#x2F;&#x2F;输入你的密码。</p></li><li><p>输入  nano &#x2F;etc&#x2F;fstab</p></li><li><p>打开应用程序里的磁盘工具。选择你不想挂载的分区，点选左上的“显示简介”，得到你这个分区的UUID（通用唯一标识）。 </p></li><li><p>终端里输入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/fstab<br></code></pre></div></td></tr></table></figure><p>写入：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">UUID=刚才找到的UUID none ntfs ro,noowners,noauto<br></code></pre></div></td></tr></table></figure><p>重启即可生效</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac设置终端代理</title>
    <link href="/Hackintosh/mac%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/"/>
    <url>/Hackintosh/mac%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><p>在终端中直接运行命令</p><p><code>export http_proxy=http://proxyAddress:port</code><br>这个办法的好处是简单直接，并且影响面很小（只对当前终端有效）。</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h3><p>把代理服务器地址写入shell配置文件.bashrc或者.zshrc<br>直接在.bashrc或者.zshrc添加下面内容</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export http_proxy=&quot;http://localhost:port&quot;<br>export https_proxy=&quot;http://localhost:port&quot;<br></code></pre></div></td></tr></table></figure><p>以使用clash for windows代理为例，ss的代理端口为7890,那么应该设置为</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export http_proxy=&quot;http://127.0.0.1:1080&quot;<br>export https_proxy=&quot;http://127.0.0.1:1080&quot;<br></code></pre></div></td></tr></table></figure><p>localhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。<br>然后ESC后:wq保存文件，接着在终端中执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source ~/.bashrc<br></code></pre></div></td></tr></table></figure><p>或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3:"></a>方法3:</h3><p>改相应工具的配置，比如apt的配置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo vim /etc/apt/apt.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件末尾加入下面这行</span><br>Acquire::http::Proxy &quot;http://proxyAddress:port&quot;S<br><br></code></pre></div></td></tr></table></figure><p>保存apt.conf文件即可。</p><h3 id="方法4"><a href="#方法4" class="headerlink" title="方法4:"></a>方法4:</h3><p>利用proxychains在终端使用socks5代理<br>补充：如果代理服务器需要登陆，这时可以直接把用户名和密码写进去：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">http_proxy=http://userName:password@proxyAddress:port<br></code></pre></div></td></tr></table></figure><h3 id="配置Alias"><a href="#配置Alias" class="headerlink" title="配置Alias"></a>配置Alias</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;alias sp=\&quot;export https_proxy=http://127.0.0.1:7890 export http_proxy=http://127.0.0.1:7890 export all_proxy=socks5://127.0.0.1:7890\&quot;&quot; &gt;&gt; ~/.zshrc<br><br>echo &quot;alias usp=\&quot;unset https_proxy unset http_proxy unset all_proxy\&quot;&quot; &gt;&gt; ~/.zshrc<br><br>source .zshrc<br></code></pre></div></td></tr></table></figure><p>终端输入sp开启代理，usp关闭代理</p><p>可以用：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">curl -O www.google.com/index.html<br></code></pre></div></td></tr></table></figure><p>测试连通性，你问为啥不用ping？应为ping是用网络底层的协议，clash代理不管，只能通过http来测试。</p>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac更改默认文件打开方式</title>
    <link href="/Hackintosh/mac%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <url>/Hackintosh/mac%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<hr><p>只在打开方式中勾选始终用某个软件打开只会对该文件生效</p><p>要想在同种类型的文件上生效，需要如下操作：</p><p>右键某个类型的文件 -&gt; 显示简介 -&gt; 打开方式 -&gt; 选择打开方式并点击全部更改</p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210715181137.png" alt="" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装Java</title>
    <link href="/Hackintosh/mac%E5%AE%89%E8%A3%85java/"/>
    <url>/Hackintosh/mac%E5%AE%89%E8%A3%85java/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><ol><li><p>打开<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Java SE - Downloads | Oracle Technology Network | Oracle</a>下载安装包并安装</p></li><li><p>配置环境变量</p></li></ol><ul><li><p>如果是第一次配置环境变量，使用命令<code>touch .bash_profile</code>创建一个名为**.bash_profile **隐藏配置文件;</p></li><li><p>如果不是第一次配置环境变量，使用命令<code>vim .zshrc</code>打开配置文件；<br>在配置文件中输入下面的内容：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home<br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>:.<br>CLASS_PATH=<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:.<br><span class="hljs-built_in">export</span> JAVA_HOME<br><span class="hljs-built_in">export</span> PATH<br><span class="hljs-built_in">export</span> CLASS_PATH<br></code></pre></div></td></tr></table></figure><p>保存关闭配置文件。使用命令<code>source .bash_profile</code>使配置文件生效。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac和Win双系统时间不同步问题解决</title>
    <link href="/Hackintosh/mac%E5%92%8Cwin%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/Hackintosh/mac%E5%92%8Cwin%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>Windows和MacOSX缺省看待PC的CMOS记录的时钟是不一样的。Windows将这个时钟作为本地时间来看待，也就是CMOS时间就是北京时间。MacOSX将这个时钟作为Coordinated Universal Time (UTC) 世界标准时间看待，也就是Greenwich Mean Time (GMT) 格林威志时间。所以如果你在MacOSX和Windows都选北京时间作为本地时区是，一旦连到互联网上，同步过时间后，就会造成时间的不一致。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>修改Windows注册表)将Windows的缺省对待CMOS的方式改成UTC，也就是和MacOSX一致。修改Windows的注册表，定位</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\<br></code></pre></div></td></tr></table></figure><p>添加一个名为<code>RealTimeIsUniversal</code>的DWORD项，把值设为1。<br>这样你在Windows和Mac OSX下将本地时区都设到北京时间，不论是Windows还是MacOSX同步过时间后，都不会影响到另一边。<br>觉得看不懂或者觉得麻烦?将以下代码复制到记事本，另存为<code>时间同步.reg</code></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[<span class="hljs-type">HKEY_LOCAL_MACHINE</span>\<span class="hljs-type">SYSTEM</span>\<span class="hljs-type">CurrentControlSet</span>\<span class="hljs-type">Control</span>\<span class="hljs-type">TimeZoneInformation</span>]<br><br><span class="hljs-string">&quot;RealTimeIsUniversal&quot;</span>=dword:<span class="hljs-number">00000001</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装Homebrew及镜像源更换</title>
    <link href="/Hackintosh/mac%E5%AE%89%E8%A3%85homebrew%E5%8F%8A%E9%95%9C%E5%83%8F%E6%BA%90%E6%9B%B4%E6%8D%A2/"/>
    <url>/Hackintosh/mac%E5%AE%89%E8%A3%85homebrew%E5%8F%8A%E9%95%9C%E5%83%8F%E6%BA%90%E6%9B%B4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716192406.png"></p><hr><h2 id="一、brew-安装脚本-（自动选择软件源）"><a href="#一、brew-安装脚本-（自动选择软件源）" class="headerlink" title="一、brew 安装脚本 （自动选择软件源）"></a>一、brew 安装脚本 （自动选择软件源）</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;<br></code></pre></div></td></tr></table></figure><h2 id="二、brew-卸载脚本"><a href="#二、brew-卸载脚本" class="headerlink" title="二、brew 卸载脚本"></a>二、brew 卸载脚本</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)&quot;<br></code></pre></div></td></tr></table></figure><h2 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h2><p>安装软件：<code>brew install xxx</code></p><p>卸载软件：<code>brew uninstall xxx</code></p><p>搜索软件：<code>brew search xxx</code></p><p>更新软件：<code>brew upgrade xxx</code></p><p>查看列表：<code>brew list</code></p><p>更新brew：<code>brew update</code></p><p>清理所有包的旧版本：<code>brew cleanup</code></p><p>清理指定包的旧版本：<code>brew cleanup $FORMULA</code></p><p>查看可清理的旧版本包，不执行实际操作：<code>brew cleanup -n</code></p><h2 id="四、更换国内镜像源"><a href="#四、更换国内镜像源" class="headerlink" title="四、更换国内镜像源"></a>四、更换国内镜像源</h2><p>查看当前Homebrew 镜像源</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">brew.git镜像源</span><br>git -C &quot;$(brew --repo)&quot; remote -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">homebrew-core.git镜像源</span><br>git -C &quot;$(brew --repo homebrew/core)&quot; remote -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">homebrew-cask.git镜像源</span><br>git -C &quot;$(brew --repo homebrew/cask)&quot; remote -v <br></code></pre></div></td></tr></table></figure><p>国内镜像地址：</p><ul><li><p><a href="https://mirrors.ustc.edu.cn/">科大</a></p><p><a href="http://mirrors.ustc.edu.cn/help/brew.git.html">帮助文档</a></p></li><li><p><a href="https://mirrors.aliyun.com/homebrew/">阿里</a></p></li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>替换 USTC 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://mirrors.ustc.edu.cn/brew.git<br></code></pre></div></td></tr></table></figure><p>让 Git 将脚本访问的所有 GitHub 的 URL 替换为科大源:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global url.&quot;https://mirrors.ustc.edu.cn/homebrew-core.git&quot;.insteadOf &quot;https://github.com/Homebrew/homebrew-core&quot;<br>git config --global url.&quot;https://mirrors.ustc.edu.cn/linuxbrew-core.git&quot;.insteadOf &quot;https://github.com/Homebrew/linuxbrew-core&quot;<br>git config --global url.&quot;https://mirrors.ustc.edu.cn/brew.git&quot;.insteadOf &quot;https://github.com/Homebrew/brew&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">bash</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/&#x27; &gt;&gt; ~/.bashrc<br>source ~/.bashrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">zsh</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br><br>brew update-reset<br>brew update<br></code></pre></div></td></tr></table></figure><p>还原：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://github.com/Homebrew/brew.git<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global --unset url.&quot;https://mirrors.ustc.edu.cn/homebrew-core.git&quot;.insteadOf<br>git config --global --unset url.&quot;https://mirrors.ustc.edu.cn/linuxbrew-core.git&quot;.insteadOf<br>git config --global --unset url.&quot;https://mirrors.ustc.edu.cn/brew.git&quot;.insteadOf<br><br>brew update-reset<br>brew update<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华硕Fl8000un_x542un 黑苹果安装</title>
    <link href="/Hackintosh/%E5%8D%8E%E7%A1%95fl8000un-x542un-%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85/"/>
    <url>/Hackintosh/%E5%8D%8E%E7%A1%95fl8000un-x542un-%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716141359.jpg"></p><h1 id="Hackintosh-fl8000un-x542un"><a href="#Hackintosh-fl8000un-x542un" class="headerlink" title="Hackintosh-fl8000un-x542un"></a>Hackintosh-fl8000un-x542un</h1><p>​华硕fl8000un 黑苹果OC引导：<a href="https://github.com/flyingcherryblossoms/Hackintosh-fl8000un-x542un">EFI的Github地址</a></p><p>​通过fl8000uq的EFI完善给fl8000un</p><blockquote><p>（感谢🙏：<a href="https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh%EF%BC%89">https://github.com/KKKIIINNN/ASUS-FL8000UQ-Hackintosh）</a></p></blockquote><p>​使用前建议先看看，原版的README，我只是加了几个驱动。</p><p>​折腾了两天，先安装Big Sur，用了黑果小兵的10.4镜像，显示正常，但驱动就很迷幻，有时候有有时候没有，还容易掉盘，无奈选择了Catalina，发现Catalina下驱动就很稳👍。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><table><thead><tr><th>配置</th><th>型号</th></tr></thead><tbody><tr><td>处理器</td><td>i7-8550U Kaby Lake</td></tr><tr><td>核显</td><td>Intel Graphics UHD620</td></tr><tr><td>独显</td><td>GeForce MX150</td></tr><tr><td>内存</td><td>4G× DDR4 2400MHz&#x2F;16Gx DDR4 2400MHz</td></tr><tr><td>硬盘</td><td>512G SSD&#x2F;1T HDD</td></tr><tr><td>声卡</td><td>Realtek ALC294</td></tr><tr><td>无线网卡</td><td>AR956x</td></tr></tbody></table><h2 id="哪些工作"><a href="#哪些工作" class="headerlink" title="哪些工作"></a>哪些工作</h2><p>在Catalina上：</p><ul><li><p><input checked="" disabled="" type="checkbox"> 触控板</p></li><li><p><input checked="" disabled="" type="checkbox"> 声卡</p></li><li><p><input checked="" disabled="" type="checkbox"> 有线网卡</p></li><li><p><input checked="" disabled="" type="checkbox"> 无线网卡（工作缓慢）</p></li><li><p><input checked="" disabled="" type="checkbox"> 蓝牙（开关蓝牙前请先关闭WI-FI，不然会卡住）</p></li><li><p><input checked="" disabled="" type="checkbox"> 集成显卡</p></li><li><p><input disabled="" type="checkbox"> 独立显卡（无法驱动）</p></li></ul><p>已知问题：休眠出现不亮屏问题</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul><li><p>BIOS关闭<code>VT-d</code></p></li><li><p>BIOS关闭<code>CSM</code></p></li><li><p>BIOS关闭<code>Secure Boot</code></p></li><li><p>BIOS关闭<code>Fast Boot</code></p></li><li><p>解锁<code>CFG Lock</code>：</p><p><a href="https://www.bilibili.com/read/cv6167464/">教程：BIOS华硕官网有</a></p><ol><li><p>将U盘格式化为FAT32格式；</p></li><li><p>打开CFG文件夹，将里面的EFI文件复制到U盘中，重启按ESC键选择U盘启动；</p></li><li><p>输入命令<code>setup_var_3 0x527 0x00</code>即可解锁CFG Lock。</p></li></ol></li><li><p>安装使用安装的EFI：就是fl8000uq的EFI，可以直接去上面的链接下载，仓库里也有</p></li><li><p>安装完成使用配置好驱动的EFI（Catalina文件夹下）</p></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>HDPI开启（Big Sur不保证成功）：</p><ul><li>关机</li><li>开机进入Open Core选择Recovery模式-&gt;终端-&gt;输入<code>csrutil disable</code>：输出Successful … 则操作成功</li><li>重新开机：下载或者<code>git clone https://github.com/xzhih/one-key-hidpi</code>，进入文件夹打开<code>hdpi.command</code>，开启hdpi</li><li>关机</li><li>开机进入Open Core选择Recovery模式-&gt;终端-&gt;输入<code>csrutil enable</code>：输出Successful … 则操作成功<ul><li>重新开机，输入<code>csrutil status</code>如果显示disable，需要在开机进OC时候，reset nvram（可能会丢失OC引导，需要重新添加引导），在进Recovery<code>csrutil enable</code>，重启，即可开启SIP。</li></ul></li></ul></li><li><p>USB定制请参考黑果小兵的教程：<a href="https://blog.daliansky.net/Intel-FB-Patcher-USB-Custom-Video.html">Hackintool(Intel FB Patcher) USB定制视频</a></p></li><li><p>蓝牙开关需要先关闭Wi-Fi，不然会卡住。</p></li><li><p>USB网络共享的驱动有一个问题，每次重新连接，网络设置里就多一个选项，要重新恢复到1开始：<br> 终端执行</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo rm /Library/Preferences/SystemConfiguration/N*<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="折腾的过程"><a href="#折腾的过程" class="headerlink" title="折腾的过程"></a>折腾的过程</h2><p>​Big Sur折腾过程中，触摸板和显示是没有问题的。</p><p>出现的驱动问题如下：</p><ul><li><p>声卡</p></li><li><p>有线网络</p></li><li><p>无线网络</p></li><li><p>蓝牙</p></li></ul><p>​由于有线网络和无线网络都没有，这就很不方便我们查资料，所以我百度找到安卓手机USB共享网络给Mac的方法，要装一个驱动，开始找的版本因为Bigsur修改了安全机制不能直接安装，因此我直接去<a href="https://github.com/jwise/HoRNDIS/issues/102#issuecomment-551255547">GitHub issues</a>上找了一个不用权限的修改版本，放仓库了，可以直接用。</p><ol><li><p>首先是声卡没有声音，fl8000un的声卡为ALC294，支持的layout如下（<a href="https://github.com/acidanthera/AppleALC/wiki/Supported-codecs">AppleACL</a>）：</p><table><thead><tr><th>Vendor</th><th>Codec</th><th>Revisions and layouts</th><th>MinKernel</th><th>MaxKernel</th></tr></thead><tbody><tr><td>Realtek</td><td><a href="https://github.com/acidanthera/AppleALC/tree/master/Resources/ALC294">ALC294</a></td><td>layout 11, 12, 13, 21, 22, 28, 66</td><td>13 (10.9)</td><td>—</td></tr></tbody></table><p>我改成了11，有声音了。</p></li><li><p>接着是有线网卡，也没有驱动，插上去没有反应，于是我找到之前驱动过的Realtek8111驱动给替换上去了，然后解决了这个驱动问题。</p></li><li><p>接下来按照小时光的教程：</p><ul><li><p><a href="https://www.longzc.cn/index.php/archives/330">AR9565 MAC11.0黑苹果WIFI驱动教程</a></p></li><li><p><a href="https://www.longzc.cn/index.php/archives/330">AR9565 MAC11.0黑苹果WIFI驱动教程</a></p></li></ul><p>修复了蓝牙和Wi-Fi驱动</p></li></ol><p>​BigSur每次重启驱动和磁盘都可能掉，于是装了Catalina还是黑果小兵的镜像，发现声卡正常驱动就没有替换layout，然后剩下的步骤和之前一样，发现驱动完美运行。仓库里放了折腾过程的几个版本，你们可以自己试试Big Sur。要安装还是推荐Catalina。</p>]]></content>
    
    
    <categories>
      
      <category>Hackintosh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackintosh</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第六天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%85%AD%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>第六天答辩题目，随机抽取，抽到了第一题（答案是同学写的，我整理发出来了）：</p><ol><li><p>Hadoop分布式搭建<br>入门：用至少3个节点搭建Hadoop集群，没有高可用，节点进程分布合理<br>升级：搭建Zookeeper集群，实现Hadoop高可用<br>高级：在上述基础上，搭建历史服务器以及实现黑白名单机制<br>满分：实现联邦HDFS</p><p><strong>做这一题</strong></p></li><li><p>隐藏好友<br>入门：用3个及以上MapReduce完成<br>  升级：用2个MapReduce完成<br>  高级：用工作流调度2个MapReduce</p></li><li><p>Flume采集MySQL数据<br>入门：自定义Source，采集固定表的数据<br>  升级：可以采集任意表的数据<br>  高级：不限制于MySQL数据库，可以采集任意数据库的任意表数据</p></li><li><p>Flume向MySQL写入数据<br>入门：自定义Sink，写入固定的表<br>  升级：可以用户指定表及字段，向数据库写入<br>  高级：不限制于MySQL数据库，可以向任意数据库写入数据</p></li><li><p>部署Ganglia监控Flume<br>入门：成功部署Ganglia<br>  升级：成功部署Ganglia并且监控Flume<br>  高级：在监控基础上，形成监控日志，可以通过日志分析出请求高峰时间以及数据读写高峰</p></li><li><p>共同好友&amp;访问次数<br>入门：完成共同好<br>  升级：完成共同好友&amp;访问次数<br>  高级：可以获取任意多个人的共同好友，例如可以获取3&#x2F;4&#x2F;5等个人的共同好友</p></li></ol><p>  friend.txt</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">tom rose<br>tom <span class="hljs-keyword">jim</span><br><span class="hljs-keyword"></span>tom smith<br>tom lucy<br>rose tom<br>rose lucy<br>rose smith<br><span class="hljs-keyword">jim </span>tom<br><span class="hljs-keyword">jim </span>lucy<br>smith <span class="hljs-keyword">jim</span><br><span class="hljs-keyword"></span>smith tom<br>smith rose<br></code></pre></div></td></tr></table></figure><p>  commonfriend.txt</p>  <figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-variable">A</span><span class="hljs-operator">:</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><br><span class="hljs-variable">B</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">K</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">I</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">L</span><br><span class="hljs-built_in">E</span><span class="hljs-operator">:</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">M</span><span class="hljs-operator">,</span><span class="hljs-variable">L</span><br><span class="hljs-variable">F</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-operator">,</span><span class="hljs-variable">M</span><br><span class="hljs-variable">G</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><br><span class="hljs-variable">H</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><br><span class="hljs-built_in">I</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><br><span class="hljs-variable">J</span><span class="hljs-operator">:</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><br><span class="hljs-built_in">K</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><br><span class="hljs-variable">L</span><span class="hljs-operator">:</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><br><span class="hljs-variable">M</span><span class="hljs-operator">:</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><br><span class="hljs-built_in">O</span><span class="hljs-operator">:</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-operator">,</span><span class="hljs-built_in">I</span><span class="hljs-operator">,</span><span class="hljs-variable">J</span><br></code></pre></div></td></tr></table></figure><p>  tomcat.log</p>  <figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:32 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /asf.avi HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:32 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bupper.png HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:32 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bupper.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bg-button HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bbutton.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /asf.jpg HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /tomcat.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /tomcat.png HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /tbutton.png HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /tinput.png HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:33 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /tbg.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:34 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /tomcat.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:34 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bg.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:34 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bg-button.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:34 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bg-input.css HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:34 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bd-input.png HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:34 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /bg-input.png HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><span class="hljs-number">192.168.120.23</span> -- <span class="hljs-string">[30/Apr/2018:20:25:34 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /music.mp3 HTTP/1.1&quot;</span> <span class="hljs-number">304</span> -<br><br></code></pre></div></td></tr></table></figure><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><h2 id="Hadoop完全分布式"><a href="#Hadoop完全分布式" class="headerlink" title="Hadoop完全分布式"></a>Hadoop完全分布式</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>主机hadoop:</p><ul><li><p>&#x2F;opt&#x2F;hadoop-3.1.3</p></li><li><p>&#x2F;opt&#x2F;jdk1.8</p></li><li><p>&#x2F;etc&#x2F;profile  # 环境变量位置</p></li><li><p>&#x2F;mnt&#x2F;hgfs# 共享文件夹</p></li></ul><p>node1、node2为hadoop的拷贝</p><h4 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h4><ol><li><p>设置hosts</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/hosts<br>192.168.244.100  hadoop<br>192.168.244.101  node1<br>192.168.244.102  node2<br></code></pre></div></td></tr></table></figure></li><li><p>生成ssh公钥，准备配置三台主机间的ssh连接</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa<br>cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys # 记录公钥<br></code></pre></div></td></tr></table></figure></li></ol><h4 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h4><ol><li><p>VMware克隆node1**（问题一，紧急模式）**</p></li><li><p>配置网络</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts<br>vim ifcfg-ens33 # IPADDR=192.168.244.101  DNS1=114.114.114.114<br></code></pre></div></td></tr></table></figure></li><li><p>配置映射</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/hostname # 修改主机名为node1<br>vim /etc/hosts # 修改ip映射 添加node1、node2<br></code></pre></div></td></tr></table></figure></li><li><p>重新配置本机ssh</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa # 配置免密<br>cd /root/.ssh<br>cat id_rsa.pub &gt;&gt; authorized_keys # 记录公钥<br>chmod 0600 ~/.ssh/authorized_keys # 修改文件权限<br>ssh-copy-id -i hadoop # 将公钥传给主机<br>vim /etc/ssh/sshd_config # 允许root登录 PermitRootLogin yes<br>systemctl enable sshd # 设置ssh服务开机自启<br></code></pre></div></td></tr></table></figure></li><li><p>检查配置</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">terminal</span><br>ssh root@192.168.244.101 # 检测ssh是否正常运行<br>ping 192.168.100 # 检测和其他主机是否连通<br>ping www.baidu.com # 检测网络是否正常<br>ip addr # ip是否正常<br>java -version # java是否正常<br>hadoop -version # hadoop是否正常<br></code></pre></div></td></tr></table></figure></li></ol><h4 id="node2"><a href="#node2" class="headerlink" title="node2"></a>node2</h4><ol><li><p>VMware克隆node2</p></li><li><p>配置网络</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts<br>vim ifcfg-ens33 # IPADDR=192.168.244.102  DNS1=114.114.114.114<br></code></pre></div></td></tr></table></figure></li><li><p>配置映射</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/hostname # 修改主机名为node2<br>vim /etc/hosts # 修改ip映射 添加node1、node2<br></code></pre></div></td></tr></table></figure></li><li><p>重新配置本机ssh</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa # 配置免密<br>cd /root/.ssh<br>cat id_rsa.pub &gt;&gt; authorized_keys # 记录公钥<br>chmod 0600 ~/.ssh/authorized_keys # 修改文件权限<br>ssh-copy-id -i hadoop # 将公钥传给主机<br>vim /etc/ssh/sshd_config # 允许root登录 PermitRootLogin yes<br>systemctl enable sshd # 设置ssh服务开机自启<br></code></pre></div></td></tr></table></figure></li><li><p>检查配置</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">terminal</span><br>ssh root@192.168.244.101 # 检测ssh是否正常运行<br>ping 192.168.100 # 检测和其他主机是否连通<br>ping www.baidu.com # 检测网络是否正常<br>ip addr # ip是否正常<br>java -version # java是否正常<br>hadoop -version # hadoop是否正常<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><ol><li><p>hadoop主机公钥传输给子节点，并测试连接子节点</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop</span><br>ssh-copy-id -i node1<br>ssh-copy-id -i node2<br>ssh node1 # 连接成功<br>ssh node2 # 连接成功<br></code></pre></div></td></tr></table></figure></li><li><p>配置hadoop</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop</span><br>cd /opt/hadoop-3.1.3/etc/hadoop/<br></code></pre></div></td></tr></table></figure><p>① <strong>vim core-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>② <strong>vim hdfs-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 副本数量 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 不检查权限 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>③ <strong>vim mapred-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>④ <strong>vim yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- Site specific YARN configuration properties --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 忽略虚拟内存检查 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>⑤ <strong>vim workers</strong></p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">node1node2<br></code></pre></div></td></tr></table></figure></li><li><p>拷贝共享主机上的hadoop文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoopcp -r /opt/hadoop-3.1.3/etc/hadoop /mnt/hgfs/hadoop_copy# node1rm -rf /opt/hadoop-3.1.3/etc/hadoopcp -r /mnt/hgfs/hadoop_copy /opt/hadoop-3.1.3/etc/hadoop# node2rm -rf /opt/hadoop-3.1.3/etc/hadoopcp -r /mnt/hgfs/hadoop_copy /opt/hadoop-3.1.3/etc/hadoop</span><br></code></pre></div></td></tr></table></figure></li><li><p>配置完毕，在主机hadoop进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rm -rf /opt/hadoop-3.1.3/logsmkdir /opt/hadoop-3.1.3/logshdfs namenode -format<br></code></pre></div></td></tr></table></figure></li><li><p>启动分布式集群**（问题二，bash v3.2+）**</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoopstart-all.sh</span><br></code></pre></div></td></tr></table></figure></li></ol><p>hadoop分布式集群启动成功</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104603.png"></p><p>上传文件成功</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104611.png"></p><p>idea BigDataTools连接成功</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104629.png"></p><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>显示进入紧急模式</p><p>开始不太清楚问题所在，输入root密码后也可以成功进入系统</p><p>但随后，配置网络始终不生效，显示网卡未在运行（systemctl status network），polkit状态为死亡（systemctl status polkit）</p><p>于是查看系统日志发现，是某个挂载未找到对应内容导致的</p><p>随后在通过vim &#x2F;etc&#x2F;fstab找到，是挂载的共享文件夹没有正常配置，因为VMware在新的虚拟机中会默认关闭这个选项，打开后问题成功解决</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104640.png"></p><p>启用共享文件夹</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104647.png"></p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>出现的问题如下图：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104705.png"></p><p>开始看到 “要求bash v3.2+” 比较奇怪，不可能bash版本出问题吧</p><p>随后想到了当前终端并不是bash，而是在配置快捷工具的zsh中</p><p>于是执行以下命令，简单解决 。</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104653.png"></p><hr><h2 id="Zookeeper高性能集群"><a href="#Zookeeper高性能集群" class="headerlink" title="Zookeeper高性能集群"></a>Zookeeper高性能集群</h2><h3 id="软件版本："><a href="#软件版本：" class="headerlink" title="软件版本："></a>软件版本：</h3><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>java</td><td>1.8</td></tr><tr><td>hadoop</td><td>3.1.3</td></tr><tr><td>hbase</td><td>2.3.5</td></tr><tr><td>zookeeper</td><td>3.6.0</td></tr></tbody></table><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104750.png" alt="image-20210715145346435"></p><p>hbase和zookeeper版本对应</p><p><a href="http://hbase.apache.org/book.html#zookeeper">http://hbase.apache.org/book.html#zookeeper</a></p><p>hbase参考：<a href="https://www.w3cschool.cn/hbase_doc/hbase_doc-vxnl2k1n.html">https://www.w3cschool.cn/hbase_doc/hbase_doc-vxnl2k1n.html</a></p><h3 id="配置zk"><a href="#配置zk" class="headerlink" title="配置zk"></a>配置zk</h3><h4 id="hadoop-1"><a href="#hadoop-1" class="headerlink" title="hadoop"></a>hadoop</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cp /mnt/hgfs/apache-zookeeper-3.6.0-bin.tar.gz /opt<br>cp /mnt/hgfs/hbase-2.3.5-bin.tar.gz /opt<br>cd /opt<br>tar -xvf apache-zookeeper-3.6.0-bin.tar.gz<br>tar -xvf hbase-2.3.5-bin.tar.gz<br>rm -rf /opt/apache-zookeeper-3.6.0-bin.tar.gz<br>rm -rf /opt/hbase-2.3.5-bin.tar.gz<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd opt<br>mv apache-zookeeper-3.6.0-bin zookeeper-3.6.0<br>cd zookeeper-3.6.0/conf<br>cp zoo_sample.cfg zoo.cfg<br>vim zoo.cfg<br></code></pre></div></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 修改</span><br><span class="hljs-attr">dataDir</span>=<span class="hljs-string">/opt/zookeeper-3.6.0/tmp</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 添加</span><br><span class="hljs-attr">server.1</span>=<span class="hljs-string">hadoop:2888:3888</span><br><span class="hljs-attr">server.2</span>=<span class="hljs-string">node1:2888:3888</span><br><span class="hljs-attr">server.3</span>=<span class="hljs-string">node2:2888:3888</span><br></code></pre></div></td></tr></table></figure><p>vim &#x2F;etc&#x2F;profile</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 添加</span><br><span class="hljs-attr">export</span> <span class="hljs-string">ZOOKEEPER_HOME=/opt/zookeeper-3.6.0</span><br><span class="hljs-attr">export</span> <span class="hljs-string">PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></code></pre></div></td></tr></table></figure><p>source &#x2F;etc&#x2F;profile</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /opt/zookeeper-3.6.0  # zookeeper-3.6.0目录下<br>mkdir tmp<br>touch tmp/myid<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">共享配置好的zookeeper文件</span><br>cp -r /opt/zookeeper-3.6.0 /mnt/hgfs<br></code></pre></div></td></tr></table></figure><h4 id="node1-1"><a href="#node1-1" class="headerlink" title="node1"></a>node1</h4><p>cp -r &#x2F;mnt&#x2F;hgfs&#x2F;zookeeper-3.6.0 &#x2F;opt&#x2F;</p><p>vim &#x2F;etc&#x2F;profile</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 添加</span><br><span class="hljs-attr">export</span> <span class="hljs-string">ZOOKEEPER_HOME=/opt/zookeeper-3.6.0</span><br><span class="hljs-attr">export</span> <span class="hljs-string">PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></code></pre></div></td></tr></table></figure><p>source &#x2F;etc&#x2F;profile</p><h4 id="node2-1"><a href="#node2-1" class="headerlink" title="node2"></a>node2</h4><p>cp -r &#x2F;mnt&#x2F;hgfs&#x2F;zookeeper-3.6.0 &#x2F;opt&#x2F;</p><p>vim &#x2F;etc&#x2F;profile</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 添加</span><br><span class="hljs-attr">export</span> <span class="hljs-string">ZOOKEEPER_HOME=/opt/zookeeper-3.6.0</span><br><span class="hljs-attr">export</span> <span class="hljs-string">PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></code></pre></div></td></tr></table></figure><p>source &#x2F;etc&#x2F;profile</p><h4 id="综合-启动时出现错误1"><a href="#综合-启动时出现错误1" class="headerlink" title="综合(启动时出现错误1)"></a>综合(启动时出现错误1)</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop</span><br>echo 1 &gt; /opt/zookeeper-3.6.0/tmp/myid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">node1</span><br>echo 2 &gt; /opt/zookeeper-3.6.0/tmp/myid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">node2</span><br>echo 3 &gt; /opt/zookeeper-3.6.0/tmp/myid<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop</span><br>/opt/zookeeper-3.6.0/bin/zkServer.sh start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">node1</span><br>/opt/zookeeper-3.6.0/bin/zkServer.sh start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">node2</span><br>/opt/zookeeper-3.6.0/bin/zkServer.sh start<br></code></pre></div></td></tr></table></figure><p>查看版本（错误2）</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104906.png"></p><h4 id="zk配置成功"><a href="#zk配置成功" class="headerlink" title="zk配置成功"></a>zk配置成功</h4><p>启动成功</p><p>查看状态，一个leader，两个follower</p><p>查看版本</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104923.png"></p><h4 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h4><p>启动失败</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104934.png"></p><p>查看日志logs</p><p>​错误: 找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain</p><p>查阅文档发现，-bin的包才是我们需要的，重新下载进行配置</p><h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h4><p>命令不在白名单</p><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoopvim /opt/zookeeper-3.6.0/conf/zoo.cfgecho <span class="hljs-built_in">stat</span>|nc localhost 2181</span><br></code></pre></div></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 添加 开启4字命令4lw.commands.whitelist=*</span><br></code></pre></div></td></tr></table></figure><h3 id="hadoop文件修改"><a href="#hadoop文件修改" class="headerlink" title="hadoop文件修改"></a>hadoop文件修改</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoopcd /opt/hadoop-3.1.3/etc/hadoop/</span><br></code></pre></div></td></tr></table></figure><p>① <strong>vim core-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://myha01/<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>131072<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 添加：指定zookeeper地址 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ha.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:2181,node1:2181,node2:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ha.zookeeper.session-timeout.ms<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>hadoop链接zookeeper的超时时长设置ms<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>② <strong>vim hdfs-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 副本数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/hadoop-3.1.3/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///opt/hadoop-3.1.3/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 不检查权限 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.nameservices<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>myha01<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- myha01(core中指定)下面有两个NameNode，分别是nn1，nn2 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.namenodes.myha01<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>nn1,nn2,nn3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.myha01.nn1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.myha01.nn1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- nn2的RPC通信地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.myha01.nn2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- nn2的http通信地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.myha01.nn2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- nn3的RPC通信地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.myha01.nn3<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- nn3的http通信地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address.myha01.nn3<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定NameNode的edits元数据的共享存储位置。也就是JournalNode列表                          该url的配置格式：qjournal://host1:port1;host2:port2;host3:port3/journalId        journalId推荐使用nameservice，默认端口号是：8485 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>qjournal://hadoop:8485;node1:8485;node2:8485/myha01<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/journaldata<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 开启NameNode失败自动切换 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.failover.proxy.provider.myha01<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>            sshfence        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 配置sshfence隔离机制超时时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.ha.fencing.ssh.connect-timeout<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>30000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ha.failover-controller.cli-check.rpc-timeout.ms<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>60000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>③ <strong>vim mapred-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobtracker.http.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:50030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 历史服务器端地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 历史服务器web端地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapred.job.tracker<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://hadoop:9001<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>④ <strong>vim yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 忽略虚拟内存检查 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 开启RM高可用 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定RM的cluster id --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yrc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定RM的名字 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rm1,rm2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 分别指定RM的地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 指定zk集群地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:2181,node1:2181,node2:2181<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 开启日志聚集功能 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://hadoop:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 设置日志保留时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>86400<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 启用自动恢复 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 制定resourcemanager的状态信息存储在zookeeper集群上 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/etc/hadoop:/opt/hadoop-3.1.3/share/hadoop/common/lib/*:/opt/hadoop-3.1.3/share/hadoop/common/*:/opt/hadoop-3.1.3/share/hadoop/hdfs:/opt/hadoop-3.1.3/share/hadoop/hdfs/lib/*:/opt/hadoop-3.1.3/share/hadoop/hdfs/*:/opt/hadoop-3.1.3/share/hadoop/mapreduce/lib/*:/opt/hadoop-3.1.3/share/hadoop/mapreduce/*:/opt/hadoop-3.1.3/share/hadoop/yarn:/opt/hadoop-3.1.3/share/hadoop/yarn/lib/*:/opt/hadoop-3.1.3/share/hadoop/yarn/*<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>将文件共享给子节点</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoopscp -r /opt/hadoop-3.1.3/etc/hadoop node1:/opt/hadoop-3.1.3/etcscp -r /opt/hadoop-3.1.3/etc/hadoop node2:/opt/hadoop-3.1.3/etc</span><br></code></pre></div></td></tr></table></figure><p>初始化（错误3）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop node1 node2zkServer.sh starthadoop-daemon.sh start journalnode# hadoophdfs namenode -formatscp -r /opt/hadoop-3.1.3/name/current node1:/opt/hadoop-3.1.3/namescp -r /opt/hadoop-3.1.3/name/current node2:/opt/hadoop-3.1.3/name# hadoophdfs zkfc -formatZKhadoop-daemon.sh start zkfc <span class="hljs-comment"># 尝试运行start-dfs.sh # 尝试运行（错误3）start-yarn.sh # 尝试运行</span></span><br></code></pre></div></td></tr></table></figure><p>运行命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop node1 node2zkServer.sh start# hadoop-daemon.sh start journalnode# hadoop-daemon.sh start zkfcstart-all.sh</span><br></code></pre></div></td></tr></table></figure><p>关闭命令（错误5）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoopstop-all.sh（错误5）hadoop-daemon.sh stop zkfchadoop-daemon.sh stop journalnodezkServer.sh stop</span><br></code></pre></div></td></tr></table></figure><h3 id="运行成功"><a href="#运行成功" class="headerlink" title="运行成功"></a>运行成功</h3><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104947.png"></p><p>后台状态运行正常（两个namenode）</p><p>分布式文件系统使用正常</p><p>查看（node1、node2）中namenode状态</p><p>准备杀死node1：active</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716104958.png"></p><p>可以看到node1中namenode已被杀死</p><p>node2中namenode状态自动转为active</p><p>网页访问</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716105008.png"></p><h4 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h4><p>journaldata中有数据存在使得journalnode格式化失败</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716105022.png"></p><p>修改journaldata存放地址</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716105039.png"></p><p>为：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716105047.png"></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /opt/hadoop-3.1.3rm -rf data/journaldatamkdir journaldata<br></code></pre></div></td></tr></table></figure><h4 id="错误4"><a href="#错误4" class="headerlink" title="错误4"></a>错误4</h4><p>没有指定HDFS_JOURNALNODE_USER</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716105056.png"></p><p>此时hadoop整体能够运行</p><p>联系第一次配置时分析，应该是需要修改sh文件指定执行者</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /opt/hadoop-3.1.3/sbinvim start-dfs.shHDFS_JOURNALNODE_USER=rootHDFS_ZKFC_USER=rootvim stop-dfs.shHDFS_JOURNALNODE_USER=rootHDFS_ZKFC_USER=root<br></code></pre></div></td></tr></table></figure><p>子节点同样修改</p><h4 id="错误5"><a href="#错误5" class="headerlink" title="错误5"></a>错误5</h4><p>namenode没有正常关闭</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716105105.png"></p><p>查阅资料发现问题是任务的不正常结束</p><p>另外在hadoop2中还发现存在pid文件的不安全问题</p><p>先尝试清理数据文件并重新初始化，成功解决</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /opt/hadoop-3.1.3rm -rf datarm -rf namerm -rf tmprm -rf journaldatarm -rf logsmkdir datamkdir namemkdir tmpmkdir journaldatamkdir logs<br></code></pre></div></td></tr></table></figure><hr><p>历史服务器及高可用性</p><h2 id="历史服务器"><a href="#历史服务器" class="headerlink" title="历史服务器"></a>历史服务器</h2><h3 id="hadoop-2"><a href="#hadoop-2" class="headerlink" title="hadoop"></a>hadoop</h3><p>vim mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 历史服务器端地址 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 历史服务器web端地址 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>vim yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启日志聚集功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://hadoop102:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志保留时间为7天 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>分发配置</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp -r /opt/hadoop-3.1.3/etc/hadoop node1:/opt/hadoop-3.1.3/etc<br>scp -r /opt/hadoop-3.1.3/etc/hadoop node2:/opt/hadoop-3.1.3/etc<br>mapred --daemon start historyserver<br></code></pre></div></td></tr></table></figure><p>进入以下网址查看日志：<a href="https://hadoop:19888/jobhistory">https://hadoop:19888/jobhistory</a></p><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建测试文件</span><br>hdfs dfs -mkdir /test<br>vim a.txt<br>hdfs dfs -put a.txt /test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果HDFS有/output目录删除</span><br>hdfs dfs -rmr /output<br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行mapreduce程序</span><br>hadoop jar /opt/hadoop-3.1.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /test /output<br></code></pre></div></td></tr></table></figure><h3 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h3><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /opt/hadoop-3.1.3/etc/hadoop<br>vim dfs.hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">hadoop</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">node1</span><br></code></pre></div></td></tr></table></figure><p>vim hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/etc/hadoop/dfs.hosts<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>分发:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">scp</span> -r /opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etc/hadoop node1:/opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etc<br><span class="hljs-attribute">scp</span> -r /opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etc/hadoop node2:/opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etc<br></code></pre></div></td></tr></table></figure><p>仅允许hadoop、node1加入集群，node2就无法加入集群</p><p>检测：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新节点</span><br>hdfs dfsadmin -refreshNodes <br></code></pre></div></td></tr></table></figure><p>node2将无法加入集群</p><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /opt/hadoop-3.1.3/etc/hadoopvim dfs.hosts.exclude# node2<br></code></pre></div></td></tr></table></figure><p>vim hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.hosts.exclude<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/etc/hadoop/dfs.hosts.exclude<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>分发:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">scp</span> -r /opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etc/hadoop node1:/opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etcscp -r /opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etc/hadoop node2:/opt/hadoop-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>/etc<br></code></pre></div></td></tr></table></figure><p>仅允许hadoop、node1加入集群，node2就无法加入集群</p><p>检测：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新节点hdfs dfsadmin -refreshNodesyarn rmadmin -refreshNodes</span><br></code></pre></div></td></tr></table></figure><p>node2节点状态将变为：decommission in progress（退役中）</p><p>在一段时间后变为decommissioned（所有块已经复制完成）</p>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>FLume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第五天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="aFlume"><a href="#aFlume" class="headerlink" title="aFlume"></a>aFlume</h1><h2 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h2><h3 id="Avro-Sink"><a href="#Avro-Sink" class="headerlink" title="Avro Sink"></a>Avro Sink</h3><ol><li><p>AVRO Sink将数据利用AVRO序列化之后写出，结合AVRO Source可以实现多级、扇入和扇出流动</p></li><li><p>多级流动</p><ol><li><p>第一个节点配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">netcat</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sinks.k1.hostname</span> = <span class="hljs-string">hadoop02</span><br><span class="hljs-attr">a1.sinks.k1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>第二个节点配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sinks.k1.hostname</span> = <span class="hljs-string">hadoop03</span><br><span class="hljs-attr">a1.sinks.k1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>第三个节点配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">logger</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f duoji.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>扇入流动</p><ol><li><p>第一个和第二节点的配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">netcat</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sinks.k1.hostname</span> = <span class="hljs-string">hadoop03</span><br><span class="hljs-attr">a1.sinks.k1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>第三个节点的配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">logger</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>扇出流动</p><ol><li><p>第一个节点的配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1 c2</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1 k2</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">netcat</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.channels.c2.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sinks.k1.hostname</span> = <span class="hljs-string">hadoop02</span><br><span class="hljs-attr">a1.sinks.k1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.sinks.k2.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sinks.k2.hostname</span> = <span class="hljs-string">hadoop03</span><br><span class="hljs-attr">a1.sinks.k2.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1 c2</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k2.channel</span> = <span class="hljs-string">c2</span><br></code></pre></div></td></tr></table></figure></li><li><p>第二个和第三个节点的配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">logger</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li></ol></li></ol><hr><h3 id="Custom-Sink"><a href="#Custom-Sink" class="headerlink" title="Custom Sink"></a>Custom Sink</h3><ol><li><p>如果需要自定义Sink，那么需要考虑定义一个类实现<code>Sink</code>接口，同时需要考虑让这个类实现<code>Configurable</code>接口</p></li><li><p>在定义Sink的时候，需要注意Flume中的事务问题</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716130726.png"></p></li><li><p>配置</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">http</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-attr">a1.channels.c1.capacity</span> = <span class="hljs-string">10000</span><br><span class="hljs-attr">a1.channels.c1.transactionCapacity</span> = <span class="hljs-string">100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置自定义Sink - 需要指定类的全路径名</span><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">cn.tedu.flume.sink.AuthSink</span><br><span class="hljs-attr">a1.sinks.k1.path</span> = <span class="hljs-string">/opt/flumedata</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f authsink.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>发送POST请求</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">curl -X POST -d <span class="hljs-string">&#x27;[&#123;&quot;headers&quot;:&#123;&quot;class&quot;:&quot;big data&quot;&#125;,&quot;body&quot;:&quot;大数据实训&quot;&#125;]&#x27;</span> http://hadoop:8090<br></code></pre></div></td></tr></table></figure></li></ol><hr><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>Flume-&gt;sink(Package)-&gt;AuthSink.java:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.tedu.flume.sink;<br><br><span class="hljs-keyword">import</span> org.apache.flume.*;<br><span class="hljs-keyword">import</span> org.apache.flume.conf.Configurable;<br><span class="hljs-keyword">import</span> org.apache.flume.sink.AbstractSink;<br><br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">// 模拟：File Roll Sink，将数据写到指定的目录下</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthSink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSink</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sink</span>, Configurable &#123;<br><br>    <span class="hljs-keyword">private</span> String path;<br>    <span class="hljs-keyword">private</span> PrintStream ps;<br><br>    <span class="hljs-comment">// 获取属性值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">// 获取用户指定的存储路径</span><br>        path = context.getString(<span class="hljs-string">&quot;path&quot;</span>);<br>        <span class="hljs-comment">// 判断用户是否指定了存储路径</span><br>        <span class="hljs-keyword">if</span> (path == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;没有指定path属性!!!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 启动Sink</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 初始化流</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(path + <span class="hljs-string">&quot;/&quot;</span> + System.currentTimeMillis());<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Status <span class="hljs-title function_">process</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 获取Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getChannel();<br>        <span class="hljs-comment">// 获取事务</span><br>        <span class="hljs-type">Transaction</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> c.getTransaction();<br>        <span class="hljs-comment">// 开启事务</span><br>        t.begin();<br>        <span class="hljs-comment">// 构建Event来存储数据</span><br>        Event e;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 从Channel中来获取数据</span><br>            <span class="hljs-keyword">while</span> ((e = c.take()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 写出headers部分</span><br>                ps.println(<span class="hljs-string">&quot;headers:&quot;</span>);<br>                Map&lt;String, String&gt; headers = e.getHeaders();<br>                <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; header : headers.entrySet()) &#123;<br>                    ps.println(<span class="hljs-string">&quot;\t&quot;</span> + header.getKey() + <span class="hljs-string">&quot;=&quot;</span> + header.getValue());<br>                &#125;<br>                <span class="hljs-comment">// 写出body部分</span><br>                ps.println(<span class="hljs-string">&quot;body:&quot;</span>);<br>                <span class="hljs-type">byte</span>[] body = e.getBody();<br>                ps.println(<span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body, StandardCharsets.UTF_8));<br>            &#125;<br>            <span class="hljs-comment">// 提交事务</span><br>            t.commit();<br>            <span class="hljs-keyword">return</span> Status.READY;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            ex.printStackTrace();<br>            <span class="hljs-comment">// 事务回滚</span><br>            t.rollback();<br>            <span class="hljs-keyword">return</span> Status.BACKOFF;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭事务</span><br>            t.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭Sink</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>)<br>            ps.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Flume-&gt;source(Package)-&gt;AuthSource.java:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.tedu.flume.source;<br><br><span class="hljs-keyword">import</span> org.apache.flume.Context;<br><span class="hljs-keyword">import</span> org.apache.flume.Event;<br><span class="hljs-keyword">import</span> org.apache.flume.EventDrivenSource;<br><span class="hljs-keyword">import</span> org.apache.flume.channel.ChannelProcessor;<br><span class="hljs-keyword">import</span> org.apache.flume.conf.Configurable;<br><span class="hljs-keyword">import</span> org.apache.flume.event.EventBuilder;<br><span class="hljs-keyword">import</span> org.apache.flume.source.AbstractSource;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">// 模拟：Sequence Generator Source</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EventDrivenSource</span>, Configurable &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> step; <span class="hljs-comment">// 步长</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> end; <span class="hljs-comment">// 终止范围</span><br>    <span class="hljs-keyword">private</span> ExecutorService es; <span class="hljs-comment">// 线程池</span><br><br>    <span class="hljs-comment">// 获取指定属性值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">// 如果用户指定了步长，就按照指定步长来递增；如果用户没有指定，那么步长默认为1</span><br>        step = context.getLong(<span class="hljs-string">&quot;step&quot;</span>, <span class="hljs-number">1L</span>);<br>        <span class="hljs-comment">// 如果用户指定了范围，就递增到指定的范围；如果用户没有指定，那么范围就是Long.MAX_VALUE</span><br>        end = context.getLong(<span class="hljs-string">&quot;end&quot;</span>, Long.MAX_VALUE);<br>    &#125;<br><br>    <span class="hljs-comment">// 启动Source</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 初始化线程池</span><br>        es = Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">// 获取通道处理器用于处理数据</span><br>        <span class="hljs-type">ChannelProcessor</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getChannelProcessor();<br>        <span class="hljs-comment">// 提交任务</span><br>        es.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Add</span>(step, end, cp));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (es != <span class="hljs-literal">null</span>)<br>            es.shutdown();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Add</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> step;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> end;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ChannelProcessor cp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">long</span> step, <span class="hljs-type">long</span> end, ChannelProcessor cp)</span> &#123;<br>        <span class="hljs-built_in">this</span>.step = step;<br>        <span class="hljs-built_in">this</span>.end = end;<br>        <span class="hljs-built_in">this</span>.cp = cp;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; end; i += step) &#123;<br>            <span class="hljs-comment">// 构建headers</span><br>            Map&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            headers.put(<span class="hljs-string">&quot;time&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-comment">// 构建body</span><br>            <span class="hljs-type">byte</span>[] body = (i + <span class="hljs-string">&quot;&quot;</span>).getBytes(StandardCharsets.UTF_8);<br>            <span class="hljs-comment">// 需要将数据封装成Event对象</span><br>            <span class="hljs-type">Event</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> EventBuilder.withBody(body, headers);<br>            <span class="hljs-comment">// 需要将封装好的Event传递给Channel</span><br>            cp.processEvent(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第四天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="安装Flume"><a href="#安装Flume" class="headerlink" title="安装Flume"></a>安装Flume</h1><ol><li><p>将<code>apache-flume-1.9.0-bin.tar.gz</code>上传至虚拟机的&#x2F;opt文件夹下并解压：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -xvf apache-flume-1.9.0-bin.tar.gz<br></code></pre></div></td></tr></table></figure></li><li><p>修改启动脚本参数</p><p>进入apache-flume-1.9.0-bin&#x2F;conf</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cp flume-env.sh.template flume-env.sh<br><br>vim flume-env.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加</span><br>export $JAVA_HOME=/opt/jdk1.8.0_181<br></code></pre></div></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加</span><br>export FLUME_HOME=/opt/apache-flume-1.9.0-bin<br>export PATH=$PATH:$FLUME_HOME/bin<br><br>source /etc/profile<br></code></pre></div></td></tr></table></figure></li><li><p>检测是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">flume-ng version<br></code></pre></div></td></tr></table></figure><p>输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Flume 1.9.0<br>Source code repository: https://git-wip-us.apache.org/repos/asf/flume.git<br>Revision: d4fcab4f501d41597bc616921329a4339f73585e<br>Compiled by fszabo on Mon Dec 17 20:45:25 CET 2018<br>From source with checksum 35db629a3bda49d23e9b3690c80737f9<br></code></pre></div></td></tr></table></figure></li></ol><h1 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h1><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><h3 id="AVRO-Source"><a href="#AVRO-Source" class="headerlink" title="AVRO Source"></a>AVRO Source</h3><ol><li><p>AVRO是Apache提供的一套序列化反序列化机制，AVRO的序列化机制能够跨平台跨语言</p></li><li><p>AVRO Source实际上是用于接收被AVRO序列化之后的数据，结合AVRO Sink可以实现多级、扇入以及扇出流动</p></li><li><p>配置案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#配置一个agent，agent的名称可以自定义（如a1）</span><br><span class="hljs-comment">#指定agent的sources（如s1）、sinks（如k1）、channels（如c1）</span><br><span class="hljs-comment">#分别指定agent的sources，sinks,channels的名称 名称可以自定义</span><br><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置source</span><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">avro</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">172.16.132.6</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">6666</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置channels</span><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置sinks</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">logger</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#为sources和sinks绑定channels</span><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f avrosource.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>利用AVRO客户端将文件序列化之后发送给Flume</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng avro-client -H hadoop -p 6666 -F a.txtou<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210715195231.png"></p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210715195131.png"></p></li></ol></li></ol><h3 id="Exec-Source"><a href="#Exec-Source" class="headerlink" title="Exec Source"></a>Exec Source</h3><ol><li><p>Exec Source会监听指定的命令，会将这个命令的执行结果作为日志来进行收集</p></li><li><p>案例：监听文件，如果文件中新添了数据，自动收集文件中新添的数据</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1# 配置Exec Sourcea1.sources.s1.type = exec# 指定监听的命令a1.sources.s1.command = tail -F /opt/a.txt# 指定命令类型a1.sources.s1.shell = /bin/bash -ca1.channels.c1.type = memorya1.sinks.k1.type = loggera1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动Flume</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f execsource.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="Sequence-Generator-Source"><a href="#Sequence-Generator-Source" class="headerlink" title="Sequence Generator Source"></a>Sequence Generator Source</h3><ol><li><p>Sequence Generator Source是一个序列产生器，会从0开始递增，递增到totalEvents</p></li><li><p>totalEvents如果不指定，则默认是Long.MAX_VALUE，即2^63^-1</p></li><li><p>案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1# 配置Sequence Generator Sourcea1.sources.s1.type = seq# 指定递增的最大值a1.sources.s1.totalEvents = 1000a1.channels.c1.type = memorya1.sinks.k1.type = loggera1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f seqsource.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="Spooling-Directory-Source"><a href="#Spooling-Directory-Source" class="headerlink" title="Spooling Directory Source"></a>Spooling Directory Source</h3><ol><li><p>Spooling Directory Source会监听指定的目录，如果指定的目录下产生了新的文件，那么会将这个新文件中的内容自动的进行按行收集</p></li><li><p>被收集完的文件会自动添加一个后缀.COMPLETED</p></li><li><p>案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1# 配置Spooling Directory Sourcea1.sources.s1.type = spooldir# 要监听的目录a1.sources.s1.spoolDir = /opt/flumedataa1.channels.c1.type = memorya1.sinks.k1.type = loggera1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f spooldirsource.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="HTTP-Source"><a href="#HTTP-Source" class="headerlink" title="HTTP Source"></a>HTTP Source</h3><ol><li><p>HTTP Source监听HTTP请求，只能用于监听GET和POST请求。其中对于GET请求的监听只处于实验阶段，所以实际过程中只用这个Source来监听POST请求</p></li><li><p>案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1# 配置HTTP Sourcea1.sources.s1.type = http# 要监听的端口a1.sources.s1.port = 8090a1.channels.c1.type = memorya1.sinks.k1.type = loggera1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/conf -f httpsource.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>发送POST请求</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">curl -X POST -d <span class="hljs-string">&#x27;[&#123;&quot;headers&quot;:&#123;&quot;date&quot;:&quot;2021-07-14&quot;&#125;,&quot;body&quot;:&quot;hello class&quot;&#125;]&#x27;</span> http://hadoop:8090<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="Custom-Source"><a href="#Custom-Source" class="headerlink" title="Custom Source"></a>Custom Source</h3><ol><li><p>在Flume中，如果Flume原生提供的Source不能适用指定场景，那么此时就可以考虑自定义Source</p></li><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1# 配置自定义Source - 指定全路径名a1.sources.s1.type = cn.tedu.flume.source.AuthSource# 指定步长a1.sources.s1.step = 5# 指定终止范围a1.sources.s1.end = 100a1.channels.c1.type = memorya1.sinks.k1.type = loggera1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><h3 id="Memory-Channel"><a href="#Memory-Channel" class="headerlink" title="Memory Channel"></a>Memory Channel</h3><ol><li><p>Memory Channel将Source收集来的数据临时放到内存的队列中，因此这个Channel的读写速度相对较快但是不可靠</p></li><li><p>通过capacity属性来定义队列的容量。如果队列被放慢，那么后来的数据就会被阻塞。capactiy如果不指定则默认值为为100，实际开发中，一般会将这个值调节为300000~500000</p></li><li><p>属性transactionCapacity表示事务容量，实际上表示了每次发送或者接收的数据量。transactionCapacity默认也是100，实际开发过程中，会考虑将这个值调节为3000~5000</p></li><li><p>案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1a1.sources.s1.type = netcata1.sources.s1.bind = 0.0.0.0a1.sources.s1.port = 8090# 配置Memory Channela1.channels.c1.type = memory# 指定容量a1.channels.c1.capacity = 100000# 指定数据的批量a1.channels.c1.transactionCapacity = 1000a1.sinks.k1.type = loggera1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/bin -f memory.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>发送数据</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nc hadoop 8090<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="File-Channel"><a href="#File-Channel" class="headerlink" title="File Channel"></a>File Channel</h3><ol><li><p>File Channel将Source收集来的数据以文件形式存储到本地磁盘上，所以这个Channel的读写速度慢但是可靠</p></li><li><p>在存储的时候，如果不指定，那么会放在<code>~/.flume/file-channel/data</code>路径下</p></li><li><p>案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1a1.sources.s1.type = netcata1.sources.s1.bind = 0.0.0.0a1.sources.s1.port = 8090# 配置File Channela1.channels.c1.type = file# 指定在磁盘上的临时存储路径a1.channels.c1.dataDirs = /opt/flumedataa1.sinks.k1.type = loggera1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/bin -f filechannel.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>发送数据</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nc hadoop 8090<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="JDBC-Channel"><a href="#JDBC-Channel" class="headerlink" title="JDBC Channel"></a>JDBC Channel</h3><ol><li>JDBC Channel是将Source收集的数据临时存储到数据库中，因为数据库存在索引的问题，所以理论上这个JDBC Channel的效率要高于File Channel但是低于Memory Channel</li><li>JDBC Channel到目前为止仅仅支持Derby(微型数据库、单连接)。正因为采用的是Derby库，所以实际开发中不用这个JDBC Channel</li></ol><h2 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h2><h3 id="HDFS-Sink"><a href="#HDFS-Sink" class="headerlink" title="HDFS Sink"></a>HDFS Sink</h3><ol><li><p>HDFS Sink将数据写到HDFS上。在写数据的时候，默认是每隔30s在HDFS上生成一个新的文件，那么这会导致HDFS上生成大量的小文件，所以实际过程中需要改变这个值</p></li><li><p>HDFS Sink在讲数据写到HDFS上的时候，还需要考虑文件类型。Flume支持三种文件类型：SequenceFil(序列文件)、DataStream(文本文件)、CompressedStream(压缩文件)</p></li><li><p>案例</p><ol><li><p>启动HDFS</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">start-dfs.sh<br></code></pre></div></td></tr></table></figure></li><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1a1.channels = c1a1.sinks = k1a1.sources.s1.type = netcata1.sources.s1.bind = 0.0.0.0a1.sources.s1.port = 8090a1.channels.c1.type = memorya1.channels.c1.capacity = 10000a1.channels.c1.transactionCapacity = 100# 配置HDFS Sinka1.sinks.k1.type = hdfs# 指定在HDFS上的存储路径a1.sinks.k1.hdfs.path = hdfs://hadoop:9000/flumedata/test# 指定文件的滚动间隔时间a1.sinks.k1.hdfs.rollInterval = 3600# 指定文件的存储类型a1.sinks.k1.hdfs.fileType = DataStreama1.sources.s1.channels = c1a1.sinks.k1.channel = c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/bin -f hdfssink.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>发送数据</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nc hadoop 8090<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="Logger-Sink"><a href="#Logger-Sink" class="headerlink" title="Logger Sink"></a>Logger Sink</h3><ol><li><p>Logger Sink表示将数据打印到指定位置上，一般是控制台上</p></li><li><p>在打印的时候，为了防止过多的数据将控制台占满，所以默认打印body部分的数据不超过16个字节，可以通过maxBytesToLog来配置</p></li><li><p>Logger Sink在打印数据的时候，对中文支持不好</p></li><li><p>案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">netcat</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-attr">a1.channels.c1.capacity</span> = <span class="hljs-string">10000</span><br><span class="hljs-attr">a1.channels.c1.transactionCapacity</span> = <span class="hljs-string">1000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置Logger Sink</span><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">logger</span><br><span class="hljs-comment"># 指定body部分打印的字节个数</span><br><span class="hljs-attr">a1.sinks.k1.maxBytesToLog</span> = <span class="hljs-string">20</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/bin -f loggersink.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>发送数据</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nc hadoop 8090<br></code></pre></div></td></tr></table></figure></li></ol></li></ol><h3 id="File-Roll-Sink"><a href="#File-Roll-Sink" class="headerlink" title="File Roll Sink"></a>File Roll Sink</h3><ol><li><p>File Roll Sink将数据最终写到执行的目录下。在写的时候同样是每隔30s会生成一个小文件，所以实际过程中需要调节大小</p></li><li><p>案例</p><ol><li><p>格式文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">a1.sources</span> = <span class="hljs-string">s1</span><br><span class="hljs-attr">a1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks</span> = <span class="hljs-string">k1</span><br><br><span class="hljs-attr">a1.sources.s1.type</span> = <span class="hljs-string">netcat</span><br><span class="hljs-attr">a1.sources.s1.bind</span> = <span class="hljs-string">0.0.0.0</span><br><span class="hljs-attr">a1.sources.s1.port</span> = <span class="hljs-string">8090</span><br><br><span class="hljs-attr">a1.channels.c1.type</span> = <span class="hljs-string">memory</span><br><span class="hljs-attr">a1.channels.c1.capacity</span> = <span class="hljs-string">10000</span><br><span class="hljs-attr">a1.channels.c1.transactionCapacity</span> = <span class="hljs-string">100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置File Roll Sink</span><br><span class="hljs-attr">a1.sinks.k1.type</span> = <span class="hljs-string">file_roll</span><br><span class="hljs-comment"># 指定数据的存储目录</span><br><span class="hljs-attr">a1.sinks.k1.sink.directory</span> = <span class="hljs-string">/opt/flumedata</span><br><span class="hljs-comment"># 指定文件滚动的间隔时间</span><br><span class="hljs-attr">a1.sinks.k1.sink.rollInterval</span> = <span class="hljs-string">3600</span><br><br><span class="hljs-attr">a1.sources.s1.channels</span> = <span class="hljs-string">c1</span><br><span class="hljs-attr">a1.sinks.k1.channel</span> = <span class="hljs-string">c1</span><br></code></pre></div></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">flume-ng agent -n a1 -c <span class="hljs-variable">$FLUME_HOME</span>/bin -f filerollsink.conf -Dflume.root.logger=INFO,console<br></code></pre></div></td></tr></table></figure></li><li><p>发送数据</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nc hadoop 8090<br></code></pre></div></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>Flume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第三天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="InputFormat-输入格式"><a href="#InputFormat-输入格式" class="headerlink" title="InputFormat - 输入格式"></a>InputFormat - 输入格式</h3><ol><li>InputFormat发生在Mapper之前，需要先读取数据，然后将读取出来的数据交给Mapper处理，所以InputFormat读取出来的数据是什么样子，那么Mapper就是什么样子</li><li>如果不指定，那么MapReduce默认使用的是TextInputFormat，TextInputFormat在读取数据的时候，默认是按行读取数据，读取出来的数据的键是数据的字节偏移量，值是读取的这一行数据</li><li>在MapReduce中，只有BZip2对应的压缩文件可以切片，其他的压缩文件都是不可切片的</li><li>自定义输入格式：需要定义一个类继承FileInputFormat，覆盖<code>createRecordReader</code>方法</li><li>多源输入：在MapReduce中允许指定多个不同的输入路径，同时处理多个文件。而这多个文件的格式可以不一样，可以利用Mapper来统一格式，最终交给Reducer来进行处理</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="authinput（Package）"><a href="#authinput（Package）" class="headerlink" title="authinput（Package）"></a>authinput（Package）</h3><p>数据（score2.txt）：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tom</span><br><span class="hljs-attribute">math</span> <span class="hljs-number">90</span><br><span class="hljs-attribute">english</span> <span class="hljs-number">98</span><br><span class="hljs-attribute">jary</span><br><span class="hljs-attribute">math</span> <span class="hljs-number">78</span><br><span class="hljs-attribute">english</span> <span class="hljs-number">87</span><br><span class="hljs-attribute">rose</span><br><span class="hljs-attribute">math</span> <span class="hljs-number">87</span><br><span class="hljs-attribute">english</span> <span class="hljs-number">90</span><br><span class="hljs-attribute">bob</span><br><span class="hljs-attribute">math</span> <span class="hljs-number">67</span><br><span class="hljs-attribute">english</span> <span class="hljs-number">87</span><br><span class="hljs-attribute">alex</span><br><span class="hljs-attribute">math</span> <span class="hljs-number">59</span><br><span class="hljs-attribute">english</span> <span class="hljs-number">80</span><br><span class="hljs-attribute">helen</span><br><span class="hljs-attribute">math</span> <span class="hljs-number">79</span><br><span class="hljs-attribute">english</span> <span class="hljs-number">60</span><br></code></pre></div></td></tr></table></figure><ol><li><p>AuthInputFormat.java：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.authinput;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.InputSplit;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.RecordReader;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileSplit;<br><span class="hljs-keyword">import</span> org.apache.hadoop.util.LineReader;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URI;<br><br><span class="hljs-comment">// 泛型表示读取出来的数据类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthInputFormat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileInputFormat</span>&lt;Text, Text&gt; &#123;<br>    <span class="hljs-comment">// 需要在这种方法中定义流来读取数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RecordReader&lt;Text, Text&gt; <span class="hljs-title function_">createRecordReader</span><span class="hljs-params">(InputSplit split, TaskAttemptContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthReader</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthReader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecordReader</span>&lt;Text, Text&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> LineReader reader;<br>    <span class="hljs-keyword">private</span> Text key;<br>    <span class="hljs-keyword">private</span> Text value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> len;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 在初始化过程中被调用一次</span><br>    <span class="hljs-comment">// 在实际过程中，会利用这个方法来构建一个新的流用于读取数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(InputSplit split, TaskAttemptContext context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 转成文件切片</span><br>        <span class="hljs-type">FileSplit</span> <span class="hljs-variable">fileSplit</span> <span class="hljs-operator">=</span> (FileSplit) split;<br>        <span class="hljs-comment">// 获取切片对应的路径</span><br>        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> fileSplit.getPath();<br>        <span class="hljs-comment">// 获取Split的大小</span><br>        len = fileSplit.getLength();<br>        <span class="hljs-comment">// 连接HDFS</span><br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(<br>                URI.create(path.toString()), context.getConfiguration());<br>        <span class="hljs-comment">// 获取输入流</span><br>        <span class="hljs-type">FSDataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> fs.open(path);<br>        <span class="hljs-comment">// 获取到的是一个字节流，但是要处理的数据是一个字符文件</span><br>        <span class="hljs-comment">// 考虑转化成字符流</span><br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LineReader</span>(in);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否有下一个键值对要交给Mapper处理</span><br>    <span class="hljs-comment">// 试着读取数据，如果读到了数据，那么说明有数据交给Mapper处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nextKeyValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 定义变量用于存储数据</span><br>        key = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        <span class="hljs-type">Text</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        <span class="hljs-comment">// 读取数据</span><br>        <span class="hljs-comment">// reader会将读取到的一行数据放到tmp中</span><br>        <span class="hljs-keyword">if</span> (reader.readLine(tmp) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        key.set(tmp.toString());<br>        pos += tmp.getLength();<br>        <span class="hljs-comment">// 读取第二行数据</span><br>        <span class="hljs-keyword">if</span> (reader.readLine(tmp) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        value.set(tmp.toString());<br>        pos += tmp.getLength();<br>        <span class="hljs-comment">// 读取第三行数据</span><br>        <span class="hljs-keyword">if</span> (reader.readLine(tmp) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        value.append(<span class="hljs-string">&quot; &quot;</span>.getBytes(), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        value.append(tmp.getBytes(), <span class="hljs-number">0</span>, tmp.getLength());<br>        pos += tmp.getLength();<br>        <span class="hljs-comment">// key = tom</span><br>        <span class="hljs-comment">// value = math 78 english 87</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Text <span class="hljs-title function_">getCurrentKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Text <span class="hljs-title function_">getCurrentValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取执行进度</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getProgress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pos / len;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)<br>            reader.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>AuthMapper.java:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.authinput;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;Text, Text, Text, IntWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(Text key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// key = tom</span><br>        <span class="hljs-comment">// value = math 78 english 87</span><br>        <span class="hljs-comment">// 拆分值</span><br>        String[] arr = value.toString().split(<span class="hljs-string">&quot; &quot;</span>);<br>        context.write(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(Integer.parseInt(arr[<span class="hljs-number">1</span>])));<br>        context.write(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(Integer.parseInt(arr[<span class="hljs-number">3</span>])));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>AuthReducer.java:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.authinput;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.FileSystem;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.InputSplit;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.RecordReader;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileSplit;<br><span class="hljs-keyword">import</span> org.apache.hadoop.util.LineReader;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URI;<br><br><span class="hljs-comment">// 泛型表示读取出来的数据类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthInputFormat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FileInputFormat</span>&lt;Text, Text&gt; &#123;<br>    <span class="hljs-comment">// 需要在这种方法中定义流来读取数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RecordReader&lt;Text, Text&gt; <span class="hljs-title function_">createRecordReader</span><span class="hljs-params">(InputSplit split, TaskAttemptContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthReader</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthReader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecordReader</span>&lt;Text, Text&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> LineReader reader;<br>    <span class="hljs-keyword">private</span> Text key;<br>    <span class="hljs-keyword">private</span> Text value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> len;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 在初始化过程中被调用一次</span><br>    <span class="hljs-comment">// 在实际过程中，会利用这个方法来构建一个新的流用于读取数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(InputSplit split, TaskAttemptContext context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 转成文件切片</span><br>        <span class="hljs-type">FileSplit</span> <span class="hljs-variable">fileSplit</span> <span class="hljs-operator">=</span> (FileSplit) split;<br>        <span class="hljs-comment">// 获取切片对应的路径</span><br>        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> fileSplit.getPath();<br>        <span class="hljs-comment">// 获取Split的大小</span><br>        len = fileSplit.getLength();<br>        <span class="hljs-comment">// 连接HDFS</span><br>        <span class="hljs-type">FileSystem</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> FileSystem.get(<br>                URI.create(path.toString()), context.getConfiguration());<br>        <span class="hljs-comment">// 获取输入流</span><br>        <span class="hljs-type">FSDataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> fs.open(path);<br>        <span class="hljs-comment">// 获取到的是一个字节流，但是要处理的数据是一个字符文件</span><br>        <span class="hljs-comment">// 考虑转化成字符流</span><br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LineReader</span>(in);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否有下一个键值对要交给Mapper处理</span><br>    <span class="hljs-comment">// 试着读取数据，如果读到了数据，那么说明有数据交给Mapper处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nextKeyValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 定义变量用于存储数据</span><br>        key = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        <span class="hljs-type">Text</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>();<br>        <span class="hljs-comment">// 读取数据</span><br>        <span class="hljs-comment">// reader会将读取到的一行数据放到tmp中</span><br>        <span class="hljs-keyword">if</span> (reader.readLine(tmp) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        key.set(tmp.toString());<br>        pos += tmp.getLength();<br>        <span class="hljs-comment">// 读取第二行数据</span><br>        <span class="hljs-keyword">if</span> (reader.readLine(tmp) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        value.set(tmp.toString());<br>        pos += tmp.getLength();<br>        <span class="hljs-comment">// 读取第三行数据</span><br>        <span class="hljs-keyword">if</span> (reader.readLine(tmp) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        value.append(<span class="hljs-string">&quot; &quot;</span>.getBytes(), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        value.append(tmp.getBytes(), <span class="hljs-number">0</span>, tmp.getLength());<br>        pos += tmp.getLength();<br>        <span class="hljs-comment">// key = tom</span><br>        <span class="hljs-comment">// value = math 78 english 87</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Text <span class="hljs-title function_">getCurrentKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Text <span class="hljs-title function_">getCurrentValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取执行进度</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getProgress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pos / len;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)<br>            reader.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>AuthDriver.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.authinput;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(AuthDriver.class);<br>        job.setMapperClass(AuthMapper.class);<br>        job.setReducerClass(AuthReducer.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        job.setInputFormatClass(AuthInputFormat.class);<br><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/score2.txt&quot;</span>));<br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/auth_input&quot;</span>));<br><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><p>运行输出：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716120433.png"></p><hr><h3 id="authoutput（Package）"><a href="#authoutput（Package）" class="headerlink" title="authoutput（Package）"></a>authoutput（Package）</h3><p>数据（score2.txt）</p><ol><li><p>AuthOutputFormat.java：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.authoutput;<br><br><span class="hljs-keyword">import</span> com.quosimodo.authinput.AuthInputFormat;<br><span class="hljs-keyword">import</span> com.quosimodo.authinput.AuthMapper;<br><span class="hljs-keyword">import</span> com.quosimodo.authinput.AuthReducer;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthOutputDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        conf.set(<span class="hljs-string">&quot;mapreduce.output.textoutputformat.separator&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(AuthOutputDriver.class);<br>        job.setMapperClass(AuthMapper.class);<br>        job.setReducerClass(AuthReducer.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        job.setInputFormatClass(AuthInputFormat.class);<br>        job.setOutputFormatClass(AuthOutputFormat.class);<br><br>        FileInputFormat.addInputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/score2.txt&quot;</span>));<br>        FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/auth_output&quot;</span>));<br><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>AuthDriver.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.authinput;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(AuthDriver.class);<br>        job.setMapperClass(AuthMapper.class);<br>        job.setReducerClass(AuthReducer.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        job.setInputFormatClass(AuthInputFormat.class);<br><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/score2.txt&quot;</span>));<br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/auth_input&quot;</span>));<br><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure></li></ol><p>运行输出：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716122245.png"></p><hr><h3 id="multipleinput（Package）"><a href="#multipleinput（Package）" class="headerlink" title="multipleinput（Package）"></a>multipleinput（Package）</h3><p>数据（score2.txt）</p><ol><li><p>ScoreMapper.java：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.multipleinput;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">// 处理score.txt</span><br><span class="hljs-comment">// Bob 90 64 92 83 82 95</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, IntWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        String[] arr = value.toString().split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-type">Text</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(arr[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            context.write(name, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(Integer.parseInt(arr[i])));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>MultipleDriver.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.multipleinput;<br><br><span class="hljs-keyword">import</span> com.quosimodo.authinput.AuthInputFormat;<br><span class="hljs-keyword">import</span> com.quosimodo.authinput.AuthMapper;<br><span class="hljs-keyword">import</span> com.quosimodo.authinput.AuthReducer;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.compress.BZip2Codec;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.MultipleInputs;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipleDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(MultipleDriver.class);<br>        job.setReducerClass(AuthReducer.class);<br><br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(IntWritable.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        <span class="hljs-comment">// 多源输入</span><br>        MultipleInputs.addInputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/score.txt&quot;</span>),<br>                TextInputFormat.class, ScoreMapper.class);<br>        MultipleInputs.addInputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/score2.txt&quot;</span>),<br>                AuthInputFormat.class, AuthMapper.class);<br>        <span class="hljs-comment">// FileOutputFormat.setOutputPath(job, new Path(&quot;hdfs://192.168.233.133:9000/result/multiple&quot;));</span><br>        <span class="hljs-comment">// 要将最终的结果打成一个压缩包</span><br>        FileOutputFormat.setCompressOutput(job, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 指定压缩包的存储位置</span><br>        FileOutputFormat.setOutputPath(job, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/compress&quot;</span>));<br>        <span class="hljs-comment">// 指定压缩格式</span><br>        FileOutputFormat.setOutputCompressorClass(job, BZip2Codec.class);<br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><p>运行输出：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716122813.png"></p>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第二天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>MapReduce在处理数据的时候，首先将数据进行切片(Split)，切片本质上是一种逻辑划分(logical split)，实际上实在划分任务量</li><li>划分完任务量之后，每一个Split都会交给一个MapTask来处理</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ol><li>在MapReduce中，需要对数据进行序列化，MapReduce中单独提供了对应的序列化形式 - 需要被序列化的对象对应的类实现接口Writable</li><li>MapReduce在序列化过程中不允许属性为<code>null</code></li><li>案例：统计每一个人花费的总流量(文件：flow.txt)</li><li>练习：获取每一个人的平均成绩(文件：score.txt)</li></ol><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><ol><li>分区的作用是对数据进行分类</li><li>在实际过程中，需要根据指定的需求来对数据进行分类，指定不同的分区</li><li>案例：按地区分别统计每一个人花费的总流量(文件：flow.txt)</li><li>MapReduce需要对分区来进行编号，编号从0开始依次向上递增</li><li>每一个分类需要对一个单独的ReduceTask，有几个分类，就需要产生对应个数的ReduceTask</li><li>练习：按月份统计每一个人的总成绩(目录：score)</li></ol><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol><li>MapReduce会自动的数据的键来进行排序，默认是按照自然序</li><li>如果需要指定排序规则，那么键的位置上的元素对应的类必须实现<code>Comparable</code>，考虑对数据进行序列化，所以实现<code>WritableComparable</code></li><li>案例：对之前的总流量来进行降序排序</li><li>练习：按照月份升序排序，如果是同一个月，则按照利润来降序排序(文件：profit.txt)</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h3><hr><h4 id="统计每一个人花费的总流量"><a href="#统计每一个人花费的总流量" class="headerlink" title="统计每一个人花费的总流量"></a>统计每一个人花费的总流量</h4><p>数据(flow.txt)：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">18642971356 shanghai david 4132 4121<br>15936842654 shanghai peter 236 7566<br>13012945687 beijing helen 4152 5321<br>13548627458 beijing alex 452 759<br>15432697314 hangzhou jack 4558 7474<br>13012945687 beijing helen 587 2463<br>15012665465 shanghai holly 864 995<br>13012945687 beijing helen 4232 7435<br>18642971356 shanghai david 7434 2744<br>15012665465 shanghai holly 3247 756<br>18642971356 shanghai david 7641 7541<br>15432697314 hangzhou jack 764 131<br>13548627458 beijing alex 711 5424<br>18642971356 shanghai david 521 7654<br>13012945687 beijing helen 445 2387<br>13548627458 beijing alex 5854 3877<br>15936842654 shanghai peter 5223 9645<br>15936842654 shanghai peter 74875 8541<br>18642971356 shanghai david 584 476<br>15732654952 beijing bruce 557 585<br>15012665465 shanghai holly 478 6598<br>15432697314 hangzhou jack 4855 7885<br>15936842654 shanghai peter 566 8942<br>15732654952 beijing bruce 4532 4698<br>18023643218 hangzhou adair 578 5875<br>15732654952 beijing bruce 5464 763<br>15432697314 hangzhou jack 574 553<br>18023643218 hangzhou adair 954 4310<br>15936842654 shanghai peter 7324 5456<br>18023643218 hangzhou adair 4778 8746<br>15012665465 shanghai holly 5656 4131<br>15732654952 beijing bruce 632 7432<br>13548627458 beijing alex 414 4125<br>18023643218 hangzhou adair 7456 432<br>13548627458 beijing alex 365 780<br>15012665465 shanghai holly 5245 5521<br>15432697314 hangzhou jack 5747 4563<br>15732654952 beijing bruce 882 8648<br></code></pre></div></td></tr></table></figure><p>上传到hdfs的&#x2F;txt文件夹下</p><ol><li><p>数据存储类实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.serialflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Writable;<br><br><span class="hljs-keyword">import</span> java.io.DataInput;<br><span class="hljs-keyword">import</span> java.io.DataOutput;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flow</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Writable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> upFlow; <span class="hljs-comment">// 上行流量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> downFlow; <span class="hljs-comment">// 下行流量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUpFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> upFlow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUpFlow</span><span class="hljs-params">(<span class="hljs-type">int</span> upFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.upFlow = upFlow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDownFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> downFlow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDownFlow</span><span class="hljs-params">(<span class="hljs-type">int</span> downFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.downFlow = downFlow;<br>    &#125;<br><br>    <span class="hljs-comment">// 序列化方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        out.writeInt(upFlow);<br>        out.writeInt(downFlow);<br>    &#125;<br><br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.upFlow = in.readInt();<br>        <span class="hljs-built_in">this</span>.downFlow = in.readInt();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>Mapper类的实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.serialflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerialFlowMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, Flow&gt; &#123;<br>    <span class="hljs-comment">// key：输入的键，指的是行的字节偏移量</span><br>    <span class="hljs-comment">// value：输入的值，指的是要处理的一行数据</span><br>    <span class="hljs-comment">// context：环境参数，用于写出结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 18642971356 shanghai david 4132 4121</span><br>        <span class="hljs-comment">// 拆分字段</span><br>        String[] arr = value.toString().split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">// 封装流量信息</span><br>        <span class="hljs-type">Flow</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flow</span>();<br>        f.setUpFlow(Integer.parseInt(arr[<span class="hljs-number">3</span>]));<br>        f.setDownFlow(Integer.parseInt(arr[<span class="hljs-number">4</span>]));<br>        <span class="hljs-comment">// 写出数据</span><br>        context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(arr[<span class="hljs-number">2</span>]), f);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>Reducer类实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.serialflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">// 输入的键值类型，键值类型和Mapper的输出是一致的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerialFlowReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, Flow, Text, IntWritable&gt; &#123;<br>    <span class="hljs-comment">// key：Mapper输出的键</span><br>    <span class="hljs-comment">// values：将Mapper输出的值放到了迭代器中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;Flow&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 记录总流量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 统计总流量</span><br>        <span class="hljs-keyword">for</span> (Flow value : values) &#123;<br>            sum += value.getUpFlow() + value.getDownFlow();<br>        &#125;<br>        context.write(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(sum));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>Driver类实现：配置启动类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.serialflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerialFlowDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">// 获取环境配置</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-comment">// 获取任务对象</span><br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        <span class="hljs-comment">// 设置入口类</span><br>        job.setJarByClass(SerialFlowDriver.class);<br>        <span class="hljs-comment">// 设置Mapper</span><br>        job.setMapperClass(SerialFlowMapper.class);<br>        <span class="hljs-comment">// 设置Reducer</span><br>        job.setReducerClass(SerialFlowReducer.class);<br><br>        <span class="hljs-comment">// 设置Mapper类的输出类型</span><br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(Flow.class);<br><br>        <span class="hljs-comment">// 设置Reducer类的输出类型</span><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        <span class="hljs-comment">// 设置输入路径</span><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/flow.txt&quot;</span>));<br>        <span class="hljs-comment">// 设置输出路径 - 要求输出路径必须不存在</span><br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/serial_flow&quot;</span>));<br><br>        <span class="hljs-comment">// 提交任务</span><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>hadoop是之前在hosts中的ip映射，对应虚拟机ip</p></blockquote></li></ol><p>运行之后会在hdfs的&#x2F;result目录下生成对应的结果：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716112009.png"></p><hr><h4 id="获取每一个人的平均成绩"><a href="#获取每一个人的平均成绩" class="headerlink" title="获取每一个人的平均成绩"></a>获取每一个人的平均成绩</h4><p>数据(score.txt)：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">Bob 90 64 92 83 82 95<br>Alex 64 63 68 86 84 81<br>Grace 57 86 24 84 92<br>Henry 39 79 78 76 84 87 90<br>Adair 88 82 64 95<br>Chad 66 74 37 78 80<br>Colin 64 86 74 74 76<br>Eden 71 85 43 85 71<br>Grover 99 86 43 89<br></code></pre></div></td></tr></table></figure><p>上传到hdfs的&#x2F;txt文件夹下</p><ol><li><p>数据存储类：包括各科目成绩</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.average_score;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Writable;<br><br><span class="hljs-keyword">import</span> java.io.DataInput;<br><span class="hljs-keyword">import</span> java.io.DataOutput;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Score</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Writable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; scores;<br><br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">getScores</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> scores;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScores</span><span class="hljs-params">(List&lt;Integer&gt; scores)</span> &#123;<br>        <span class="hljs-built_in">this</span>.scores = scores;<br>    &#125;<br><br>    <span class="hljs-comment">// 序列化方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        out.writeInt(scores.size());<br>        <span class="hljs-keyword">for</span> (Integer score : scores) &#123;<br>            out.writeInt(score);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> in.readInt();<br>        <span class="hljs-built_in">this</span>.scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(len);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++) &#123;<br>            <span class="hljs-built_in">this</span>.scores.add(in.readInt());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Mapper类的实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.average_score;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerialScoreMapper</span><br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, Score&gt; &#123;<br>    <span class="hljs-comment">// key：输入的键，指的是行的字节偏移量</span><br>    <span class="hljs-comment">// value：输入的值，指的是要处理的一行数据</span><br>    <span class="hljs-comment">// context：环境参数，用于写出结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// Bob 90 64 92 83 82 95</span><br>        <span class="hljs-comment">// 拆分字段</span><br>        String[] arr = value.toString().split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">// 封装流量信息</span><br>        <span class="hljs-type">Score</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Score</span>();<br>        List&lt;Integer&gt; scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(arr.length - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            scores.add(Integer.parseInt(arr[i]));<br>        &#125;<br>        s.setScores(scores);<br>        <span class="hljs-comment">// 写出数据</span><br>        context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(arr[<span class="hljs-number">0</span>]), s);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Reducer类实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.average_score;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.DecimalFormat;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 输入的键值类型，键值类型和Mapper的输出是一致的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerialScoreReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, Score, Text, Text&gt; &#123;<br>    <span class="hljs-comment">// key：Mapper输出的键</span><br>    <span class="hljs-comment">// values：将Mapper输出的值放到了迭代器中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;Score&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 记录分数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Score value : values) &#123;<br>            List&lt;Integer&gt; scores = value.getScores();<br>            <span class="hljs-keyword">for</span> (Integer score : scores ) &#123;<br>                sum += score;<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">avg</span> <span class="hljs-operator">=</span> sum/ count;<br>        <span class="hljs-comment">// 保留小数位</span><br>        <span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.00&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> df.format(avg);<br>        context.write(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(str));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Driver类实现：配置启动类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.average_score;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerialScoreDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">// 获取环境配置</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-comment">// 获取任务对象</span><br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        <span class="hljs-comment">// 设置入口类</span><br>        job.setJarByClass(SerialScoreDriver.class);<br>        <span class="hljs-comment">// 设置Mapper</span><br>        job.setMapperClass(SerialScoreMapper.class);<br>        <span class="hljs-comment">// 设置Reducer</span><br>        job.setReducerClass(SerialScoreReducer.class);<br><br>        <span class="hljs-comment">// 设置Mapper类的输出类型</span><br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(Score.class);<br><br>        <span class="hljs-comment">// 设置Reducer类的输出类型</span><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(Text.class);<br><br>        <span class="hljs-comment">// 设置输入路径</span><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/score.txt&quot;</span>));<br>        <span class="hljs-comment">// 设置输出路径 - 要求输出路径必须不存在</span><br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/average_score&quot;</span>));<br><br>        <span class="hljs-comment">// 提交任务</span><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><blockquote><p>hadoop是之前在hosts中的ip映射，对应虚拟机ip</p></blockquote></li></ol><p>运行之后会在hdfs的&#x2F;result目录下生成对应的结果：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716112658.png"></p><hr><h3 id="分区-1"><a href="#分区-1" class="headerlink" title="分区"></a>分区</h3><h4 id="按地区分别统计每一个人花费的总流量"><a href="#按地区分别统计每一个人花费的总流量" class="headerlink" title="按地区分别统计每一个人花费的总流量"></a>按地区分别统计每一个人花费的总流量</h4><p>数据（flow.txt）：序列化题目中有数据</p><p>上传到hdfs的&#x2F;txt&#x2F;score文件夹下</p><ol><li><p>数据存储类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Writable;<br><br><span class="hljs-keyword">import</span> java.io.DataInput;<br><span class="hljs-keyword">import</span> java.io.DataOutput;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flow</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Writable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> upFlow;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> downFlow;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUpFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> upFlow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUpFlow</span><span class="hljs-params">(<span class="hljs-type">int</span> upFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.upFlow = upFlow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDownFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> downFlow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDownFlow</span><span class="hljs-params">(<span class="hljs-type">int</span> downFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.downFlow = downFlow;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        out.writeUTF(city);<br>        out.writeInt(upFlow);<br>        out.writeInt(downFlow);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.city = in.readUTF();<br>        <span class="hljs-built_in">this</span>.upFlow = in.readInt();<br>        <span class="hljs-built_in">this</span>.downFlow = in.readInt();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>分区类：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;<br><br><span class="hljs-comment">// 按照地区/城市来对数据分类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CityPartitioner</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Partitioner</span>&lt;Text, Flow&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(Text text, Flow flow, <span class="hljs-type">int</span> numPartitions)</span> &#123;<br>        <span class="hljs-comment">// 获取地区</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> flow.getCity();<br>        <span class="hljs-comment">// 根据地址的值来分类</span><br>        <span class="hljs-keyword">if</span> (city.equals(<span class="hljs-string">&quot;beijing&quot;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (city.equals(<span class="hljs-string">&quot;shanghai&quot;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="2"><li><p>Mapper类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartFlowMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, Flow&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 15432697314 hangzhou jack 4558 7474</span><br>        <span class="hljs-comment">// 拆分字段</span><br>        String[] arr = value.toString().split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">// 封装Flow对象</span><br>        <span class="hljs-type">Flow</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flow</span>();<br>        f.setCity(arr[<span class="hljs-number">1</span>]);<br>        f.setUpFlow(Integer.parseInt(arr[<span class="hljs-number">3</span>]));<br>        f.setDownFlow(Integer.parseInt(arr[<span class="hljs-number">4</span>]));<br>        <span class="hljs-comment">// 写出</span><br>        context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(arr[<span class="hljs-number">2</span>]), f);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Reducer类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartFlowReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, Flow, Text, IntWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;Flow&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 计算总流量</span><br>        <span class="hljs-keyword">for</span> (Flow value : values) &#123;<br>            sum += value.getUpFlow() + value.getDownFlow();<br>        &#125;<br>        context.write(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(sum));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Driver类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartFlowDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(PartFlowDriver.class);<br>        job.setMapperClass(PartFlowMapper.class);<br>        job.setReducerClass(PartFlowReducer.class);<br><br>        <span class="hljs-comment">// 指定Partitioner类</span><br>        job.setPartitionerClass(CityPartitioner.class);<br>        <span class="hljs-comment">// 指定ReduceTask的个数</span><br>        job.setNumReduceTasks(<span class="hljs-number">3</span>);<br><br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(Flow.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/flow.txt&quot;</span>));<br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/part_flow&quot;</span>));<br><br>        <span class="hljs-comment">// 提交任务</span><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><p>运行之后会在hdfs的&#x2F;result目录下生成对应的文件</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716113718.png"></p><hr><h4 id="按月份统计每一个人的总成绩"><a href="#按月份统计每一个人的总成绩" class="headerlink" title="按月份统计每一个人的总成绩"></a>按月份统计每一个人的总成绩</h4><p>数据（目录：score）：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text"># Chinese.txt<br>1 zhang 89<br>2 zhang 73<br>3 zhang 67<br>1 wang 49<br>2 wang 83<br>3 wang 27<br>1 li 77<br>2 li 66<br>3 li 89<br><br># english.txt<br>1 zhang 55<br>2 zhang 69<br>3 zhang 75<br>1 wang 44<br>2 wang 64<br>3 wang 86<br>1 li 76<br>2 li 84<br>3 li 93<br><br># math.txt<br>1 zhang 85<br>2 zhang 59<br>3 zhang 95<br>1 wang 74<br>2 wang 67<br>3 wang 96<br>1 li 45<br>2 li 76<br>3 li 67<br></code></pre></div></td></tr></table></figure><p>上传到hdfs的&#x2F;txt&#x2F;score文件夹下</p><ol><li><p>数据存储类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partscore;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Writable;<br><br><span class="hljs-keyword">import</span> java.io.DataInput;<br><span class="hljs-keyword">import</span> java.io.DataOutput;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Score</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Writable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> month)</span> &#123;<br>        <span class="hljs-built_in">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        out.writeInt(month);<br>        out.writeInt(score);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.month = in.readInt();<br>        <span class="hljs-built_in">this</span>.score = in.readInt();<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>分区类：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partscore;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MonthPartitioner</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Partitioner</span>&lt;Text, Score&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(Text text, Score score, <span class="hljs-type">int</span> numPartitions)</span> &#123;<br>        <span class="hljs-comment">// 获取月份</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> score.getMonth();<br>        <span class="hljs-comment">// 分区号</span><br>        <span class="hljs-keyword">return</span> month - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="2"><li><p>Mapper类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partscore;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartScoreMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Text, Score&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 1 zhang 89</span><br>        String[] arr = value.toString().split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">// 封装Score对象</span><br>        <span class="hljs-type">Score</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Score</span>();<br>        s.setMonth(Integer.parseInt(arr[<span class="hljs-number">0</span>]));<br>        s.setScore(Integer.parseInt(arr[<span class="hljs-number">2</span>]));<br>        <span class="hljs-comment">// 写出数据</span><br>        context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(arr[<span class="hljs-number">1</span>]), s);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Reducer类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partscore;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartScoreReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Text, Score, Text, IntWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Text key, Iterable&lt;Score&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Score value : values) &#123;<br>            sum += value.getScore();<br>        &#125;<br>        context.write(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(sum));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Driver类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.partscore;<br><br><span class="hljs-keyword">import</span> com.quosimodo.partflow.*;<br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartScoreDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(PartScoreDriver.class);<br>        job.setMapperClass(PartScoreMapper.class);<br>        job.setReducerClass(PartScoreReducer.class);<br><br>        job.setPartitionerClass(MonthPartitioner.class);<br>        job.setNumReduceTasks(<span class="hljs-number">3</span>);<br><br>        job.setMapOutputKeyClass(Text.class);<br>        job.setMapOutputValueClass(Score.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/score/&quot;</span>));<br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/part_score&quot;</span>));<br><br>        <span class="hljs-comment">// 提交任务</span><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><p>运行之后会在hdfs的&#x2F;result目录下生成对应的文件</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716113300.png"></p><hr><h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><h4 id="对之前的总流量来进行降序排序"><a href="#对之前的总流量来进行降序排序" class="headerlink" title="对之前的总流量来进行降序排序"></a>对之前的总流量来进行降序排序</h4><p>数据(flow.txt)：序列化题目中有数据</p><p>上传到hdfs的&#x2F;txt文件夹下</p><ol><li><p>数据存储类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.WritableComparable;<br><br><span class="hljs-keyword">import</span> java.io.DataInput;<br><span class="hljs-keyword">import</span> java.io.DataOutput;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Flow</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WritableComparable</span>&lt;Flow&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalFlow;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotalFlow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalFlow;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotalFlow</span><span class="hljs-params">(<span class="hljs-type">int</span> totalFlow)</span> &#123;<br>        <span class="hljs-built_in">this</span>.totalFlow = totalFlow;<br>    &#125;<br><br>    <span class="hljs-comment">// 按照每个人花费的总流量进行降序排序</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Flow o)</span> &#123;<br>        <span class="hljs-keyword">return</span> o.totalFlow - <span class="hljs-built_in">this</span>.totalFlow;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        out.writeUTF(name);<br>        out.writeInt(totalFlow);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.name = in.readUTF();<br>        <span class="hljs-built_in">this</span>.totalFlow = in.readInt();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Mapper类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortFlowMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Flow, NullWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// adair33129</span><br>        <span class="hljs-comment">// 拆分字段</span><br>        String[] arr = value.toString().split(<span class="hljs-string">&quot;\t&quot;</span>);<br>        <span class="hljs-comment">// 封装Flow对象</span><br>        <span class="hljs-type">Flow</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flow</span>();<br>        f.setName(arr[<span class="hljs-number">0</span>]);<br>        f.setTotalFlow(Integer.parseInt(arr[<span class="hljs-number">1</span>]));<br>        <span class="hljs-comment">// 写出数据</span><br>        context.write(f, NullWritable.get());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Reducer类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortFlowReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Flow, NullWritable, Text, IntWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Flow key, Iterable&lt;NullWritable&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        context.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Text</span>(key.getName()), <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntWritable</span>(key.getTotalFlow()));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Driver类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortflow;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.IntWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortFlowDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(SortFlowDriver.class);<br>        job.setMapperClass(SortFlowMapper.class);<br>        job.setReducerClass(SortFlowReducer.class);<br><br>        job.setMapOutputKeyClass(Flow.class);<br>        job.setMapOutputValueClass(NullWritable.class);<br><br>        job.setOutputKeyClass(Text.class);<br>        job.setOutputValueClass(IntWritable.class);<br><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/serial_flow&quot;</span>));<br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/sort_flow&quot;</span>));<br><br>        <span class="hljs-comment">// 提交任务</span><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><blockquote><p>hadoop是之前在hosts中的ip映射，对应虚拟机ip</p></blockquote></li></ol><p>运行之后会在hdfs的&#x2F;result目录下生成对应的结果：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716114623.png"></p><hr><h4 id="按照月份升序排序，如果是同一个月，则按照利润来降序排序"><a href="#按照月份升序排序，如果是同一个月，则按照利润来降序排序" class="headerlink" title="按照月份升序排序，如果是同一个月，则按照利润来降序排序"></a>按照月份升序排序，如果是同一个月，则按照利润来降序排序</h4><p>数据（profit.txt）：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span>rose <span class="hljs-number">345</span><br><span class="hljs-symbol">1 </span>rose <span class="hljs-number">235</span><br><span class="hljs-symbol">1 </span>tom <span class="hljs-number">234</span><br><span class="hljs-symbol">2 </span>jim <span class="hljs-number">572</span><br><span class="hljs-symbol">3 </span>rose <span class="hljs-number">123</span><br><span class="hljs-symbol">1 </span>jim <span class="hljs-number">321</span><br><span class="hljs-symbol">2 </span>tom <span class="hljs-number">573</span><br><span class="hljs-symbol">3 </span>jim <span class="hljs-number">876</span><br><span class="hljs-symbol">3 </span>tom <span class="hljs-number">648</span><br></code></pre></div></td></tr></table></figure><p>上传到hdfs的&#x2F;txt文件夹下</p><ol><li><p>数据存储类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortprofit;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.WritableComparable;<br><br><span class="hljs-keyword">import</span> java.io.DataInput;<br><span class="hljs-keyword">import</span> java.io.DataOutput;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Profit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WritableComparable</span>&lt;Profit&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> profit;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> month)</span> &#123;<br>        <span class="hljs-built_in">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getProfit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> profit;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProfit</span><span class="hljs-params">(<span class="hljs-type">int</span> profit)</span> &#123;<br>        <span class="hljs-built_in">this</span>.profit = profit;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Profit o)</span> &#123;<br>        <span class="hljs-comment">// 先按照月份来排序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getMonth() - o.getMonth();<br>        <span class="hljs-comment">// 如果是同一个月则按照利润来排序</span><br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> o.getProfit() - <span class="hljs-built_in">this</span>.getProfit();<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(DataOutput out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        out.writeInt(month);<br>        out.writeUTF(name);<br>        out.writeInt(profit);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFields</span><span class="hljs-params">(DataInput in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.month = in.readInt();<br>        <span class="hljs-built_in">this</span>.name = in.readUTF();<br>        <span class="hljs-built_in">this</span>.profit = in.readInt();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Profit&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;month=&quot;</span> + month +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, profit=&quot;</span> + profit +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Mapper类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortprofit;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.LongWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.Text;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Mapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortProfitMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;LongWritable, Text, Profit, NullWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">map</span><span class="hljs-params">(LongWritable key, Text value, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-comment">// 2 rose 345</span><br>        String[] arr = value.toString().split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">// 封装对象</span><br>        <span class="hljs-type">Profit</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Profit</span>();<br>        p.setMonth(Integer.parseInt(arr[<span class="hljs-number">0</span>]));<br>        p.setName(arr[<span class="hljs-number">1</span>]);<br>        p.setProfit(Integer.parseInt(arr[<span class="hljs-number">2</span>]));<br>        context.write(p, NullWritable.get());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Reducer类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortprofit;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Reducer;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortProfitReducer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reducer</span>&lt;Profit, NullWritable, Profit, NullWritable&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(Profit key, Iterable&lt;NullWritable&gt; values, Context context)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        context.write(key, NullWritable.get());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>Driver类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.quosimodo.sortprofit;<br><br><span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<br><span class="hljs-keyword">import</span> org.apache.hadoop.fs.Path;<br><span class="hljs-keyword">import</span> org.apache.hadoop.io.NullWritable;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.Job;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;<br><span class="hljs-keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortProfitDriver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">conf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> Job.getInstance(conf);<br><br>        job.setJarByClass(SortProfitDriver.class);<br>        job.setMapperClass(SortProfitMapper.class);<br>        job.setReducerClass(SortProfitReducer.class);<br><br>        job.setOutputKeyClass(Profit.class);<br>        job.setOutputValueClass(NullWritable.class);<br><br>        FileInputFormat.addInputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/txt/profit.txt&quot;</span>));<br>        FileOutputFormat.setOutputPath(job,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Path</span>(<span class="hljs-string">&quot;hdfs://hadoop:9000/result/sort_profit&quot;</span>));<br><br>        <span class="hljs-comment">// 提交任务</span><br>        job.waitForCompletion(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><blockquote><p>hadoop是之前在hosts中的ip映射，对应虚拟机ip</p></blockquote></li></ol><p>运行之后会在hdfs的&#x2F;result目录下生成对应的结果：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210716115124.png"></p>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目实训第一天</title>
    <link href="/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/Program/%E5%AE%9E%E8%AE%AD/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>Hadoop是Yahoo!开发后来贡献给了Apache的一套分布式机制</li><li>Hadoop提供了简单的编程模型来对大量数据进行计算</li><li>Hadoop能够从一台服务器扩展到上千台服务器，每一台服务器都能够进行计算和存储</li><li>Hadoop提供了探测和处理异常的机制</li><li>Hadoop本身的版本非常混乱，在选择版本的时候需要注意版本和组件之间的兼容性</li></ol><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ol><li>Hadoop Common：公共模块，实际上就是依赖Nutch的包</li><li>Hadoop Distributed File System (HDFS™)：分布式文件系统，提供了分布式存储的功能</li><li>Hadoop YARN：任务调度和集群的资源管理</li><li>Hadoop MapReduce：分布式计算</li><li>Hadoop Ozone：对象存储</li></ol><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ol><li>Hadoop1.X：包含Common、HDFS、MapReduce模块。已经停止使用</li><li>Hadoop2.X：包含了Common、HDFS、MapReduce、YARN模块。Hadoop2.X和Hadoop1.X全版本不兼容</li><li>Hadoop3.X：包含了所有的模块，和Hadoop2.X部分版本兼容</li></ol><p>本次使用的是hadoop-3.1.3</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>关闭防火墙</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 用root用户登录</span><br><span class="hljs-comment"># 临时关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-comment"># 永久关闭防火墙</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></div></td></tr></table></figure></li><li><p>修改主机名</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim /etc/hostname<br><span class="hljs-comment"># 然后删掉localhost，改为自己指定的主机名，例如主机名改成hadoop</span><br></code></pre></div></td></tr></table></figure></li><li><p>将主机名和IP进行映射</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim /etc/hosts<br><span class="hljs-comment"># 添加IP 主机名，例如</span><br>192.168.122.1 hadoop<br></code></pre></div></td></tr></table></figure></li><li><p>重启</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">reboot<br></code></pre></div></td></tr></table></figure></li><li><p>进行免密互通</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 产生密钥</span><br>ssh-keygen<br><span class="hljs-comment"># 复制密钥到root账户的authoried_key中，这样就可以免密用root账户登录hadoop主机</span><br>ssh-copy-id root@hadoop<br><span class="hljs-comment"># 回车之后输入yes，然后回车输入密码</span><br><br><span class="hljs-comment"># 测试免密是否成功</span><br>ssh hadoop<br><span class="hljs-comment"># 如果不需要输入密码，则退出ssh登录</span><br><span class="hljs-built_in">logout</span><br></code></pre></div></td></tr></table></figure></li><li><p>解压</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">tar -xvf hadoop-3.1.3.tar.gz<br></code></pre></div></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim /etc/profile<br><span class="hljs-comment"># 在文件中添加</span><br><span class="hljs-built_in">export</span> HADOOP_HOME=/opt/hadoop-3.1.3<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HADOOP_HOME</span>/bin:<span class="hljs-variable">$HADOOP_HOME</span>/sbin<br><span class="hljs-comment"># 保存退出，重新生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment"># 检查环境变量是否配置正确</span><br>hadoop version<br></code></pre></div></td></tr></table></figure></li><li><p>进入Hadoop的配置目录</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> hadoop-3.1.3/etc/hadoop/<br></code></pre></div></td></tr></table></figure></li><li><p>修改文件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$JAVA_HOME</span># 复制打印出来的JDK的安装路径vim hadoop-env.sh<br><span class="hljs-comment"># 在文件末尾添加</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_181<br><span class="hljs-built_in">export</span> HADOOP_CONF_DIR=/opt/hadoop-3.1.3/etc/hadoop<br><span class="hljs-comment"># 保存退出，重新生效source hadoop-env.sh</span><br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim core-site.xml<br></code></pre></div></td></tr></table></figure><p>在configuration标签中添加</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/hadoop-3.1.3/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim hdfs-site.xml<br></code></pre></div></td></tr></table></figure><p>在configuration标签中添加</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">vim mapred-site.xml<br></code></pre></div></td></tr></table></figure><p>在configuration标签中添加</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">&lt;property&gt;<br>&lt;name&gt;mapreduce.framework.name&lt;/name&gt;<br>&lt;value&gt;yarn&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim yarn-site.xml<br></code></pre></div></td></tr></table></figure><p>在configuration标签中添加</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">&lt;property&gt;<br>&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;<br>&lt;value&gt;hadoop&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;property&gt;<br>&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;<br>&lt;value&gt;mapreduce_shuffle&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>编辑hdfs启动和结束命令文件</p><p>start-dfs.sh和stop-dfs.sh都要修改</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/hadoop_3.1.3/sbin<br>vim start-dfs.sh<br>vim stop-dfs.sh<br></code></pre></div></td></tr></table></figure><p>在文件开头添加：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">HDFS_DATANODE_USER=root<br>HDFS_NAMENODE_USER=root<br>HDFS_SECONDARYNAMENODE_USER=root<br>HDFS_DATANODE_SECURE_USER=hdfs<br></code></pre></div></td></tr></table></figure></li><li><p>编辑yarn启动和结束命令文件</p><p>start-yarn.sh和stop-yarn.sh都要修改</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">vim start-yarn.sh<br>vim stop-yarn.sh<br></code></pre></div></td></tr></table></figure><p>在文件开头添加：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">YARN_RESOURCEMANAGER_USER=root<br>YARN_NODEMANAGER_USER=root<br>HDFS_DATANODE_SECURE_USER=hdfs<br></code></pre></div></td></tr></table></figure></li><li><p>格式化hdfs并启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hdfs namenode -format<br></code></pre></div></td></tr></table></figure><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">start-all.sh<br></code></pre></div></td></tr></table></figure><p>查看是否启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">jps<br><br>22400 DataNode<br>23043 NodeManager<br>23382 Jps<br>22908 ResourceManager<br>22255 NameNode<br>22655 SecondaryNameNode<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="使用其它工具"><a href="#使用其它工具" class="headerlink" title="使用其它工具"></a>使用其它工具</h2><ol><li><p>下载HDFS Explorer，连接HDFS，端口填9870，我虽然能连接上但是无法上传文件，会出现<code>Bad Gateway</code>的错误，老师说这个不用也行，直接用IDEA的<code>BigDataTools</code>插件连接。</p></li><li><p>打开IDEA，安装<code>BigDataTools</code>插件</p><ul><li>解压Hadoop的安装包，给Windows配置Hadoop-3.1.3的环境变量：</li></ul><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210712092522.png" alt="image-20210712092522160" style="zoom: 80%;" /><ul><li><p>用老师给的<a href="https://wwa.lanzoui.com/iWfOhrayg3a">bin</a>包，将Hadoop-3.1.3文件夹下的bin内容进行覆盖，不然会报奇奇怪怪的错误</p></li><li><p>重启打开终端测试<code>hadoop -version</code>，不知道为什么我会输出Java的版本信息？？？，但是后面能正常连上HDFS，就没管这个问题了</p></li><li><p>然后用<code>BigDataTools</code>新建HDFS连接:</p><ul><li>Authentication type:  <code>Explicit uri</code></li><li>File System URl:  <code>填写你虚拟机的ip:9000</code></li><li>Username:  <code>root</code></li></ul><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210712092118.png" alt="image-20210712092111787"></p><p>如果你出现了<code>Invalid root</code>的错误，是因为你格式化HDFS后没有进行任何操作，这时候，你在你的虚拟机终端随便操作一下HDFS，如：<code>hadoop fs -mkdir /user</code>，新建一个user文件夹，在回到IDEA进行连接就没问题了。</p></li></ul></li><li><p>新建IDEA maven项目，放入如下pom.xml文件，设置依赖：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--单元测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志打印--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Hadoop通用包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Hadoop客户端--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Hadoop HDFS--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hadoop-hdfs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果你拉不下来，请更换镜像源，或者去Maven仓库搜索，换个版本，在拉取依赖。有时候IDEA会抽风，这时候就重启一下。</p><p>然后新建一个module，等待明天开始编程。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Github-Page搭建静态博客"><a href="#Github-Page搭建静态博客" class="headerlink" title="Github Page搭建静态博客"></a>Github Page搭建静态博客</h1><ol><li><p>注册github</p></li><li><p>建立一个仓库，名称和你的账号名称一致，例如我的账号为flyingcherryblossoms，那么仓库就为flyingcherryblossoms&#x2F;<code>flyingcherryblossoms.github.io</code>，我的已经搭建了所以这里提示已经存在。</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710105831785.png" alt="image-20210710105831785"></p></li><li><p>打开仓库-&gt;Settings-&gt;Pages-&gt;Change Theme</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710110824677.png" alt="image-20210710110824677"></p><p>然后你就可以访问你的网站了。</p></li></ol><hr><h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><p>我购买的阿里云的服务器时直接购买的域名，服务器到期没有续费，续了个域名😎</p><p>如下：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710110909597.png" alt="image-20210710110909597"></p><blockquote><p>两个A记录为Github的服务器地址</p><p>www记录为你的github仓库分配的域名</p></blockquote><p>然后在你的github仓库Settings-&gt;Pages下设置你的域名即可：</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710111048768.png" alt="image-20210710111048768"></p><p>需要等待一会儿，等待其解析。</p><hr><h1 id="PicGo-Gitee搭建图床"><a href="#PicGo-Gitee搭建图床" class="headerlink" title="PicGo+Gitee搭建图床"></a>PicGo+Gitee搭建图床</h1><p>解决Markdown中插入图片的问题</p><ol><li><p>gitee建立一个公开仓库，然后建立Master分支并生成ReadMe，然后去设置中生成一个令牌，描述随便填，只需要project权限（丢了得重新生成，注意保存！！！）：</p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710155800694.png" alt="image-20210710155800694" style="zoom:50%;" /></li><li><p>然后下载安装<a href="https://molunerfinn.com/PicGo/">PicGo</a></p><p>然后打开后下载插件，直接下载gitee-smart（gitee插件和这个只能存在一个？我下载了一个另一个就无法安装）就行了：</p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710155946007.png" alt="image-20210710155946007" style="zoom:50%;" /><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710160024360.png" alt="image-20210710160024360" style="zoom:50%;" /><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710160111529.png" alt="image-20210710160111529" style="zoom: 50%;" /><ul><li>repo：就是你刚建立的仓库的<code>用户名/仓库名</code>，找不到的可以直接复制仓库的url</li></ul><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/image-20210710160214398.png" alt="image-20210710160214398" style="zoom: 50%;" /><ul><li>branch：分支，这里写上master</li><li>token：填入码云的私人令牌</li><li>path：路径，一般写上img</li><li>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></li></ul><p>另一个插件gitee配置和这个类似：</p><ul><li><p>url：图床网站，这里写码云的主页 <a href="https://link.zhihu.com/?target=https://gitee.com">https://gitee.com</a></p></li><li><p>owner：所有者，写上你的码云账号名，如果你不知道你的账号名，进入你刚才的仓库，浏览器url里面有</p></li><li><p>repo：仓库名称，只要写上仓库名称就行，比如我自己的仓库blogImage</p></li><li><p>path：写上路径，一般是img，<strong>这几个项都不用加“ &#x2F; “符号</strong></p></li><li><p>token：刚才你获取的个人令牌，两个插件是通用的，如果你用了另一个再来用这个，它会自动读取另一个插件的部分配置，不用重新申请</p></li><li><p>message：不用填</p></li></ul></li><li><p>配置typora</p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711220017.png" alt="image-20210711220009690"></p><p>不要选对网络位置的图片应用上述规则，不然你复制一张已经上传的图片进行粘贴，它还会给你上传一次</p></li></ol><h1 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h1><p>我用的主题是<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">Fluid</a>，请自行查看如何配置</p><p><a href="https://hexo.fluid-dev.com/docs/guide/">Fluid配置</a></p><p><a href="https://hexo.io/zh-cn/docs/configuration">Hexo官网配置</a></p><p>我的配置_config.fluid.yml如下：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">卡西莫多の礼物</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Quosimodo</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br><br><span class="hljs-comment"># 文章永久链接样式</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:category/:title/</span><br><br><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/avatar.jpg</span><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/favicon.png</span><br><br><span class="hljs-attr">custom_html:</span><br><br><span class="hljs-attr">code:</span><br>  <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 代码高亮</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-comment"># 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）</span><br>      <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 一些好玩的功能</span><br><span class="hljs-attr">fun_features:</span><br>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>  <span class="hljs-attr">typing:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 打印速度，数字越大越慢</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">110</span><br>    <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span><br>    <span class="hljs-comment"># 是否循环播放效果</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;卡西莫多の礼物&quot;</span><br><br>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span><br>  <span class="hljs-comment"># Navigation bar frosted glass special animation. It is an experimental feature</span><br>  <span class="hljs-attr">ground_glass:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span><br>    <span class="hljs-attr">px:</span> <span class="hljs-number">3</span><br>    <span class="hljs-comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span><br>    <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.5</span><br><br>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>  <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;Others&#x27;</span>,<br>      <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-books&#x27;</span>,<br>      <span class="hljs-attr">submenu:</span> [<br><br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/links/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br>      ]&#125;<br>    <span class="hljs-comment"># - &#123; key: &quot;tag&quot;, link: &quot;/tags/&quot;, icon: &quot;iconfont icon-tags-fill&quot; &#125;</span><br>    <span class="hljs-comment"># - &#123; key: &quot;about&quot;, link: &quot;/about/&quot;, icon: &quot;iconfont icon-user-fill&quot; &#125;</span><br>    <span class="hljs-comment"># - &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Home Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/banner.jpg</span><br>  <span class="hljs-comment"># 头图高度，屏幕百分比</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;云中作诗 泥里生活 岁月里洒脱&#x27;</span><br><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br><br>  <span class="hljs-comment"># 自动截取文章摘要</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 打开文章的标签方式</span><br>  <span class="hljs-comment"># Available: _blank | _self</span><br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_blank</span><br><br>  <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span><br>  <span class="hljs-attr">post_meta:</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 归档页</span><br><span class="hljs-comment"># Archive Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/banner.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 分类页</span><br><span class="hljs-comment"># Category Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/banner.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br><br>  <span class="hljs-comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;-length&quot;</span><br><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;-date&quot;</span><br><br>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 标签页</span><br><span class="hljs-comment"># Tag Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/banner.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/banner.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.jpg</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Quosimodo&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;人生如逆旅 我亦是行人&quot;</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/flyingcherryblossoms&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-qq-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/qcode.jpg&quot;</span> &#125;<br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/banner.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/banner.jpg</span><br><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 描述文字</span><br>    <span class="hljs-comment"># Descriptive text before date</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">本文最后更新于：</span><br><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-comment"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 文章右侧目录</span><br>  <span class="hljs-comment"># Table of contents (TOC)</span><br>  <span class="hljs-attr">toc:</span><br>    <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span><br>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">5</span><br><br>  <span class="hljs-comment"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span><br>  <span class="hljs-attr">mermaid:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 友链页</span><br><span class="hljs-comment"># Links Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/banner.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br>  <span class="hljs-comment"># 友链的成员项</span><br>  <span class="hljs-comment"># Member item of page</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;uint128&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;船舶专业大学生，喜欢计算机、摄影……&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://uint128.com/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;https://uint128.com/about/wooooooo.jpg&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Shen Xiaojian&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;在校大学生 / 热爱Linux和徒步&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://www.sxj.xyz/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/shenxiaojian/ImageHost/20210214163444.png&quot;</span><br>    &#125;<br><br>  <span class="hljs-comment"># 当成员头像加载失败时，替换为指定图片</span><br>  <span class="hljs-comment"># When the member avatar fails to load, replace the specified image</span><br>  <span class="hljs-attr">onerror_avatar:</span> <span class="hljs-string">/img/avatar.png</span><br><br><span class="hljs-comment"># 网页访问统计</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span><br>  <span class="hljs-comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span><br>  <span class="hljs-attr">baidu:</span> <span class="hljs-string">&#x27;c09ebf4b1c4e85a78c41088b03767102&#x27;</span><br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;div style=&quot;text-align: center;&quot;&gt;Copyright © by Quosimodo All Rights Reserved.&lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-comment"># Display website PV and UV statistics</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br>    <span class="hljs-comment"># 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br><br>  <span class="hljs-comment"># 国内大陆服务器的备案信息</span><br>  <span class="hljs-comment"># For Chinese mainland website policy, other areas keep disable</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># ICP证号</span><br>    <span class="hljs-attr">icp_text:</span> <span class="hljs-string">渝ICP备19011883号-1</span><br>    <span class="hljs-comment"># 公安备案号，不填则只显示ICP</span><br>    <span class="hljs-attr">police_text:</span> <br>    <span class="hljs-comment"># 公安备案的编号，用于URL跳转查询</span><br>    <span class="hljs-comment"># police_code: 12345678</span><br>    <span class="hljs-comment"># 公安备案的图片. 为空时不显示备案图片</span><br>    <span class="hljs-comment"># police_icon: /img/police_beian.png</span><br><br></code></pre></div></td></tr></table></figure><p>然后你就可以开始写文章了</p><hr><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>如何开始请查看：<a href="https://hexo.io/zh-cn/docs/commands#new">new命令的使用</a>，<a href="https://hexo.io/zh-cn/docs/writing">写作</a> ，<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a></p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new [layout] &lt;title&gt;</span><br></code></pre></div></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span></span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo new page --path about/me &quot;About me&quot;<br></code></pre></div></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo new page --path about/me<br></code></pre></div></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front-matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new [layout] &lt;title&gt;</span><br></code></pre></div></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><h2 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h2><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:title</code></td><td align="left">标题（小写，空格将会被替换为短杠）</td></tr><tr><td align="left"><code>:year</code></td><td align="left">建立的年份，比如， <code>2015</code></td></tr><tr><td align="left"><code>:month</code></td><td align="left">建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td align="left"><code>:i_month</code></td><td align="left">建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td align="left"><code>:day</code></td><td align="left">建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td align="left"><code>:i_day</code></td><td align="left">建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo publish [layout] &lt;title&gt;</span><br></code></pre></div></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new photo <span class="hljs-string">&quot;My Gallery&quot;</span></span><br></code></pre></div></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td></tr><tr><td align="left"><code>date</code></td><td align="left">文件建立日期</td></tr></tbody></table><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter设置了一些文章的信息，例如创建日期、title、页面图片、分类、标签等等。</p><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">---<br>title: Hello World<br>date: 2013/7/13 20:46:25<br>---<br></code></pre></div></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td><td align="left"></td></tr></tbody></table><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>看完上面之后你应该明白如何写作了：</p><ol><li><p>先new一个新的文章，可以选择从layout初始化</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo new title --path others/博客搭建<br></code></pre></div></td></tr></table></figure><p>就会在<code>_posts/others</code>文件夹下生成<code>博客搭建.md</code>，默认采用post.md的模板</p><blockquote><p>放在不同文件夹下是为了方便我们分类，并不影响Hexo识别，只要是放在_posts文件夹的的md文件都会被正确识别，分类和归档依靠的是Front-matter里面的category和date</p></blockquote></li><li><p>配置好Front-matter就可以开始写正文内容了。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Matlab笔记（一）</title>
    <link href="/Program/Matlab/matlab%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/Program/Matlab/matlab%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一、变量与函数"><a href="#一、变量与函数" class="headerlink" title="一、变量与函数"></a>一、变量与函数</h3><h4 id="（一）变量："><a href="#（一）变量：" class="headerlink" title="（一）变量："></a>（一）变量：</h4><p>命名规则：</p><blockquote><ul><li>不含空格</li><li>区别大小写</li><li>不超过19个字符</li><li>变量名必须以字母开头，之后可以为数字、字母、下划线，不能使用标点符号</li></ul></blockquote><p>特殊变量表：</p><blockquote><ul><li>ans：表示结果</li><li>pi：圆周率</li><li>eps：计算机的最小数，+1产生大于1的数</li><li>flops：浮点运算数</li><li>Inf：无穷大，如1&#x2F;0</li><li>NaN：不定量，如0&#x2F;0</li><li>i,j：虚根，i&#x3D;j&#x3D;$\sqrt{-1}$</li><li>nargin：所有函数的输入变量数目</li><li>nargout：所有函数的输出变量数目</li><li>realmin：最小可用正实数</li><li>realmax：最大可用正实数</li></ul></blockquote><h4 id="（二）-数学运算符号及标点符号"><a href="#（二）-数学运算符号及标点符号" class="headerlink" title="（二）.数学运算符号及标点符号"></a>（二）.数学运算符号及标点符号</h4><blockquote><p>+，-，*，&#x2F; .*：点乘运算，及矩阵对应元素相乘之后相加 .&#x2F;：点除运算 ^：幂运算 .^：点幂运算 \：左除运算 （1）MATLAB的每条命令后，若为都好或无标点符号则显示命令的结果；若命令后为分号，则禁止显示结果 （2）”%”后面所有文字为注释 （3）”…”表示续行</p></blockquote><h4 id="（三）数学函数"><a href="#（三）数学函数" class="headerlink" title="（三）数学函数"></a>（三）数学函数</h4><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711194532.png"></p><h4 id="（四）M文件"><a href="#（四）M文件" class="headerlink" title="（四）M文件"></a>（四）M文件</h4><blockquote><p>类似于c++的头文件，用于储存编写的函数，后缀为M的文件，这类文件的第一行必须是特殊字符 <code>function</code> 开始,格式为：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> 因变量名 = 函数名（自变量名）</span><br></code></pre></div></td></tr></table></figure><p>函数值的获得必须通过具体的运算实现，并赋给因变量。 M文件建立方法： 1.在Matlab中，点:File-&gt;New-&gt;M-file 2.在编辑窗口中输入程序内容 3.点：File-&gt;Save，存盘，M文件必须与函数名一致 Matlab的应用程序也以M文件保存</p></blockquote><h3 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h3><h4 id="（一）创建简单的数组"><a href="#（一）创建简单的数组" class="headerlink" title="（一）创建简单的数组"></a>（一）创建简单的数组</h4><blockquote><p>x &#x3D; [ a b c d e f] 创建包含指定元素的行向量 x &#x3D; first:last 创建从first开始，加数为1，last结束的行向量 x &#x3D; linespace(first, last ,n) 创建从first到last，中间有n个元素的行向量 x &#x3D; logspace(first, last, n) 创建从开始，到结束，有n个元素的对数分隔行向量</p></blockquote><h4 id="（二）数组元素的访问"><a href="#（二）数组元素的访问" class="headerlink" title="（二）数组元素的访问"></a>（二）数组元素的访问</h4><blockquote><p>1.访问一个元素：x(i) 访问数组x的第i个元素，i从1开始 2.访问一块元素：x(im:in) 访问冲im到in的元素 3.直接使用元素编址序号：x([i_1,i_2,i_3……]) 访问数组x的第i1到in个元素</p></blockquote><h4 id="（三）数组的方向"><a href="#（三）数组的方向" class="headerlink" title="（三）数组的方向"></a>（三）数组的方向</h4><blockquote><p>分号分隔一行，逗号分隔一个元素 直接产生列向量：c &#x3D; [1 ; 2 ; 3 ; 4] 转置产生列向量：b &#x3D; [1 2 3 4]; c &#x3D; b’</p></blockquote><h4 id="（四）数组的运算"><a href="#（四）数组的运算" class="headerlink" title="（四）数组的运算"></a>（四）数组的运算</h4><h5 id="1-数组和标量运算"><a href="#1-数组和标量运算" class="headerlink" title="1. 数组和标量运算"></a>1. 数组和标量运算</h5><blockquote><p>数组对标量的加、减、乘、除、乘方是数组的每个元素对该标量施加相应的加、减、乘、除、乘方运算。 设：a &#x3D; [a1,a2,a3……,an], c &#x3D; 标量 则：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a+c = [a1+c, a2+c,……,an+c]<br><br>a.*=[a1\* c, a2\*c,……,an\*c]<br><br>a./c=[a1/ c, a2/c,……,an/c]<br><br>a.\c=[c/a1, /a2,……,c/an]<br><br>a.\^c=[a1\^ c, a2\^c,……,an\^c]<br><br>c.\^a=[c\^a1,c\^a2,……，c\^an]<br></code></pre></div></td></tr></table></figure></blockquote><h5 id="2-数组和数组运算"><a href="#2-数组和数组运算" class="headerlink" title="2.数组和数组运算"></a>2.数组和数组运算</h5><blockquote><p>当两个数组有相同维数时，加、减、乘、除、乘方运算可按元素对元素方式进行，不同大小或维数的数组是不能进行运算的。 设：a&#x3D;[a1,a2,……,an], b&#x3D;[b1,b2,……,bn] 则：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a+c = [a1+b1, a2+b2,……,an+bn]<br><br>a.*=[a1\* b1, a2\*b2,……,an\*bn]<br><br>a./c=[a1/ b1, a2/b2,……,an/bn]<br><br>a.\c=[b1/a1, b2/a2,……,bn/an]<br><br>a.\^c=[a1\^ b1, a2\^c2,……,an\^bn]<br><br>c.\^a=[b1\^a1,b2\^a2,……，b\^an]<br></code></pre></div></td></tr></table></figure></blockquote><h3 id="三、矩阵"><a href="#三、矩阵" class="headerlink" title="三、矩阵"></a>三、矩阵</h3><h4 id="（一）矩阵的建立"><a href="#（一）矩阵的建立" class="headerlink" title="（一）矩阵的建立"></a>（一）矩阵的建立</h4><blockquote><p>都好或空格用于分隔某一行的元素，分号用于区分不同行。除了分号，在输入矩阵时，按Enter键也表示开始新的一行。输入矩阵时，严格要求所有行有相同的列。 例： p &#x3D; [1 1 1 1; 2 2 2 2; 3 3 3 3] p &#x3D; [1 1 1 1 ​ 2 2 2 2 ​ 3 3 3 3] 特殊矩阵的建立</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a = []    <span class="hljs-comment">%生成空矩阵，当对一项操作无结果是，返回空矩阵，大小为零</span><br><br>a = <span class="hljs-built_in">zeros</span>(m, n)   <span class="hljs-comment">%生成m行，n列的零矩阵</span><br><br>a = <span class="hljs-built_in">ones</span>(m, n)    <span class="hljs-comment">%生成一个m行，n列的元素全为1的矩阵</span><br><br>a = <span class="hljs-built_in">eye</span>(m, n)     <span class="hljs-comment">%生成一个m行，n列的单位矩阵</span><br><br>a = <span class="hljs-built_in">rand</span>(m, n)    <span class="hljs-comment">%生成一个m行，n列的随机矩阵</span><br></code></pre></div></td></tr></table></figure></blockquote><h4 id="（二）矩阵中元素的操作"><a href="#（二）矩阵中元素的操作" class="headerlink" title="（二）矩阵中元素的操作"></a>（二）矩阵中元素的操作</h4><blockquote><ol><li>矩阵A的第r行：A（r，：）</li><li>矩阵A的第r列：A（：，r）</li><li>取m行,n列元素：A（m, n)</li><li>依次提取矩阵A的每一列，将A拉伸为一个列向量：A（：）</li><li>取矩阵A的第1₂行、第i<del>1</del>-j<del>2</del>列构成新矩阵：A（i<del>1</del>:i<del>2</del>，j<del>1</del>:j<del>2</del>）</li><li>以逆序提取矩阵A的第i<del>1</del>-i<del>2</del>行，构成新矩阵：A（i<del>2</del> ：-1 : i<del>1</del> , ：)</li><li>以逆序提取矩阵A的第j<del>z列，构成新矩阵：A（：, j</del>2~ :-1：j<del>1</del>）</li><li>删除A的第i记行，构成新矩阵：A（i<del>1</del>：i<del>2</del>，：）&#x3D;[]</li><li>删除A的第j<del>1</del>-j<del>2</del>列，构成新矩阵：A（：，j<del>1</del> ：j<del>2</del>）&#x3D;[]</li><li>将矩阵A和B拼接成新矩阵：[A B]；[A；B]</li></ol></blockquote><h4 id="（三）矩阵的运算"><a href="#（三）矩阵的运算" class="headerlink" title="（三）矩阵的运算"></a>（三）矩阵的运算</h4><blockquote><ol><li><p>标量矩阵运算 同标量-数组运算</p></li><li><p>矩阵和矩阵运算</p></li></ol><ul><li>元素对元素的运算，同数组-数组的运算</li><li>矩阵运算：<ul><li>矩阵加法：A+B</li><li>矩阵乘法：A*B</li><li>方阵的行列式：det（A）</li><li>方阵的逆：inv（A）</li><li>方阵的特征值与特征向量：[V, D]&#x3D;eig[A]</li></ul></li></ul></blockquote><h3 id="四、关系与逻辑运算"><a href="#四、关系与逻辑运算" class="headerlink" title="四、关系与逻辑运算"></a>四、关系与逻辑运算</h3><p> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711195137.png"></p><h3 id="五、控制流"><a href="#五、控制流" class="headerlink" title="五、控制流"></a>五、控制流</h3><p>MATLAB提供三种决策或控制流结构：</p><ul><li>for循环</li><li>while循环</li><li>if-else-end结构</li></ul><p>这些结构经常包含大量的MATLAB命令，故经常出现在MATLAB程序中，而不知直接加在MATLAB提示符下。</p><h4 id="（一）for循环"><a href="#（一）for循环" class="headerlink" title="（一）for循环"></a>（一）for循环</h4><blockquote><p>允许一组命令以固定的和预定的次数重复</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-keyword">for</span> x=array<br>  &#123;commands&#125;<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><p>在for和end语句之间的命令串<code>&#123;commands&#125;</code>按数组（array）中的每一列执行一次。在每次迭代中，x被指定为数组的下一列，即在第n次循环中，x&#x3D;array(: , n)</p></blockquote><h4 id="（二）while循环"><a href="#（二）while循环" class="headerlink" title="（二）while循环"></a>（二）while循环</h4><blockquote><p>允许一组命令以不定次数重复</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-keyword">while</span> expression<br>  &#123;commands&#125;<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><p>只要表达式里<code>express</code>的所有蒜素为真，就执行while和end语句之间的命令串<code>&#123;commands&#125;</code></p></blockquote><h4 id="（三）if-else-end结构"><a href="#（三）if-else-end结构" class="headerlink" title="（三）if-else-end结构"></a>（三）if-else-end结构</h4><blockquote><ol><li><p>有一个选择的一般形式是：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-keyword">if</span> express<br>&#123;commands&#125;<br><span class="hljs-keyword">else</span><br>&#123;commands&#125;<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><p>如果在表达式<code>express</code>里的所有元素为真就执行if和end语句之间的命令串<code>&#123;commands&#125;</code></p></li><li><p>一般形式</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-keyword">if</span> express<br>&#123;commands&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> express<br>&#123;commands&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> express<br>&#123;commands&#125;<br> …………<br><span class="hljs-keyword">else</span><br>&#123;commands&#125;<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure></li></ol></blockquote><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711194930.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span>=<span class="hljs-title">BubbleSort</span><span class="hljs-params">(x)</span></span><br>x_len=<span class="hljs-built_in">length</span>(x);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:x_len<span class="hljs-number">-1</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:x_len-<span class="hljs-built_in">i</span><br>        <span class="hljs-keyword">if</span>(x(<span class="hljs-built_in">j</span>)&gt;x(<span class="hljs-built_in">j</span>+<span class="hljs-number">1</span>))<br>            [x(<span class="hljs-built_in">j</span>),x(<span class="hljs-built_in">j</span>+<span class="hljs-number">1</span>)]=swap(x(<span class="hljs-built_in">j</span>),x(<span class="hljs-built_in">j</span>+<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-built_in">disp</span>([num2str(<span class="hljs-built_in">i</span>),<span class="hljs-string">&#x27;.Sort:x=&#x27;</span>,num2str(x)]);<br><span class="hljs-keyword">end</span><br>y=x;<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[a,b]</span>=<span class="hljs-title">swap</span><span class="hljs-params">(x,y)</span></span><br>a=y;<br>b=x;<br><span class="hljs-keyword">end</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span> = <span class="hljs-title">fun1</span><span class="hljs-params">(x,y)</span></span><br>y = x*x + <span class="hljs-built_in">sin</span>(x*y) + <span class="hljs-number">2</span>*y;<br></code></pre></div></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">highsum</span> = <span class="hljs-title">high</span><span class="hljs-params">()</span></span><br>h = <span class="hljs-number">100</span>;<br>summary = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">10</span><br>   summary = summary + h<br>   h = h/<span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br>highsum = summary;<br></code></pre></div></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxmatrix</span> = <span class="hljs-title">max_matrix</span><span class="hljs-params">(x)</span></span><br>x<br>[x,y] = <span class="hljs-built_in">find</span>(x==<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(x)))<br>maxmatrix = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(x));<br></code></pre></div></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span> = <span class="hljs-title">sum_factorial</span><span class="hljs-params">(x)</span></span><br>f = sum(<span class="hljs-built_in">factorial</span>(<span class="hljs-number">1</span>:x))<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Matlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matlab笔记（二）</title>
    <link href="/Program/Matlab/matlab%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/Program/Matlab/matlab%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一、MATLAB作图"><a href="#一、MATLAB作图" class="headerlink" title="一、MATLAB作图"></a>一、MATLAB作图</h3><h4 id="（一）曲线图"><a href="#（一）曲线图" class="headerlink" title="（一）曲线图"></a>（一）曲线图</h4><blockquote><p>Matlab作图是通过描点、连线来实现的，故在画一个曲线图形之前，必须先取得该图形上的一系列的点的坐标（即x,y），然后将该点击的坐标传给MATLAB函数画图。 命令为： <code>PLOT(X,Y,S)</code> x,y是向量，分别表示点集的横纵坐标，S表示线的类型 S的类型：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">y 黄色  <br>m 洋红  <br>c 蓝绿色 <br>r 红色<br>. 点   <br>- 连线<br>。 圈       <br>: 短虚线<br>x x-符号<br>-.    长短线<br>r 红色<br>+ 加号<br>--    长虚线<br></code></pre></div></td></tr></table></figure><p>不加s默认画实线：PLOT(x,y) 将多条线画在一起：PLOT(X,Y<del>1</del>,S<del>1</del>,X,Y<del>2</del>,S<del>2</del>,……,X,Y<del>n</del>,S<del>n</del>)</p></blockquote><h4 id="（二）符号函数（显函数、隐函数和参数方程）画图"><a href="#（二）符号函数（显函数、隐函数和参数方程）画图" class="headerlink" title="（二）符号函数（显函数、隐函数和参数方程）画图"></a>（二）符号函数（显函数、隐函数和参数方程）画图</h4><h5 id="1-ezplot"><a href="#1-ezplot" class="headerlink" title="1.ezplot"></a>1.ezplot</h5><blockquote><ul><li>ezplot(‘f(x)’,[a,b])</li></ul><p> 表示在a&lt;x&lt;b绘制显函数f&#x3D;f(x)的函数图</p><ul><li><p>ezplot(‘f(x,y)’,[xmin,xmax,ymin,ymax]) 表示在区间xmin&lt;x&lt;xmax和ymin&lt;y&lt;ymax绘制隐函数f(x,y)&#x3D;0的函数图</p></li><li><p>ezplot(‘x(t)’,’y(t)’,[tmin,tmax]) 表示在区间tmin&lt;t&lt;tmax绘制参数方程,x&#x3D;x(t),y&#x3D;y(t)的函数图</p></li><li><p>fplot(‘fun’,lims) 表示绘制字符串fun指定的函数在Lims&#x3D;[xmin,xmax]的图形</p><ul><li>fun必须是M文件的函数名或是独立变量为x的字符串</li><li>fplot函数不能画参数方程和隐函数图形，但在一个图上可以画多个图形</li></ul></li></ul></blockquote><h4 id="（三）对数坐标"><a href="#（三）对数坐标" class="headerlink" title="（三）对数坐标"></a>（三）对数坐标</h4><blockquote><ul><li><p>loglog(Y) 表示x,y坐标都是对数坐标系</p></li><li><p>semilogx(Y) 表示x坐标轴是对数坐标系</p></li><li><p>semilogy(…) 表示y坐标轴是对数坐标系</p></li><li><p>plotty 有两个y坐标轴，一个在左边，一个在右边</p></li></ul></blockquote><h3 id="二、空间曲线"><a href="#二、空间曲线" class="headerlink" title="二、空间曲线"></a>二、空间曲线</h3><blockquote><ul><li><p>一条曲线：plot3(x,y,z,s) x,y,z表示横纵坐标和函数值,s表示线的颜色和类型 其中x,y,z都是m*n的矩阵，其对应的每一列表示一条曲线</p></li><li><p>多条曲线：plot3(x,y,z)</p></li></ul></blockquote><h3 id="三、空间曲面"><a href="#三、空间曲面" class="headerlink" title="三、空间曲面"></a>三、空间曲面</h3><blockquote><ul><li><p>surf(x,y,z) x,y,z表示横纵坐标和函数值 画出数据点（x,y,z）表示的曲面</p></li><li><p>mesh(x,y,z) 生成网格线曲面</p></li><li><p>meshz(x,y,z) 生成网格线曲面，带高度z</p></li></ul></blockquote><h3 id="四、处理图像"><a href="#四、处理图像" class="headerlink" title="四、处理图像"></a>四、处理图像</h3><h4 id="（一）在图形上加格栅、图例和标注"><a href="#（一）在图形上加格栅、图例和标注" class="headerlink" title="（一）在图形上加格栅、图例和标注"></a>（一）在图形上加格栅、图例和标注</h4><blockquote><ul><li><p>grid on&#x2F;off 打开&#x2F;关闭 网格背景在图像上</p></li><li><p>hh &#x3D; xlabel(string) 在当前图形的x轴上加图例string</p></li><li><p>hh &#x3D; ylabel(string) 在当前图形的y轴上加图例string</p></li><li><p>hh &#x3D; zlabel(string) 在当前图形的z轴上加图例string</p></li><li><p>hh &#x3D; title(string) 在当前图形的顶部加图例string</p></li><li><p>hh &#x3D; gtex(string) 添加标注区别曲线</p></li></ul></blockquote><h4 id="（二）定制坐标"><a href="#（二）定制坐标" class="headerlink" title="（二）定制坐标"></a>（二）定制坐标</h4><blockquote><ul><li>Axis([xmin xmax ymin ymax zmin zmax])</li></ul><p>定制图形坐标，分别表示x,y,z的最大和最小值</p><ul><li>Axis auto</li></ul><p>还原坐标轴到自动缺省值状态</p></blockquote><h4 id="（三）图形保持"><a href="#（三）图形保持" class="headerlink" title="（三）图形保持"></a>（三）图形保持</h4><blockquote><ul><li><p>hold on 保持当前图形，以便继续画图到当前图上</p></li><li><p>hold off 释放当前图形窗口</p></li><li><p>figure(h) 新建h窗口，激活图形使其可见，并把它置于其它图形之上</p></li></ul></blockquote><h4 id="（四）分割窗口"><a href="#（四）分割窗口" class="headerlink" title="（四）分割窗口"></a>（四）分割窗口</h4><blockquote><ul><li><p>h &#x3D; subplot(marows,ncols,thisplot) 划分整个图形为marows x ncols大小的块（逐行对块进行访问）并激活第thisplot块，其后的作图语句将显示在该块上</p></li><li><p>subplot(mrows,ncols,thisplot) 激活一划分为Mrows x ncols块的屏幕中的第thisplot块，其后的作图语句将图形画在该块上</p></li><li><p>subplot(1,1,1) 将作图窗口返回非分割状态</p></li></ul></blockquote><h4 id="（五）图像缩放"><a href="#（五）图像缩放" class="headerlink" title="（五）图像缩放"></a>（五）图像缩放</h4><blockquote><ul><li><p>zoom on 为当前窗口打开缩放模式，单击鼠标左键，则在当前图形窗口中，以鼠标点中的点为中心的图形放大2倍；单击鼠标右键，则缩小两倍</p></li><li><p>zoom off 关闭缩放模式</p></li></ul></blockquote><h4 id="（六）改变视角"><a href="#（六）改变视角" class="headerlink" title="（六）改变视角"></a>（六）改变视角</h4><blockquote><ul><li><p>view(a,b) 命令view(a,b) 改变视角到(a,b)，a是方位角，b为仰角。缺省值为（-37.5，30）。</p></li><li><p>view([x,y,z])</p><p>view用空间矢量表示的，三个量只关心他们的比例，与数值大小无关，x轴view([1,0,0])，y轴view([0,1,0])，z轴view([0,0,1])。</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Matlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON</title>
    <link href="/Program/Others/json/"/>
    <url>/Program/Others/json/</url>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="JSON介绍"><a href="#JSON介绍" class="headerlink" title="JSON介绍"></a>JSON介绍</h2><h3 id="一、什么是JSON？"><a href="#一、什么是JSON？" class="headerlink" title="一、什么是JSON？"></a>一、什么是JSON？</h3><p> JSON (JavaScript Object Notation：JavaScript 对象表示法)是一种轻量级的数据交换格式。JSON是储存和交换文本信息的语法，类似XML。但是更小、更快、更灵活。JSON独立于语言，虽然JSON使用JavaScript语法描述数据对象，但是JSON仍然独立于语言和平台。JSON解析器和JSON库支持许多不同的编程语言（如PHP, JSP, .NET)。</p><h4 id="JSON于XML的异同"><a href="#JSON于XML的异同" class="headerlink" title="JSON于XML的异同"></a>JSON于XML的异同</h4><h5 id="相同："><a href="#相同：" class="headerlink" title="相同："></a>相同：</h5><ul><li>JSON 是纯文本</li><li>JSON 具有”自我描述性”（人类可读）</li><li>JSON 具有层级结构（值中存在值）</li><li>JSON 可通过 JavaScript 进行解析</li><li>JSON 数据可使用 AJAX 进行传输</li></ul><h5 id="不同："><a href="#不同：" class="headerlink" title="不同："></a>不同：</h5><ul><li><p>没有结束标签</p></li><li><p>更短</p></li><li><p>读写的速度更快</p></li><li><p>能够使用内建的 JavaScript eval() 方法进行解析</p></li><li><p>使用数组</p></li><li><p>不使用保留字</p></li></ul><blockquote><p>我们生而为人却不知为何来到这个世界，生命好就好在本没有意义，我们可以赋予它任何意义。</p></blockquote><p>对AJAX应用程序来说，JSON比XML更快更易使用</p><h5 id="使用XML："><a href="#使用XML：" class="headerlink" title="使用XML："></a>使用XML：</h5><ul><li>读取XML文档</li><li>使用XML DOM来循环遍历文档</li><li>读取值并储存在变量中</li></ul><h5 id="使用JSON："><a href="#使用JSON：" class="headerlink" title="使用JSON："></a>使用JSON：</h5><ul><li>读取JSON字符串</li><li>用eval()处理JSON字符串</li></ul><h2 id="JSON学习"><a href="#JSON学习" class="headerlink" title="JSON学习"></a>JSON学习</h2><h3 id="一、JSON语法"><a href="#一、JSON语法" class="headerlink" title="一、JSON语法"></a>一、JSON语法</h3><h4 id="1-语法规则："><a href="#1-语法规则：" class="headerlink" title="1.语法规则："></a>1.语法规则：</h4><ul><li><p>数据在名称&#x2F;值**（”name”:”value”）**对，等价于name &#x3D; ‘value’，例如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;age&quot;</span> = <span class="hljs-number">30</span> <span class="hljs-comment">//数字类型</span><br><span class="hljs-string">&quot;name&quot;</span> = <span class="hljs-string">&quot;Quosimodo&quot;</span> <span class="hljs-comment">//字符类型</span><br></code></pre></div></td></tr></table></figure></li><li><p>数据由逗号分隔</p></li><li><p>大括号**（{}）**保存对象</p></li><li><p>中括号**（[]）**保存数组</p></li></ul><h4 id="2-JSON值"><a href="#2-JSON值" class="headerlink" title="2.JSON值"></a>2.JSON值</h4><ul><li>数字（整数或浮点数）</li><li>字符串（“要在双引号中”）</li><li>逻辑值（true或false）</li><li>数组（在中括号中）</li><li>对象（在大括号中）</li><li>null</li></ul><h4 id="3-JSON数组"><a href="#3-JSON数组" class="headerlink" title="3.JSON数组"></a>3.JSON数组</h4><p>JSON 数组在中括号中书写，数组可包含多个对象，<strong><em>数组的元素不能是键值&#x2F;对</em></strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">myObj = &#123;<br>    <span class="hljs-string">&quot;sites&quot;</span>: [<br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;卡西莫多的礼物&quot;</span> , <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.quosimodo.com&quot;</span> &#125;, <br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;google&quot;</span> , <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.google.com&quot;</span> &#125;, <br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;微博&quot;</span> , <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.weibo.com&quot;</span> &#125;<br>    ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过下标直接访问：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x = myObj.<span class="hljs-property">sites</span>[<span class="hljs-number">0</span>];<br>myObj.<span class="hljs-property">sites</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Github&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>使用 for-in 来访问数组：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> myObj.<span class="hljs-property">sites</span>) &#123;<br>    x += myObj.<span class="hljs-property">sites</span>[i] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用 for 循环：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; myObj.<span class="hljs-property">sites</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    x += myObj.<span class="hljs-property">sites</span>[i] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>嵌套 JSON 对象中的数组 JSON 对象中数组可以包含另外一个数组，或者另外一个 JSON 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">myObj = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;网站&quot;</span>,<br>    <span class="hljs-string">&quot;num&quot;</span>:<span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;sites&quot;</span>: [<br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>:[ <span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-string">&quot;Google 搜索&quot;</span>, <span class="hljs-string">&quot;Google 翻译&quot;</span> ] &#125;,<br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>:[ <span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&quot;菜鸟工具&quot;</span>, <span class="hljs-string">&quot;菜鸟微信&quot;</span> ] &#125;,<br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Taobao&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>:[ <span class="hljs-string">&quot;淘宝&quot;</span>, <span class="hljs-string">&quot;网购&quot;</span> ] &#125;<br>    ]<br>&#125;<br><span class="hljs-comment">//循环遍历</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> myObj.<span class="hljs-property">sites</span>) &#123;<br>    x += <span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + myObj.<span class="hljs-property">sites</span>[i].<span class="hljs-property">name</span> + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (j <span class="hljs-keyword">in</span> myObj.<span class="hljs-property">sites</span>[i].<span class="hljs-property">info</span>) &#123;<br>        x += myObj.<span class="hljs-property">sites</span>[i].<span class="hljs-property">info</span>[j] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>delete关键字删除数组元素：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">delete</span> myObj.<span class="hljs-property">sites</span>[<span class="hljs-number">0</span>];<br></code></pre></div></td></tr></table></figure><h4 id="4-JSON对象"><a href="#4-JSON对象" class="headerlink" title="4.JSON对象"></a>4.JSON对象</h4><h6 id="对象可以包含多个-名称-值-对："><a href="#对象可以包含多个-名称-值-对：" class="headerlink" title="对象可以包含多个 名称&#x2F;值 对："></a>对象可以包含多个 名称&#x2F;值 对：</h6><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Quosimodo&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.quosimodo.cn&quot;</span> &#125;<br><span class="hljs-comment">//等价于</span><br>name = <span class="hljs-string">&quot;Quosimodo&quot;</span><br>url = <span class="hljs-string">&quot;www.quosimodo.cn&quot;</span><br></code></pre></div></td></tr></table></figure><h6 id="对象可以用（-直接访问对象的值，或者用中括号（-），或者循环调用："><a href="#对象可以用（-直接访问对象的值，或者用中括号（-），或者循环调用：" class="headerlink" title="对象可以用（.)直接访问对象的值，或者用中括号（[]），或者循环调用："></a>对象可以用（.)直接访问对象的值，或者用中括号（[]），或者循环调用：</h6><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObj, x;<br>myObj = &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Quosimodo&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">999</span>, <span class="hljs-string">&quot;site&quot;</span>:<span class="hljs-literal">null</span> &#125;;<br>x = myObj.<span class="hljs-property">name</span>;<span class="hljs-comment">//1</span><br>x = myObj[<span class="hljs-string">&quot;name&quot;</span>];<span class="hljs-comment">//2</span><br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> myObj)&#123;<span class="hljs-comment">//3</span><br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> += x+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> += myObj[x] +<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-comment">//循环中也可以用中括号访问</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="对象可以嵌套JSON对象，对象属性的值可以是一个数组："><a href="#对象可以嵌套JSON对象，对象属性的值可以是一个数组：" class="headerlink" title="对象可以嵌套JSON对象，对象属性的值可以是一个数组："></a>对象可以嵌套JSON对象，<strong>对象属性的值可以是一个数组</strong>：</h6><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">myObj = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Quosimodo&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">9999</span>,<br>    <span class="hljs-string">&quot;sites&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;site1&quot;</span>:<span class="hljs-string">&quot;www.quosimodo.com&quot;</span>,<br>        <span class="hljs-string">&quot;site2&quot;</span>:<span class="hljs-string">&quot;m.quosimodo.com&quot;</span>,<br>        <span class="hljs-string">&quot;site3&quot;</span>:<span class="hljs-string">&quot;c.quosimodo.com&quot;</span><br>    &#125;<br>    <span class="hljs-string">&quot;we&quot;</span>:[<span class="hljs-string">&quot;Quosimodo&quot;</span>, <span class="hljs-string">&quot;Piano&quot;</span>, <span class="hljs-string">&quot;Whitenight&quot;</span>]<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="访问方式和前面相同，只是多了几层调用："><a href="#访问方式和前面相同，只是多了几层调用：" class="headerlink" title="访问方式和前面相同，只是多了几层调用："></a>访问方式和前面相同，只是多了几层调用：</h6><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x = myObj.<span class="hljs-property">sites</span>.<span class="hljs-property">site1</span>;<br>x = myObj.<span class="hljs-property">sites</span>[<span class="hljs-string">&quot;site1&quot;</span>];<br><span class="hljs-comment">//可以通过这种方式直接修改</span><br>myObj.<span class="hljs-property">sites</span>[<span class="hljs-string">&quot;site1&quot;</span>] = <span class="hljs-string">&quot;www.baidu.com&quot;</span>;<br></code></pre></div></td></tr></table></figure><h6 id="通过delete关键字删除对象属性："><a href="#通过delete关键字删除对象属性：" class="headerlink" title="通过delete关键字删除对象属性："></a>通过delete关键字删除对象属性：</h6><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">delete</span> myObj.<span class="hljs-property">sites</span>.<span class="hljs-property">site1</span>;<br><span class="hljs-keyword">delete</span> myObj.<span class="hljs-property">sites</span>[<span class="hljs-string">&quot;site1&quot;</span>];<br></code></pre></div></td></tr></table></figure><h4 id="5-JSON-数字"><a href="#5-JSON-数字" class="headerlink" title="5.JSON 数字"></a>5.JSON 数字</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123; <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">99</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="6-JSON-布尔类型"><a href="#6-JSON-布尔类型" class="headerlink" title="6.JSON 布尔类型"></a>6.JSON 布尔类型</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123; <span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="7-JSON-null"><a href="#7-JSON-null" class="headerlink" title="7.JSON null"></a>7.JSON null</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123; <span class="hljs-string">&quot;flag&quot;</span>:<span class="hljs-literal">null</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="8-JSON使用JavaScript语法"><a href="#8-JSON使用JavaScript语法" class="headerlink" title="8.JSON使用JavaScript语法"></a>8.JSON使用JavaScript语法</h4><p>因为JSON使用JavaScript语法，所以无需额外的软件就能处理JavaScript中的JSON。通过JavaScript可以直接创建一个对象数组，并像这样赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sites = [<br>    &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Quosimodo&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.quosimodo.cn&quot;</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.google.com&quot;</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&quot;www.baidu.com&quot;</span> &#125;<br>];<br></code></pre></div></td></tr></table></figure><p>因为创建的是数组对象，所以可以直接这样调用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">sites[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>;<br></code></pre></div></td></tr></table></figure><p>返回 “Quosimodo”。 也可以通过这种方式直接修改数据:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">sites[<span class="hljs-number">0</span>].<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Yahoo&quot;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="三、JSON的使用"><a href="#三、JSON的使用" class="headerlink" title="三、JSON的使用"></a>三、JSON的使用</h3><h4 id="1-JSON-parse"><a href="#1-JSON-parse" class="headerlink" title="1.JSON.parse()"></a>1.JSON.parse()</h4><p>JSON 通常用于与服务端交换数据。 在接收服务器数据时一般是字符串。 我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text[, reviver])<br></code></pre></div></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>**text:**必需， 一个有效的 JSON 字符串。</li><li><strong>reviver:</strong> 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。</li></ul><h5 id="JSON-解析实例"><a href="#JSON-解析实例" class="headerlink" title="JSON 解析实例"></a>JSON 解析实例</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p id=<span class="hljs-string">&quot;demo&quot;</span>&gt;&lt;/p&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;runoob&quot;, &quot;alexa&quot;:10000, &quot;site&quot;:&quot;www.runoob.com&quot; &#125;&#x27;</span>);<span class="hljs-comment">//解析后就能使用</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;：&quot;</span> + obj.<span class="hljs-property">site</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a><strong>异常</strong></h5><h6 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h6><p>JSON 不能存储 Date 对象。 如果你需要存储 Date 对象，需要将其转换为字符串。 之后再将字符串转换为 Date 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot;, &quot;initDate&quot;:&quot;2013-12-14&quot;,&quot;site&quot;:&quot;www.runoob.com&quot;&#125;&#x27;</span>; <br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text);<br>obj.<span class="hljs-property">initDate</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj.<span class="hljs-property">initDate</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;创建日期: &quot;</span> + obj.<span class="hljs-property">initDate</span>;<br></code></pre></div></td></tr></table></figure><p>我们可以启用 JSON.parse 的第二个参数 reviver，一个转换结果的函数，对象的每个成员调用此函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot;, &quot;initDate&quot;:&quot;2013-12-14&quot;, &quot;site&quot;:&quot;www.runoob.com&quot;&#125;&#x27;</span>;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text, <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;initDate&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>&#125;&#125;);<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;创建日期：&quot;</span> + obj.<span class="hljs-property">initDate</span>;<br></code></pre></div></td></tr></table></figure><h5 id="解析函数"><a href="#解析函数" class="headerlink" title="解析函数"></a>解析函数</h5><p>JSON 不允许包含函数，但你可以将函数作为字符串存储，之后再将字符串转换为函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot;, &quot;alexa&quot;:&quot;function () &#123;return 10000;&#125;&quot;,&quot;site&quot;:&quot;www.runoob.com&quot;&#125;&#x27;</span>;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text);<br>obj.<span class="hljs-property">alexa</span> = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;(&quot;</span> + obj.<span class="hljs-property">alexa</span> + <span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; Alexa 排名：&quot;</span> + obj.<span class="hljs-title function_">alexa</span>();<br></code></pre></div></td></tr></table></figure><p>不建议在 JSON 中使用函数。</p><h5 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h5><p>主流浏览器都支持 JSON.parse() 函数：</p><ul><li>Firefox 3.5</li><li>Internet Explorer 8</li><li>Chrome</li><li>Opera 10</li><li>Safari 4</li></ul><h4 id="2-JSON-stringify"><a href="#2-JSON-stringify" class="headerlink" title="2.JSON.stringify()"></a>2.JSON.stringify()</h4><p>JSON 通常用于与服务端交换数据。 在向服务器发送数据时一般是字符串。 我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value[, replacer[, space]])<br></code></pre></div></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><p>value: 必需， 要转换的 JavaScript 值（通常为对象或数组）。</p></li><li><p>replacer: 可选。用于转换结果的函数或数组。 如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：””。 如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。</p></li><li><p>space: 可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p id=<span class="hljs-string">&quot;demo&quot;</span>&gt;&lt;/p&gt;<br><br><span class="hljs-comment">//JavaScript 对象转换</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;runoob&quot;</span>, <span class="hljs-string">&quot;alexa&quot;</span>:<span class="hljs-number">10000</span>, <span class="hljs-string">&quot;site&quot;</span>:<span class="hljs-string">&quot;www.runoob.com&quot;</span>&#125;; <span class="hljs-keyword">var</span> myJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj); <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = myJSON;<br><br><span class="hljs-comment">//JavaScript 数组转换</span><br><span class="hljs-keyword">var</span> arr = [ <span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;Taobao&quot;</span>, <span class="hljs-string">&quot;Facebook&quot;</span> ];<br><span class="hljs-keyword">var</span> myJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = myJSON;<br></code></pre></div></td></tr></table></figure><h5 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h5><h6 id="解析数据-1"><a href="#解析数据-1" class="headerlink" title="解析数据"></a>解析数据</h6><p>JSON 不能存储 Date 对象。 JSON.stringify() 会将所有日期转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;initDate&quot;</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;site&quot;</span>:<span class="hljs-string">&quot;www.runoob.com&quot;</span>&#125;; <span class="hljs-keyword">var</span> myJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj); <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = myJSON;<br></code></pre></div></td></tr></table></figure><p>之后你可以再将字符串转换为 Date 对象。</p><h6 id="解析函数-1"><a href="#解析函数-1" class="headerlink" title="解析函数"></a>解析函数</h6><p>JSON 不允许包含函数，JSON.stringify() 会删除 JavaScript 对象的函数，包括 key 和 value。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;alexa&quot;</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">10000</span>;&#125;, <span class="hljs-string">&quot;site&quot;</span>:<span class="hljs-string">&quot;www.runoob.com&quot;</span>&#125;; <span class="hljs-keyword">var</span> myJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj);  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = myJSON;<br></code></pre></div></td></tr></table></figure><p>我们可以在执行 JSON.stringify() 函数前将函数转换为字符串来避免以上问题的发生：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;alexa&quot;</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">10000</span>;&#125;, <span class="hljs-string">&quot;site&quot;</span>:<span class="hljs-string">&quot;www.runoob.com&quot;</span>&#125;; obj.<span class="hljs-property">alexa</span> = obj.<span class="hljs-property">alexa</span>.<span class="hljs-title function_">toString</span>(); <span class="hljs-keyword">var</span> myJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj);  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = myJSON;<br></code></pre></div></td></tr></table></figure><p>不建议在 JSON 中使用函数。</p><h5 id="浏览器支持-1"><a href="#浏览器支持-1" class="headerlink" title="浏览器支持"></a>浏览器支持</h5><p>主流浏览器都支持 JSON.stringify() 函数：</p><ul><li>Firefox 3.5</li><li>Internet Explorer 8</li><li>Chrome</li><li>Opera 10</li><li>Safari 4</li></ul>]]></content>
    
    
    <categories>
      
      <category>Program</category>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从前慢---木心</title>
    <link href="/Poem/%E4%BB%8E%E5%89%8D%E6%85%A2-%E6%9C%A8%E5%BF%83/"/>
    <url>/Poem/%E4%BB%8E%E5%89%8D%E6%85%A2-%E6%9C%A8%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="从前慢—木心"><a href="#从前慢—木心" class="headerlink" title="从前慢—木心"></a>从前慢—木心</h1><blockquote><p>记得早先少年时</p><p>大家诚诚恳恳</p><p>说一句 是一句</p><p>清早上火车站</p><p>长街黑暗无行人</p><p>卖豆浆的小店冒着热气</p><p>从前的日色变得慢</p><p>车，马，邮件都慢 一生只够爱一个人</p><p>从前的锁也好看</p><p>钥匙精美有样子</p><p>你锁了</p><p>人家就懂了</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Poem</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>新添声杨柳枝词</title>
    <link href="/Poem/%E6%96%B0%E6%B7%BB%E5%A3%B0%E6%9D%A8%E6%9F%B3%E6%9E%9D%E8%AF%8D/"/>
    <url>/Poem/%E6%96%B0%E6%B7%BB%E5%A3%B0%E6%9D%A8%E6%9F%B3%E6%9E%9D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="南歌子词二首-新添声杨柳枝词"><a href="#南歌子词二首-新添声杨柳枝词" class="headerlink" title="南歌子词二首 &#x2F; 新添声杨柳枝词"></a>南歌子词二首 &#x2F; 新添声杨柳枝词</h1><blockquote><p>【作者】温庭筠 【朝代】唐 </p><p>一尺深红胜曲尘，天生旧物不如新。</p><p>合欢桃核终堪恨，里许元来别有人。 </p><p>井底点灯深烛伊，共郎长行莫围棋。 </p><p>玲珑骰子安红豆，入骨相思知不知。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Poem</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>顾城的诗</title>
    <link href="/Poem/%E9%A1%BE%E5%9F%8E%E7%9A%84%E8%AF%97/"/>
    <url>/Poem/%E9%A1%BE%E5%9F%8E%E7%9A%84%E8%AF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="顾城的诗"><a href="#顾城的诗" class="headerlink" title="顾城的诗"></a>顾城的诗</h1><blockquote><p>树枝想去撕裂天空</p><p>但却只戳了几个微笑的窟窿</p><p>它透出了天外的光亮</p><p>人们把它叫做月亮和星星。</p><p>​—— 《星月的由来》 </p><p>你，一会看我，一会看云。</p><p>我觉得，你看我时很远，你看云时很近。 </p><p>​—— 《远和近》 </p><p>草在结它的种子，风在摇它的叶子。我们站着，不说话，就十分美好。 </p><p>​—— 《门前》 </p><p>我需要，最狂的风，和最静的海。</p><p>​ —— 《世界和我·第八个早晨》 </p><p>小巷又弯又长，没有门，没有窗，我拿把旧钥匙，敲着厚厚的墙。</p><p>​—— 《小巷》 </p><p>你不愿意种花，你说，我不愿看见它一点点凋落。</p><p>是的，为了避免结束，你避免了一切开始。 </p><p>​—— 《避免》</p><p>手我是有的,就是不知如何碰你 </p><p>​—— 《我会像青草一样呼吸》</p><p>字迹已模糊,因为思念的缘故</p><p>​—— 《因为思念的缘故》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Poem</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown学习笔记（三）：数学公式</title>
    <link href="/%E6%9D%82%E9%A1%B9/Markdown/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/%E6%9D%82%E9%A1%B9/Markdown/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p>转载自简书：<a href="https://www.jianshu.com/p/e74eb43960a1">https://www.jianshu.com/p/e74eb43960a1</a></p></blockquote><h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><ol><li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li><li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li></ol><h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><ol><li>上标符号，符号：<code>^</code>，如：$x^4$</li><li>下标符号，符号：<code>_</code>，如：$x_1$</li><li>组合符号，符号：<code>&#123;&#125;</code>，如：${16}<em>{8}O{2+}</em>{2}$</li></ol><h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><ol><li>汉字形式，符号：<code>\mbox&#123;&#125;</code>，如：$V_{\mbox{初始}}$</li><li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li><li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li><li>标签，符号<code>\tag&#123;数字&#125;</code>，如：$\tag{11}$</li><li>上大括号，符号：<code>\overbrace&#123;算式&#125;</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li><li>下大括号，符号：<code>\underbrace&#123;算式&#125;</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li><li>上位符号，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：$\vec{x}\stackrel{\mathrm{def}}{&#x3D;}{x_1,\dots,x_n}$</li></ol><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ol><li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li><li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li><li>大空格，符号<code>\</code>，如：$x \  y$</li><li>中空格，符号<code>\:</code>，如：$x : y$</li><li>小空格，符号<code>\,</code>，如：$x , y$</li><li>没有空格，符号&#96;&#96;，如：$xy$</li><li>紧贴，符号<code>\!</code>，如：$x ! y$</li></ol><h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><ol><li><p>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</p></li><li><p>中括号，符号：<code>[]</code>，如：$[x+y]$</p></li><li><p>大括号，符号：<code>\&#123; \&#125;</code>，如：${x+y}$</p></li><li><p>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</p></li><li><p>组合公式，符号：<code>&#123;上位公式 \choose 下位公式&#125;</code>，如：${n+1 \choose k}&#x3D;{n \choose k}+{n \choose k-1}$</p></li><li><p>组合公式，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots&#x3D;n}A_{k_0}A_{k_1}\cdots$</p></li><li><p>多行大括号，没有括号的一端加点，例如：</p><p>左括号 <code>\left\&#123;</code>与<code>\right.</code></p><p>$$ \left{  \begin{matrix} 1 \ 2 \ 3 \ \end{matrix} \right. $$</p><p>右括号<code>\left.</code>与<code>\right\&#125;</code></p><p>$$ \left. \begin{matrix} 1 \ 2 \ 3 \ \end{matrix} \right} $$</p><p>方法一：</p><p>$$ f(x)&#x3D;\left{ \begin{aligned} x &amp; &#x3D; &amp; \cos(t) \ y &amp; &#x3D; &amp; \sin(t) \ z &amp; &#x3D; &amp; \frac xy \end{aligned} \right. $$ </p><p>方法二：</p><p>$$ F^{HLLC}&#x3D;\left{<br>\begin{array}{rcl}<br>F_L       &amp;      &amp; {0      &lt;      S_L}\<br>F^<em>_L     &amp;      &amp; {S_L \leq 0 &lt; S_M}\<br>F^</em>_R     &amp;      &amp; {S_M \leq 0 &lt; S_R}\<br>F_R       &amp;      &amp; {S_R \leq 0}<br>\end{array} \right. $$</p><p>方法三：</p><p>$$f(x)&#x3D; \begin{cases} 0&amp; \text{x&#x3D;0}\ 1&amp; \text{x!&#x3D;0} \end{cases}$$</p></li></ol><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ol><li>加法运算，符号：<code>+</code>，如：$x+y&#x3D;z$</li><li>减法运算，符号：<code>-</code>，如：$x-y&#x3D;z$</li><li>加减运算，符号：<code>\pm</code>，如：$x \pm y&#x3D;z$</li><li>减甲运算，符号：<code>\mp</code>，如：$x \mp y&#x3D;z$</li><li>乘法运算，符号：<code>\times</code>，如：$x \times y&#x3D;z$</li><li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y&#x3D;z$</li><li>星乘运算，符号：<code>\ast</code>，如：$x \ast y&#x3D;z$</li><li>除法运算，符号：<code>\div</code>，如：$x \div y&#x3D;z$</li><li>斜法运算，符号：<code>/</code>，如：$x&#x2F;y&#x3D;z$</li><li>分式表示，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，如：$\frac{x+y}{y+z}$</li><li>分式表示，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code>，如：${x+y} \over {y+z}$</li><li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li></ol><h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><ol><li>平均数运算，符号：<code>\overline&#123;算式&#125;</code>，如：$\overline{xyz}$</li><li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li><li>开方运算，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code>，如：$\sqrt[3]{x+y}$</li><li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li><li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li><li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li><li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li><li>矩阵表示，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li></ol><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol><li>等于运算，符号：<code>=</code>，如：$x+y&#x3D;z$</li><li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li><li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li><li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li><li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li><li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li><li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li><li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li><li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li><li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li><li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li><li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li></ol><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol><li>属于运算，符号：<code>\in</code>，如：$x \in y$</li><li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li><li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li><li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li><li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li><li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li><li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li><li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li><li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li><li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li><li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li><li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li><li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li><li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li><li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li><li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li><li>实数集合，符号：<code>\mathbb&#123;R&#125;</code>，如：<code>\mathbb&#123;R&#125;</code></li><li>自然数集合，符号：<code>\mathbb&#123;Z&#125;</code>，如：<code>\mathbb&#123;Z&#125;</code></li><li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li></ol><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><ol><li>无穷，符号：<code>\infty</code>，如：$\infty$</li><li>虚数，符号：<code>\imath</code>，如：$\imath$</li><li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li><li>数学符号，符号<code>\hat&#123;a&#125;</code>，如：$\hat{a}$</li><li>数学符号，符号<code>\check&#123;a&#125;</code>，如：$\check{a}$</li><li>数学符号，符号<code>\breve&#123;a&#125;</code>，如：$\breve{a}$</li><li>数学符号，符号<code>\tilde&#123;a&#125;</code>，如：$\tilde{a}$</li><li>数学符号，符号<code>\bar&#123;a&#125;</code>，如：$\bar{a}$</li><li>矢量符号，符号<code>\vec&#123;a&#125;</code>，如：$\vec{a}$</li><li>数学符号，符号<code>\acute&#123;a&#125;</code>，如：$\acute{a}$</li><li>数学符号，符号<code>\grave&#123;a&#125;</code>，如：$\grave{a}$</li><li>数学符号，符号<code>\mathring&#123;a&#125;</code>，如：$\mathring{a}$</li><li>一阶导数符号，符号<code>\dot&#123;a&#125;</code>，如：$\dot{a}$</li><li>二阶导数符号，符号<code>\ddot&#123;a&#125;</code>，如：$\ddot{a}$</li><li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li><li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li><li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li><li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li><li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li><li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li><li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li><li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li><li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li><li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li><li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li><li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li></ol><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>A</td><td><code>A</code></td><td>α</td><td><code>\alhpa</code></td></tr><tr><td>B</td><td><code>B</code></td><td>β</td><td><code>\beta</code></td></tr><tr><td>Γ</td><td><code>\Gamma</code></td><td>γ</td><td><code>\gamma</code></td></tr><tr><td>Δ</td><td><code>\Delta</code></td><td>δ</td><td><code>\delta</code></td></tr><tr><td>E</td><td><code>E</code></td><td>ϵ</td><td><code>\epsilon</code></td></tr><tr><td>Z</td><td><code>Z</code></td><td>ζ</td><td><code>\zeta</code></td></tr><tr><td>H</td><td><code>H</code></td><td>η</td><td><code>\eta</code></td></tr><tr><td>Θ</td><td><code>\Theta</code></td><td>θ</td><td><code>\theta</code></td></tr><tr><td>I</td><td><code>I</code></td><td>ι</td><td><code>\iota</code></td></tr><tr><td>K</td><td><code>K</code></td><td>κ</td><td><code>\kappa</code></td></tr><tr><td>Λ</td><td><code>\Lambda</code></td><td>λ</td><td><code>\lambda</code></td></tr><tr><td>M</td><td><code>M</code></td><td>μ</td><td><code>\mu</code></td></tr><tr><td>N</td><td><code>N</code></td><td>ν</td><td><code>\nu</code></td></tr><tr><td>Ξ</td><td><code>\Xi</code></td><td>ξ</td><td><code>\xi</code></td></tr><tr><td>O</td><td><code>O</code></td><td>ο</td><td><code>\omicron</code></td></tr><tr><td>Π</td><td><code>\Pi</code></td><td>π</td><td><code>\pi</code></td></tr><tr><td>P</td><td><code>P</code></td><td>ρ</td><td><code>\rho</code></td></tr><tr><td>Σ</td><td><code>\Sigma</code></td><td>σ</td><td><code>\sigma</code></td></tr><tr><td>T</td><td><code>T</code></td><td>τ</td><td><code>\tau</code></td></tr><tr><td>Υ</td><td><code>\Upsilon</code></td><td>υ</td><td><code>\upsilon</code></td></tr><tr><td>Φ</td><td><code>\Phi</code></td><td>ϕ</td><td><code>\phi</code></td></tr><tr><td>X</td><td><code>X</code></td><td>χ</td><td><code>\chi</code></td></tr><tr><td>Ψ</td><td><code>\Psi</code></td><td>ψ</td><td><code>\psi</code></td></tr><tr><td>Ω</td><td><code>\v</code></td><td>ω</td><td><code>\omega</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown学习笔记（二）：流程图</title>
    <link href="/%E6%9D%82%E9%A1%B9/Markdown/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <url>/%E6%9D%82%E9%A1%B9/Markdown/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="如何在Markdown中画流程图"><a href="#如何在Markdown中画流程图" class="headerlink" title="如何在Markdown中画流程图"></a>如何在Markdown中画流程图</h1><p>如何在Markdown中画流程图呢？当然是用<a href="https://github.com/knsv/mermaid">mermaid</a>了，mermaid支持三种图形的绘制, 分别是流程图, 时序图和甘特图, 本篇文章只介绍了mermaid中流程图在markdown的使用(现在简书的markdown还不支持mermaid，我本地使用的是<a href="https://zh.mweb.im/index.html">MWeb</a>)。</p><h4 id="如何在markdown中使用mermaid"><a href="#如何在markdown中使用mermaid" class="headerlink" title="如何在markdown中使用mermaid"></a>如何在markdown中使用mermaid</h4><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711185152.png" alt="1"> </p><p>流程图方向有下面几个值</p><ul><li>TB 从上到下</li><li>BT 从下到上</li><li>RL 从右到左</li><li>LR 从左到右</li><li>TD 同TB</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>从上到下</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">mermaid<br>graph <span class="hljs-selector-tag">TD</span><br>   <span class="hljs-selector-tag">A</span> --&gt; <span class="hljs-selector-tag">B</span><br></code></pre></div></td></tr></table></figure><p>效果： </p><pre><code class=" mermaid">graph TDA --&gt; B</code></pre><p>从左到右:</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">graph</span> <span class="hljs-built_in">LR</span><br>   A --&gt; <span class="hljs-keyword">B</span> <br></code></pre></div></td></tr></table></figure><p>效果： </p><pre><code class=" mermaid">graph LR   A --&gt; B </code></pre><h4 id="基本图形"><a href="#基本图形" class="headerlink" title="基本图形"></a>基本图形</h4><ul><li>id + [文字描述]矩形</li><li>id + (文字描述)圆角矩形</li><li>id + &gt;文字描述]不对称的矩形</li><li>id + {文字描述}菱形</li><li>id + ((文字描述))圆形</li></ul><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">mermaid<br>graph <span class="hljs-selector-tag">TD</span><br>    id<span class="hljs-selector-attr">[带文本的矩形]</span><br>    <span class="hljs-built_in">id4</span>(带文本的圆角矩形)<br>    id3&gt;带文本的不对称的矩形]<br>    id1&#123;带文本的菱形&#125;<br>    <span class="hljs-built_in">id2</span>((带文本的圆形))<br></code></pre></div></td></tr></table></figure><p>效果： </p><pre><code class=" mermaid">graph TD    id[带文本的矩形]    id4(带文本的圆角矩形)    id3&gt;带文本的不对称的矩形]    id1&#123;带文本的菱形&#125;    id2((带文本的圆形))</code></pre><h4 id="节点之间的连接"><a href="#节点之间的连接" class="headerlink" title="节点之间的连接"></a>节点之间的连接</h4><ul><li>A –&gt; B A带箭头指向B</li><li>A — B A不带箭头指向B</li><li>A -.- B A用虚线指向B</li><li>A -.-&gt; B A用带箭头的虚线指向B</li><li>A &#x3D;&#x3D;&gt; B A用加粗的箭头指向B</li><li>A – 描述 — B A不带箭头指向B并在中间加上文字描述</li><li>A – 描述 –&gt; B A带箭头指向B并在中间加上文字描述</li><li>A -. 描述 .-&gt; B A用带箭头的虚线指向B并在中间加上文字描述</li><li>A &#x3D;&#x3D; 描述 &#x3D;&#x3D;&gt; B A用加粗的箭头指向B并在中间加上文字描述</li></ul><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">mermaid<br>graph LR<br>    A<span class="hljs-comment">[A]</span> --&gt; B<span class="hljs-comment">[B]</span> <br>    A1<span class="hljs-comment">[A]</span> --- B1<span class="hljs-comment">[B]</span> <br>    A4<span class="hljs-comment">[A]</span> -.- B4<span class="hljs-comment">[B]</span> <br>    A5<span class="hljs-comment">[A]</span> -.-&gt; B5<span class="hljs-comment">[B]</span> <br>    A7<span class="hljs-comment">[A]</span> ==&gt; B7<span class="hljs-comment">[B]</span> <br>    A2<span class="hljs-comment">[A]</span> -- 描述 --- B2<span class="hljs-comment">[B]</span> <br>    A3<span class="hljs-comment">[A]</span> -- 描述 --&gt; B3<span class="hljs-comment">[B]</span> <br>    A6<span class="hljs-comment">[A]</span> -. 描述 .-&gt; B6<span class="hljs-comment">[B]</span> <br>    A8<span class="hljs-comment">[A]</span> == 描述 ==&gt; B8<span class="hljs-comment">[B]</span> <br></code></pre></div></td></tr></table></figure><p>效果：</p><pre><code class=" mermaid">graph LR    A[A] --&gt; B[B]     A1[A] --- B1[B]     A4[A] -.- B4[B]     A5[A] -.-&gt; B5[B]     A7[A] ==&gt; B7[B]     A2[A] -- 描述 --- B2[B]     A3[A] -- 描述 --&gt; B3[B]     A6[A] -. 描述 .-&gt; B6[B]     A8[A] == 描述 ==&gt; B8[B] </code></pre><h4 id="子流程图"><a href="#子流程图" class="headerlink" title="子流程图"></a>子流程图</h4><p>格式</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">subgraph <span class="hljs-built_in">title</span><br>    <span class="hljs-keyword">graph</span> definition<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">mermaid</span><br><span class="hljs-symbol">graph</span> TB<br>    <span class="hljs-built_in">c1</span>--&gt;<span class="hljs-built_in">a2</span><br>    subgraph one<br>    <span class="hljs-built_in">a1</span>--&gt;<span class="hljs-built_in">a2</span><br>    <span class="hljs-meta">end</span><br>    subgraph two<br>    b1--&gt;b2<br>    <span class="hljs-meta">end</span><br>    subgraph three<br>    <span class="hljs-built_in">c1</span>--&gt;<span class="hljs-built_in">c2</span><br>    <span class="hljs-meta">end</span><br></code></pre></div></td></tr></table></figure><p>效果： </p><pre><code class=" mermaid">graph TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end</code></pre><h4 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h4><p>语法：style id 具体样式</p><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing">mermaid<br>graph LR<br>    <span class="hljs-title function_">id1</span>(Start)--&gt;<span class="hljs-title function_">id2</span>(Stop)<br>    style id1 <span class="hljs-built_in">fill</span>:#f9f,<span class="hljs-built_in">stroke</span>:#<span class="hljs-number">333</span>,<span class="hljs-built_in">stroke</span>-<span class="hljs-built_in">width</span>:<span class="hljs-number">4</span>px,<span class="hljs-built_in">fill</span>-opacity:<span class="hljs-number">0.5</span><br>    style id2 <span class="hljs-built_in">fill</span>:#ccf,<span class="hljs-built_in">stroke</span>:#f66,<span class="hljs-built_in">stroke</span>-<span class="hljs-built_in">width</span>:<span class="hljs-number">2</span>px,<span class="hljs-built_in">stroke</span>-dasharray: <span class="hljs-number">10</span>,<span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>效果： </p><pre><code class=" mermaid">graph LR    id1(Start)--&gt;id2(Stop)    style id1 fill:#f9f,stroke:#333,stroke-width:4px,fill-opacity:0.5    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 10,5</code></pre><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>绘制一个流程图,找出 A、 B、 C 三个数中最大的一个数。</p><h5 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h5><figure class="highlight xl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xl">mermaid<br>graph LR<br>    <span class="hljs-function"><span class="hljs-title">start</span>[开始] --&gt;</span> input[输入A,B,C]<br>    <span class="hljs-function"><span class="hljs-title">input</span> --&gt;</span> conditionA&#123;A是否大于B&#125;<br>    <span class="hljs-function"><span class="hljs-title">conditionA</span> -- YES --&gt;</span> conditionC&#123;A是否大于C&#125;<br>    <span class="hljs-function"><span class="hljs-title">conditionA</span> -- NO --&gt;</span> conditionB&#123;B是否大于C&#125;<br>    <span class="hljs-function"><span class="hljs-title">conditionC</span> -- YES --&gt;</span> printA[输出A]<br>    <span class="hljs-function"><span class="hljs-title">conditionC</span> -- NO --&gt;</span> printC[输出C]<br>    <span class="hljs-function"><span class="hljs-title">conditionB</span> -- YES --&gt;</span> printB[输出B]<br>    <span class="hljs-function"><span class="hljs-title">conditionB</span> -- NO --&gt;</span> printC[输出C]<br>    <span class="hljs-function"><span class="hljs-title">printA</span> --&gt;</span> stop[结束]<br>    <span class="hljs-function"><span class="hljs-title">printC</span> --&gt;</span> stop<br>    <span class="hljs-function"><span class="hljs-title">printB</span> --&gt;</span> stop<br></code></pre></div></td></tr></table></figure><p>效果： </p><pre><code class=" mermaid">graph LR    start[开始] --&gt; input[输入A,B,C]    input --&gt; conditionA&#123;A是否大于B&#125;    conditionA -- YES --&gt; conditionC&#123;A是否大于C&#125;    conditionA -- NO --&gt; conditionB&#123;B是否大于C&#125;    conditionC -- YES --&gt; printA[输出A]    conditionC -- NO --&gt; printC[输出C]    conditionB -- YES --&gt; printB[输出B]    conditionB -- NO --&gt; printC[输出C]    printA --&gt; stop[结束]    printC --&gt; stop    printB --&gt; stop</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown学习笔记（一）</title>
    <link href="/%E6%9D%82%E9%A1%B9/Markdown/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/%E6%9D%82%E9%A1%B9/Markdown/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Markdown学习笔记</p><blockquote><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。设计之初是为了纯文本而设计的，所以比较简单，可以和HTML配合，可以让Markdown的功能得到拓展。本文是用Typora编写的。</p></blockquote><h3 id="一、Markdown-标题"><a href="#一、Markdown-标题" class="headerlink" title="一、Markdown 标题"></a>一、Markdown 标题</h3><p><strong>语法：</strong> 使用”<strong>#</strong>“标记标题，一个**#**表示一个级数</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section"># 这是一级标题</span><br><span class="hljs-section">## 这是二级标题</span><br><span class="hljs-section">### 这是三级标题</span><br><span class="hljs-section">#### 这是四级标题</span><br><span class="hljs-section">##### 这是五级标题</span><br><span class="hljs-section">###### 这是六级标题</span><br></code></pre></div></td></tr></table></figure><p>注意：标记与内容间要加上空格</p><p> <strong>效果：</strong> </p><p><img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184804.png" alt="标题级数"></p><h3 id="二、Markdown-文字"><a href="#二、Markdown-文字" class="headerlink" title="二、Markdown 文字"></a>二、Markdown 文字</h3><p><strong>语法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-emphasis">*这是倾斜的文字*</span>`<br><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字*</span>**</span><br>~~这是加删除线的文字~~<br>//下划线可以通过HTML标签<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>来实现:<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>带下划线的文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br>//脚注<br>[^要注明的内容]<br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong></p><p> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184831.png" alt="标题级数"></p><h3 id="三、Markdown-区块"><a href="#三、Markdown-区块" class="headerlink" title="三、Markdown 区块"></a>三、Markdown 区块</h3><p><strong>语法：</strong> 在文字前加”<strong>&gt;</strong>“，可以嵌套</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 内容</span><br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong></p><p> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184846.png" alt="标题级数"></p><h3 id="四、Markdown-分割线"><a href="#四、Markdown-分割线" class="headerlink" title="四、Markdown 分割线"></a>四、Markdown 分割线</h3><p><strong>语法：</strong> 用三个连续的”*“或者”-“都可以</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section"><span class="hljs-strong">***</span></span><br><span class="hljs-strong"><span class="hljs-section">---</span></span><br><span class="hljs-strong"><span class="hljs-section">**</span><span class="hljs-strong">****</span></span><br><span class="hljs-section">------</span><br>//都可以打出分割线<br></code></pre></div></td></tr></table></figure><p>注意：</p><p>单个的”-“或者”*“会被处理成列表</p><p><strong>效果：</strong></p><hr><h3 id="五、Markdown-列表"><a href="#五、Markdown-列表" class="headerlink" title="五、Markdown 列表"></a>五、Markdown 列表</h3><ol><li><p>无序列表 <strong>语法：</strong> 用”-“或”+”或”*“加内容</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br></code></pre></div></td></tr></table></figure><p>注意：标记与内容间要加上空格 </p><p><strong>效果：</strong></p><p> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184900.png" alt="标题级数"></p></li><li><p>有序列表 数字加点</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">number. 内容<br></code></pre></div></td></tr></table></figure><p>注意：标记与内容间要加上空格 </p><p><strong>效果：</strong></p><p> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184923.png" alt="标题级数"></p></li><li><p>列表嵌套 在上一级敲回车，然后按下Tab键，或者Backspace键 有序和无需的列表都可以互相嵌套 </p><p><strong>效果：</strong></p><p> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184931.png" alt="标题级数"></p></li></ol><h3 id="六、Markdown-超链接"><a href="#六、Markdown-超链接" class="headerlink" title="六、Markdown 超链接"></a>六、Markdown 超链接</h3><ol><li><p>显示链接名 <strong>语法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[<span class="hljs-string">链接名</span>](<span class="hljs-link">超链接 超链接title</span>)<br>//超链接title可不写<br></code></pre></div></td></tr></table></figure><p><strong>效果:</strong> <a href="https://www.baidu.com/">百度</a></p></li><li><p>直接显示链接 <strong>语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">超链接</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong> &lt;<a href="http://www.baidu.com>">www.baidu.com&gt;</a></p></li><li><p>高级链接 链接可以用变量来表示，文档末尾附带变量地址。</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">这个链接用1作为网址变量：[<span class="hljs-string">Baidu</span>][<span class="hljs-symbol">1</span>]<br>这个链接用quosimodo作为网址：[<span class="hljs-string">Quosimodo</span>][<span class="hljs-symbol">quosimodo</span>]<br>然后这个文档的结尾为变量赋值<br>赋值方式：<br>[<span class="hljs-symbol">变量名</span>]: <span class="hljs-link">链接</span><br>例子：<br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">http://www.baidu.com</span><br>[<span class="hljs-symbol">quosimodo</span>]:<span class="hljs-link">http://quosimodo.cn</span><br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong></p><p>这个链接用<code>1</code>作为网址变量<a href="http://www.baidu.com/">Baidu</a><br>这个链接用<code>quosimodo</code>作为网址<a href="https://www.quosimodo.cn/">Quosimodo</a></p></li></ol><h3 id="七、Markdown-图片"><a href="#七、Markdown-图片" class="headerlink" title="七、Markdown 图片"></a>七、Markdown 图片</h3><p><strong>语法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">图片alt</span>](<span class="hljs-link">图片地址 图片title</span>)<br>//alt就是显示在图片下方的文字，相当于图片的描述<br>//title是图片的标题，当鼠标移动到图片上时显示的内容，tilte可加可不加<br></code></pre></div></td></tr></table></figure><p>目前Markdown还不能控制图片大小，但可以通过html的<code>&lt;img&gt;</code>标签实现</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184940.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;alt&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;树叶&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184940.jpeg" alt="alt" title="树叶" style="zoom:50%;" /></p><h3 id="八、Markdown-表格"><a href="#八、Markdown-表格" class="headerlink" title="八、Markdown 表格"></a>八、Markdown 表格</h3><p><strong>语法：</strong></p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">表头表头表头<br><span class="hljs-deletion">-:-:-:</span><br>内容内容内容<br>内容内容内容<br><br>第二行分割表头和内容。<br><span class="hljs-deletion">- 有一个就行</span><br>文字默认居左<br><span class="hljs-deletion">-两边加：表示文字居中</span><br><span class="hljs-deletion">-右边加：表示文字居右</span><br>注：原生的语法两边都要用  包起来<br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong> <img src="https://gitee.com/quosimodo/ImageHost/raw/main/img/20210711184948.png"> Typora在创建表头后回车会自动生成表格，对齐方式等可以直接选择,行数和列数也可以很方便的调整。</p><h3 id="九、Markdown-代码"><a href="#九、Markdown-代码" class="headerlink" title="九、Markdown 代码"></a>九、Markdown 代码</h3><ol><li><p>单行标记 <strong>语法：</strong> 代码之间用一个反引号引起来(PS:反引号在ESC键的下方，是一个英文字符，中文字符都是无效的)</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-code">`Code`</span><br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong> <code>代码内容</code></p></li><li><p>代码块 <strong>语法：</strong> 代码之间分别用三个反引号包起来，且两边的反引号单独占一行,代码块还可以选择语言。</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">​<span class="hljs-code">```</span><br><span class="hljs-code">code...</span><br><span class="hljs-code">code...</span><br><span class="hljs-code">code...</span><br><span class="hljs-code">​```</span><br></code></pre></div></td></tr></table></figure><p><strong>效果如上所示</strong></p><p>Typora上打了三个反引号回车就会生成一个代码块，可以选择语言种类。可以在换行前写代码的语言种类</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">​<span class="hljs-code">```语言类型(此处回车即可)</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="十、Markdown-流程图"><a href="#十、Markdown-流程图" class="headerlink" title="十、Markdown 流程图"></a>十、Markdown 流程图</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">​<span class="hljs-code">```flow</span><br><span class="hljs-code">st=&gt;start: 开始</span><br><span class="hljs-code">op=&gt;operation: My Operation</span><br><span class="hljs-code">cond=&gt;condition: Yes or No?</span><br><span class="hljs-code">e=&gt;end</span><br><span class="hljs-code">st-&gt;op-&gt;cond</span><br><span class="hljs-code">cond(yes)-&gt;e</span><br><span class="hljs-code">cond(no)-&gt;op</span><br><span class="hljs-code">&amp;```</span><br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs flow">st=&gt;start: 开始<br>op=&gt;operation: My Operation<br>cond=&gt;condition: Yes or No?<br>e=&gt;end<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br>&amp;```<br></code></pre></div></td></tr></table></figure><h3 id="十一、Markdown-高级技巧"><a href="#十一、Markdown-高级技巧" class="headerlink" title="十一、Markdown 高级技巧"></a>十一、Markdown 高级技巧</h3><ol><li><p>支持的 HTML 元素 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">使用 <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Alt<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Del<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span> 重启电脑<br></code></pre></div></td></tr></table></figure><p><strong>效果：</strong> 使用 Ctrl+Alt+Del 重启电脑</p></li><li><p>转移字符 因为Markdown使用了一些特殊符号，所以这些符号要正确的显示就要在符号前加上\来转义以正确的显示字符。 Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">   反斜线<br>`   反引号<br><span class="hljs-bullet">*</span>   星号<br>_   下划线<br>&#123;&#125;  花括号<br>[]  方括号<br>()  小括号<br><span class="hljs-section">#   井字号</span><br><span class="hljs-bullet">+</span>   加号<br><span class="hljs-bullet">-</span>   减号<br>.   英文句点<br>!   感叹号<br></code></pre></div></td></tr></table></figure></li><li><p>公式 (这个我也不会) 当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">$$<br>\mathbf&#123;V&#125;<span class="hljs-emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125; <br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;<br>$$<br></code></pre></div></td></tr></table></figure></li></ol><p>文章内容引自简书和runoob，由本站整理并收集，如有侵权，请告知！ 文章内容未经同意禁止转载。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
